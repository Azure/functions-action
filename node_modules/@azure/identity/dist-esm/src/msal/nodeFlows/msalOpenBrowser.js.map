{"version":3,"file":"msalOpenBrowser.js","sourceRoot":"","sources":["../../../../src/msal/nodeFlows/msalOpenBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msalNode from \"@azure/msal-node\";\n\nimport { MsalNode, MsalNodeOptions } from \"./msalNodeCommon\";\n\nimport { AccessToken } from \"@azure/core-auth\";\nimport { CredentialFlowGetTokenOptions } from \"../credentials\";\nimport { credentialLogger } from \"../../util/logging\";\nimport { handleMsalError } from \"../utils\";\nimport { hasNativeBroker } from \"./msalPlugins\";\nimport open from \"open\";\n\n/**\n * Options that can be passed to configure MSAL to handle authentication through opening a browser window.\n * @internal\n */\nexport interface MsalOpenBrowserOptions extends MsalNodeOptions {\n  redirectUri?: string;\n  loginHint?: string;\n  browserCustomizationOptions?: {\n    errorMessage?: string;\n    successMessage?: string;\n  };\n}\n\n/**\n * A call to open(), but mockable\n * @internal\n */\nexport const interactiveBrowserMockable = {\n  open,\n};\n\n/**\n * This MSAL client sets up a web server to listen for redirect callbacks, then calls to the MSAL's public application's `acquireTokenByDeviceCode` during `doGetToken`\n * to trigger the authentication flow, and then respond based on the values obtained from the redirect callback\n * @internal\n */\nexport class MsalOpenBrowser extends MsalNode {\n  private loginHint?: string;\n  private errorTemplate?: string;\n  private successTemplate?: string;\n  private useDefaultBrokerAccount?: boolean;\n\n  constructor(options: MsalOpenBrowserOptions) {\n    super(options);\n    this.loginHint = options.loginHint;\n    this.errorTemplate = options.browserCustomizationOptions?.errorMessage;\n    this.successTemplate = options.browserCustomizationOptions?.successMessage;\n    this.logger = credentialLogger(\"Node.js MSAL Open Browser\");\n    this.useDefaultBrokerAccount =\n      options.brokerOptions?.enabled && options.brokerOptions?.useDefaultBrokerAccount;\n  }\n\n  protected async doGetToken(\n    scopes: string[],\n    options: CredentialFlowGetTokenOptions = {},\n  ): Promise<AccessToken> {\n    try {\n      const interactiveRequest: msalNode.InteractiveRequest = {\n        openBrowser: async (url) => {\n          await interactiveBrowserMockable.open(url, { wait: true, newInstance: true });\n        },\n        scopes,\n        authority: options?.authority,\n        claims: options?.claims,\n        correlationId: options?.correlationId,\n        loginHint: this.loginHint,\n        errorTemplate: this.errorTemplate,\n        successTemplate: this.successTemplate,\n      };\n\n      if (hasNativeBroker() && this.enableBroker) {\n        return this.doGetBrokeredToken(scopes, interactiveRequest, {\n          enableCae: options.enableCae,\n          useDefaultBrokerAccount: this.useDefaultBrokerAccount,\n        });\n      }\n\n      // If the broker is not enabled, we will fall back to interactive authentication\n\n      if (hasNativeBroker() && !this.enableBroker) {\n        this.logger.verbose(\n          \"Authentication will resume normally without the broker, since it's not enabled\",\n        );\n      }\n\n      const result = await this.getApp(\"public\", options?.enableCae).acquireTokenInteractive(\n        interactiveRequest,\n      );\n      return this.handleResult(scopes, result || undefined);\n    } catch (err: any) {\n      throw handleMsalError(scopes, err, options);\n    }\n  }\n\n  /**\n   * A helper function that supports brokered authentication through the MSAL's public application.\n   *\n   * When options.useDefaultBrokerAccount is true, the method will attempt to authenticate using the default broker account.\n   * If the default broker account is not available, the method will fall back to interactive authentication.\n   */\n  private async doGetBrokeredToken(\n    scopes: string[],\n    interactiveRequest: msalNode.InteractiveRequest,\n    options: {\n      enableCae?: boolean;\n      useDefaultBrokerAccount?: boolean;\n    },\n  ): Promise<AccessToken> {\n    this.logger.verbose(\"Authentication will resume through the broker\");\n    if (this.parentWindowHandle) {\n      interactiveRequest.windowHandle = Buffer.from(this.parentWindowHandle);\n    } else {\n      // error should have been thrown from within the constructor of InteractiveBrowserCredential\n      this.logger.warning(\n        \"Parent window handle is not specified for the broker. This may cause unexpected behavior. Please provide the parentWindowHandle.\",\n      );\n    }\n\n    if (this.enableMsaPassthrough) {\n      (interactiveRequest.tokenQueryParameters ??= {})[\"msal_request_type\"] =\n        \"consumer_passthrough\";\n    }\n\n    if (options.useDefaultBrokerAccount) {\n      interactiveRequest.prompt = \"none\";\n      this.logger.verbose(\"Attempting broker authentication using the default broker account\");\n    } else {\n      interactiveRequest.prompt = undefined;\n      this.logger.verbose(\"Attempting broker authentication without the default broker account\");\n    }\n\n    try {\n      const result = await this.getApp(\"public\", options?.enableCae).acquireTokenInteractive(\n        interactiveRequest,\n      );\n      if (result.fromNativeBroker) {\n        this.logger.verbose(`This result is returned from native broker`);\n      }\n      return this.handleResult(scopes, result || undefined);\n    } catch (e: any) {\n      this.logger.verbose(`Failed to authenticate through the broker: ${e.message}`);\n      // If we tried to use the default broker account and failed, fall back to interactive authentication\n      if (options.useDefaultBrokerAccount) {\n        return this.doGetBrokeredToken(scopes, interactiveRequest, {\n          enableCae: options.enableCae,\n          useDefaultBrokerAccount: false,\n        });\n      } else {\n        // If we're not using the default broker account, throw the error\n        throw handleMsalError(scopes, e);\n      }\n    }\n  }\n}\n"]}