{"version":3,"file":"XhrClient.js","sources":["../../src/network/XhrClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\n\n/**\n * This client implements the XMLHttpRequest class to send GET and POST requests.\n */\nexport class XhrClient implements INetworkModule {\n\n    /**\n     * XhrClient for REST endpoints - Get request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options);\n    }\n\n    /**\n     * XhrClient for REST endpoints - Post request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options);\n    }\n\n    /**\n     * Helper for XhrClient requests.\n     * @param url \n     * @param method \n     * @param options \n     */\n    private sendRequestAsync<T>(url: string, method: HTTP_REQUEST_TYPE, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        return new Promise<NetworkResponse<T>>((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(method, url, /* async: */ true);\n            this.setXhrHeaders(xhr, options);\n            xhr.onload = (): void => {\n                if (xhr.status < 200 || xhr.status >= 300) {\n                    if (method === HTTP_REQUEST_TYPE.POST) {\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    } else {\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    }\n                }\n                try {\n                    const jsonResponse = JSON.parse(xhr.responseText) as T;\n                    const networkResponse: NetworkResponse<T> = {\n                        headers: this.getHeaderDict(xhr),\n                        body: jsonResponse,\n                        status: xhr.status\n                    };\n                    resolve(networkResponse);\n                } catch (e) {\n                    reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n                }\n            };\n\n            xhr.onerror = (): void => {\n                if (window.navigator.onLine) {\n                    if (method === HTTP_REQUEST_TYPE.POST) {\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    } else {\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    }\n                } else {\n                    reject(BrowserAuthError.createNoNetworkConnectivityError());\n                }\n            };\n\n            if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n                xhr.send(options.body);\n            } else if (method === HTTP_REQUEST_TYPE.GET) {\n                xhr.send();\n            } else {\n                throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n            }\n        });\n    }\n\n    /**\n     * Helper to set XHR headers for request.\n     * @param xhr \n     * @param options \n     */\n    private setXhrHeaders(xhr: XMLHttpRequest, options?: NetworkRequestOptions): void {\n        if (options && options.headers) {\n            const headers = options.headers;\n            Object.keys(headers).forEach((key: string) => {\n                xhr.setRequestHeader(key, headers[key]);\n            });\n        }\n    }\n\n    /**\n     * Gets a string map of the headers received in the response.\n     * \n     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\n     * @param xhr \n     */\n    private getHeaderDict(xhr: XMLHttpRequest): Record<string, string> {\n        const headerString = xhr.getAllResponseHeaders();\n        const headerArr = headerString.trim().split(/[\\r\\n]+/);\n        const headerDict: Record<string, string> = {};\n        headerArr.forEach((value: string) => {\n            const parts = value.split(\": \");\n            const headerName = parts.shift();\n            const headerVal = parts.join(\": \");\n            if (headerName && headerVal) {\n                headerDict[headerName] = headerVal;\n            }\n        });\n\n        return headerDict;\n    }\n}\n"],"names":[],"mappings":"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"}