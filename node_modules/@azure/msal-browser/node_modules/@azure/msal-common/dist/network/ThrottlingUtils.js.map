{"version":3,"file":"ThrottlingUtils.js","sources":["../../src/network/ThrottlingUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NetworkResponse } from \"./NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { HeaderNames, ThrottlingConstants, Constants } from \"../utils/Constants\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerError } from \"../error/ServerError\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\nexport class ThrottlingUtils {\n\n    /**\n     * Prepares a RequestThumbprint to be stored as a key.\n     * @param thumbprint\n     */\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n\n    /**\n     * Performs necessary throttling checks before a network request.\n     * @param cacheManager\n     * @param thumbprint\n     */\n    static preProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint): void {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key);\n                return;\n            }\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n\n    /**\n     * Performs necessary throttling checks after a network request.\n     * @param cacheManager\n     * @param thumbprint\n     * @param response\n     */\n    static postProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint, response: NetworkResponse<ServerAuthorizationTokenResponse>): void {\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue: ThrottlingEntity = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror\n            };\n            cacheManager.setThrottlingCache(\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\n                thumbprintValue\n            );\n        }\n    }\n\n    /**\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\n     * @param response\n     */\n    static checkResponseStatus(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        return response.status === 429 || response.status >= 500 && response.status < 600;\n    }\n\n    /**\n     * Checks a NetworkResponse object's RetryAfter header\n     * @param response\n     */\n    static checkResponseForRetryAfter(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        if (response.headers) {\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n        }\n        return false;\n    }\n\n    /**\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n     * @param throttleTime\n     */\n    static calculateThrottleTime(throttleTime: number): number {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(\n            currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\n            currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\n        ) * 1000);\n    }\n\n    static removeThrottle(cacheManager: CacheManager, clientId: string, request: BaseAuthRequest, homeAccountIdentifier?: string): void {\n        const thumbprint: RequestThumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        cacheManager.removeItem(key);\n    }\n}\n"],"names":[],"mappings":"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"}