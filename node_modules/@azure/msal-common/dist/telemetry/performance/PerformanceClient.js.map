{"version":3,"file":"PerformanceClient.js","sources":["../../../src/telemetry/performance/PerformanceClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ApplicationTelemetry } from \"../../config/ClientConfiguration\";\r\nimport { Logger } from \"../../logger/Logger\";\r\nimport { InProgressPerformanceEvent, IPerformanceClient, PerformanceCallbackFunction } from \"./IPerformanceClient\";\r\nimport { IPerformanceMeasurement } from \"./IPerformanceMeasurement\";\r\nimport { Counters, PerformanceEvent, PerformanceEvents, PerformanceEventStatus, StaticFields } from \"./PerformanceEvent\";\r\n\r\nexport abstract class PerformanceClient implements IPerformanceClient {\r\n    protected authority: string;\r\n    protected libraryName: string;\r\n    protected libraryVersion: string;\r\n    protected applicationTelemetry: ApplicationTelemetry;\r\n    protected clientId: string;\r\n    protected logger: Logger;\r\n    protected callbacks: Map<string, PerformanceCallbackFunction>;\r\n\r\n    /**\r\n     * Multiple events with the same correlation id.\r\n     * Double keyed by correlation id and event id.\r\n     * @protected\r\n     * @type {Map<string, Map<string, PerformanceEvent>>}\r\n     */\r\n    protected eventsByCorrelationId: Map<string, Map<string, PerformanceEvent>>;\r\n\r\n    /**\r\n     * Fields to be emitted which are scoped to the top level request and whose value will not change in submeasurements\r\n     * For example: App name, version, etc.\r\n     */\r\n    protected staticFieldsByCorrelationId: Map<string, StaticFields>;\r\n\r\n    /**\r\n     * Counters to be emitted which are scoped to the top level request and whose value may change in sub-measurements\r\n     */\r\n    protected countersByCorrelationId: Map<string, Counters>;\r\n\r\n    /**\r\n     * Underlying performance measurements for each operation\r\n     *\r\n     * @protected\r\n     * @type {Map<string, IPerformanceMeasurement>}\r\n     */\r\n    protected measurementsById: Map<string, IPerformanceMeasurement>;\r\n\r\n    /**\r\n     * Creates an instance of PerformanceClient,\r\n     * an abstract class containing core performance telemetry logic.\r\n     *\r\n     * @constructor\r\n     * @param {string} clientId Client ID of the application\r\n     * @param {string} authority Authority used by the application\r\n     * @param {Logger} logger Logger used by the application\r\n     * @param {string} libraryName Name of the library\r\n     * @param {string} libraryVersion Version of the library\r\n     */\r\n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry) {\r\n        this.authority = authority;\r\n        this.libraryName = libraryName;\r\n        this.libraryVersion = libraryVersion;\r\n        this.applicationTelemetry = applicationTelemetry;\r\n        this.clientId = clientId;\r\n        this.logger = logger;\r\n        this.callbacks = new Map();\r\n        this.eventsByCorrelationId = new Map();\r\n        this.staticFieldsByCorrelationId = new Map();\r\n        this.measurementsById = new Map();\r\n        this.countersByCorrelationId = new Map();\r\n    }\r\n\r\n    /**\r\n     * Generates and returns a unique id, typically a guid.\r\n     *\r\n     * @abstract\r\n     * @returns {string}\r\n     */\r\n    abstract generateId(): string;\r\n\r\n    /**\r\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n     * Note: this function can be changed to abstract at the next major version bump.\r\n     *\r\n     * @param {string} measureName\r\n     * @param {string} correlationId\r\n     * @returns {IPerformanceMeasurement}\r\n     */\r\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n    startPerformanceMeasurement(measureName: string, correlationId: string): IPerformanceMeasurement {\r\n        return {} as IPerformanceMeasurement;\r\n    }\r\n\r\n    /**\r\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n     * Note: this incorrectly-named function will be removed at the next major version bump.\r\n     *\r\n     * @param {string} measureName\r\n     * @param {string} correlationId\r\n     * @returns {IPerformanceMeasurement}\r\n     */\r\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\r\n        return {} as IPerformanceMeasurement;\r\n    }\r\n\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {InProgressPerformanceEvent}\r\n     */\r\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\r\n        // Generate a placeholder correlation if the request does not provide one\r\n        const eventCorrelationId = correlationId || this.generateId();\r\n        if (!correlationId) {\r\n            this.logger.info(`PerformanceClient: No correlation id provided for ${measureName}, generating`, eventCorrelationId);\r\n        }\r\n\r\n        // Duplicate code to address spelling error will be removed at the next major version bump.\r\n        this.logger.trace(`PerformanceClient: Performance measurement started for ${measureName}`, eventCorrelationId);\r\n        let validMeasurement: IPerformanceMeasurement;\r\n        const performanceMeasuremeant = this.startPerformanceMeasuremeant(measureName, eventCorrelationId);\r\n        if (performanceMeasuremeant.startMeasurement) {\r\n            performanceMeasuremeant.startMeasurement();\r\n            validMeasurement = performanceMeasuremeant;\r\n        } else {\r\n            const performanceMeasurement = this.startPerformanceMeasurement(measureName, eventCorrelationId);\r\n            performanceMeasurement.startMeasurement();\r\n            validMeasurement = performanceMeasurement;\r\n        }\r\n\r\n        const inProgressEvent: PerformanceEvent = {\r\n            eventId: this.generateId(),\r\n            status: PerformanceEventStatus.InProgress,\r\n            authority: this.authority,\r\n            libraryName: this.libraryName,\r\n            libraryVersion: this.libraryVersion,\r\n            clientId: this.clientId,\r\n            name: measureName,\r\n            startTimeMs: Date.now(),\r\n            correlationId: eventCorrelationId,\r\n        };\r\n\r\n        // Store in progress events so they can be discarded if not ended properly\r\n        this.cacheEventByCorrelationId(inProgressEvent);\r\n\r\n        const staticFields: StaticFields = {\r\n            appName: this.applicationTelemetry?.appName,\r\n            appVersion: this.applicationTelemetry?.appVersion,\r\n        };\r\n        this.addStaticFields(staticFields, eventCorrelationId);\r\n        this.cacheMeasurement(inProgressEvent, validMeasurement);\r\n\r\n        // Return the event and functions the caller can use to properly end/flush the measurement\r\n        return {\r\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\r\n                const completedEvent = this.endMeasurement({\r\n                    // Initial set of event properties\r\n                    ...inProgressEvent,\r\n                    // Properties set when event ends\r\n                    ...event\r\n                });\r\n\r\n                if (completedEvent) {\r\n                    // Cache event so that submeasurements can be added downstream\r\n                    this.cacheEventByCorrelationId(completedEvent);\r\n                }\r\n                return completedEvent;\r\n            },\r\n            flushMeasurement: () => {\r\n                return this.flushMeasurements(inProgressEvent.name, inProgressEvent.correlationId);\r\n            },\r\n            discardMeasurement: () => {\r\n                return this.discardMeasurements(inProgressEvent.correlationId);\r\n            },\r\n            addStaticFields: (fields: StaticFields) => {\r\n                return this.addStaticFields(fields, inProgressEvent.correlationId);\r\n            },\r\n            increment: (counters: Counters) => {\r\n                return this.increment(counters, inProgressEvent.correlationId);\r\n            },\r\n            measurement: validMeasurement,\r\n            event: inProgressEvent\r\n        };\r\n\r\n    }\r\n\r\n    /**\r\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\r\n     * as consumers should instead use the function returned by startMeasurement.\r\n     *\r\n     * @param {PerformanceEvent} event\r\n     * @returns {(PerformanceEvent | null)}\r\n     */\r\n    endMeasurement(event: PerformanceEvent): PerformanceEvent | null {\r\n        const performanceMeasurement = this.measurementsById.get(event.eventId);\r\n        if (performanceMeasurement) {\r\n            // Immediately delete so that the same event isnt ended twice\r\n            this.measurementsById.delete(event.eventId);\r\n            performanceMeasurement.endMeasurement();\r\n            const durationMs = performanceMeasurement.flushMeasurement();\r\n            // null indicates no measurement was taken (e.g. needed performance APIs not present)\r\n            if (durationMs !== null) {\r\n                this.logger.trace(`PerformanceClient: Performance measurement ended for ${event.name}: ${durationMs} ms`, event.correlationId);\r\n                const completedEvent: PerformanceEvent = {\r\n                    // Allow duration to be overwritten when event ends (e.g. testing), but not status\r\n                    durationMs: Math.round(durationMs),\r\n                    ...event,\r\n                    status: PerformanceEventStatus.Completed,\r\n                };\r\n\r\n                return completedEvent;\r\n            } else {\r\n                this.logger.trace(\"PerformanceClient: Performance measurement not taken\", event.correlationId);\r\n            }\r\n        } else {\r\n            this.logger.trace(`PerformanceClient: Measurement not found for ${event.eventId}`, event.correlationId);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Saves extra information to be emitted when the measurements are flushed\r\n     * @param fields\r\n     * @param correlationId\r\n     */\r\n    addStaticFields(fields: StaticFields, correlationId: string) : void{\r\n        const existingStaticFields = this.staticFieldsByCorrelationId.get(correlationId);\r\n        if (existingStaticFields) {\r\n            this.logger.trace(\"PerformanceClient: Updating static fields\");\r\n            this.staticFieldsByCorrelationId.set(correlationId, {...existingStaticFields, ...fields});\r\n        } else {\r\n            this.logger.trace(\"PerformanceClient: Adding static fields\");\r\n            this.staticFieldsByCorrelationId.set(correlationId, fields);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment counters to be emitted when the measurements are flushed\r\n     * @param counters {Counters}\r\n     * @param correlationId {string} correlation identifier\r\n     */\r\n    increment(counters: Counters, correlationId: string): void {\r\n        const existing: Counters | undefined = this.countersByCorrelationId.get(correlationId);\r\n        if (!existing) {\r\n            this.logger.trace(\"PerformanceClient: Setting counters\");\r\n            this.countersByCorrelationId.set(correlationId, { ...counters });\r\n            return;\r\n        }\r\n\r\n        this.logger.trace(\"PerformanceClient: Updating counters\");\r\n        for (const counter in counters) {\r\n            if (!existing.hasOwnProperty(counter)) {\r\n                existing[counter] = 0;\r\n            }\r\n            existing[counter] += counters[counter];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Upserts event into event cache.\r\n     * First key is the correlation id, second key is the event id.\r\n     * Allows for events to be grouped by correlation id,\r\n     * and to easily allow for properties on them to be updated.\r\n     *\r\n     * @private\r\n     * @param {PerformanceEvent} event\r\n     */\r\n    private cacheEventByCorrelationId(event: PerformanceEvent) {\r\n        const existingEvents = this.eventsByCorrelationId.get(event.correlationId);\r\n        if (existingEvents) {\r\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} added/updated`, event.correlationId);\r\n            existingEvents.set(event.eventId, event);\r\n        } else {\r\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} started`, event.correlationId);\r\n            this.eventsByCorrelationId.set(event.correlationId, new Map().set(event.eventId, event));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cache measurements by their id.\r\n     *\r\n     * @private\r\n     * @param {PerformanceEvent} event\r\n     * @param {IPerformanceMeasurement} measurement\r\n     */\r\n    private cacheMeasurement(event: PerformanceEvent, measurement: IPerformanceMeasurement) {\r\n        this.measurementsById.set(event.eventId, measurement);\r\n    }\r\n\r\n    /**\r\n     * Gathers and emits performance events for measurements taked for the given top-level API and correlation ID.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {string} correlationId\r\n     */\r\n    flushMeasurements(measureName: PerformanceEvents, correlationId: string): void {\r\n        this.logger.trace(`PerformanceClient: Performance measurements flushed for ${measureName}`, correlationId);\r\n        const eventsForCorrelationId = this.eventsByCorrelationId.get(correlationId);\r\n        const staticFields = this.staticFieldsByCorrelationId.get(correlationId);\r\n        const counters = this.countersByCorrelationId.get(correlationId);\r\n\r\n        if (eventsForCorrelationId) {\r\n            this.discardCache(correlationId);\r\n\r\n            /*\r\n             * Manually end incomplete submeasurements to ensure there arent orphaned/never ending events.\r\n             * Incomplete submeasurements are likely an instrumentation bug that should be fixed.\r\n             * IE only supports Map.forEach.\r\n             */\r\n            const completedEvents: PerformanceEvent[] = [];\r\n            eventsForCorrelationId.forEach(event => {\r\n                if (event.name !== measureName && event.status !== PerformanceEventStatus.Completed) {\r\n                    this.logger.trace(`PerformanceClient: Incomplete submeasurement ${event.name} found for ${measureName}`, correlationId);\r\n\r\n                    const completedEvent = this.endMeasurement(event);\r\n                    if (completedEvent) {\r\n                        completedEvents.push(completedEvent);\r\n                    }\r\n                }\r\n\r\n                completedEvents.push(event);\r\n            });\r\n\r\n            // Sort events by start time (earliest first)\r\n            const sortedCompletedEvents = completedEvents.sort((eventA, eventB) => eventA.startTimeMs - eventB.startTimeMs);\r\n\r\n            // Take completed top level event and add completed submeasurements durations as properties\r\n            const topLevelEvents = sortedCompletedEvents.filter(event => event.name === measureName && event.status === PerformanceEventStatus.Completed);\r\n            if (topLevelEvents.length > 0) {\r\n                /*\r\n                 * Only take the first top-level event if there are multiple events with the same correlation id.\r\n                 * This greatly simplifies logic for submeasurements.\r\n                 */\r\n                if (topLevelEvents.length > 1) {\r\n                    this.logger.verbose(\"PerformanceClient: Multiple distinct top-level performance events found, using the first\", correlationId);\r\n                }\r\n                const topLevelEvent = topLevelEvents[0];\r\n                this.logger.verbose(`PerformanceClient: Measurement found for ${measureName}`, correlationId);\r\n\r\n                // Build event object with top level and sub measurements\r\n                const eventToEmit = sortedCompletedEvents.reduce((previous, current) => {\r\n                    if (current.name !== measureName) {\r\n                        this.logger.trace(`PerformanceClient: Complete submeasurement found for ${current.name}`, correlationId);\r\n                        // TODO: Emit additional properties for each subMeasurement\r\n                        const subMeasurementName = `${current.name}DurationMs`;\r\n                        /*\r\n                         * Some code paths, such as resolving an authority, can occur multiple times.\r\n                         * Only take the first measurement, since the second could be read from the cache,\r\n                         * or due to the same correlation id being used for two distinct requests.\r\n                         */\r\n                        if (!previous[subMeasurementName]) {\r\n                            previous[subMeasurementName] = current.durationMs;\r\n                        } else {\r\n                            this.logger.verbose(`PerformanceClient: Submeasurement for ${measureName} already exists for ${current.name}, ignoring`, correlationId);\r\n                        }\r\n                    }\r\n\r\n                    return previous;\r\n                }, topLevelEvent);\r\n\r\n                const finalEvent: PerformanceEvent = {\r\n                    ...eventToEmit,\r\n                    ...staticFields,\r\n                    ...counters\r\n                };\r\n\r\n                this.emitEvents([finalEvent], eventToEmit.correlationId);\r\n            } else {\r\n                this.logger.verbose(`PerformanceClient: No completed top-level measurements found for ${measureName}`, correlationId);\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"PerformanceClient: No measurements found\", correlationId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes measurements for a given correlation id.\r\n     *\r\n     * @param {string} correlationId\r\n     */\r\n    discardMeasurements(correlationId: string): void {\r\n        this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\r\n        this.eventsByCorrelationId.delete(correlationId);\r\n    }\r\n\r\n    /**\r\n     * Removes cache for a given correlation id.\r\n     *\r\n     * @param {string} correlation identifier\r\n     */\r\n    private discardCache(correlationId: string): void {\r\n        this.discardMeasurements(correlationId);\r\n\r\n        this.logger.trace(\"PerformanceClient: Static fields discarded\", correlationId);\r\n        this.staticFieldsByCorrelationId.delete(correlationId);\r\n\r\n        this.logger.trace(\"PerformanceClient: Counters discarded\", correlationId);\r\n        this.countersByCorrelationId.delete(correlationId);\r\n    }\r\n\r\n    /**\r\n     * Registers a callback function to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */\r\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\r\n        const callbackId = this.generateId();\r\n        this.callbacks.set(callbackId, callback);\r\n        this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${callbackId}`);\r\n\r\n        return callbackId;\r\n    }\r\n\r\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */\r\n    removePerformanceCallback(callbackId: string): boolean {\r\n        const result = this.callbacks.delete(callbackId);\r\n\r\n        if (result) {\r\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} removed.`);\r\n        } else {\r\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} not removed.`);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Emits events to all registered callbacks.\r\n     *\r\n     * @param {PerformanceEvent[]} events\r\n     * @param {?string} [correlationId]\r\n     */\r\n    emitEvents(events: PerformanceEvent[], correlationId: string): void {\r\n        this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\r\n\r\n        this.callbacks.forEach((callback: PerformanceCallbackFunction, callbackId: string) => {\r\n            this.logger.trace(`PerformanceClient: Emitting event to callback ${callbackId}`, correlationId);\r\n            callback.apply(null, [events]);\r\n        });\r\n    }\r\n\r\n}\r\n"],"names":[],"mappings":"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"}