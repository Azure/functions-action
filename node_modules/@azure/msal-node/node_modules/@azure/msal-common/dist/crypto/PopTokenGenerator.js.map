{"version":3,"file":"PopTokenGenerator.js","sources":["../../src/crypto/PopTokenGenerator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\n/**\n * See eSTS docs for more info.\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\n *      - sw: software storage\n *      - uhw: hardware storage\n */\ntype ReqCnf = {\n    kid: string;\n    xms_ksl: KeyLocation;\n};\n\nexport type ReqCnfData = {\n    kid: string;\n    reqCnfString: string;\n    reqCnfHash: string;\n};\n\nenum KeyLocation {\n    SW = \"sw\",\n    UHW = \"uhw\"\n}\n\nexport class PopTokenGenerator {\n\n    private cryptoUtils: ICrypto;\n    private performanceClient?: IPerformanceClient;\n\n    constructor(cryptoUtils: ICrypto, performanceClient?: IPerformanceClient) {\n        this.cryptoUtils = cryptoUtils;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n     * @param request\n     * @returns\n     */\n    async generateCnf(request: SignedHttpRequestParameters): Promise<ReqCnfData> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n        const reqCnf = await this.generateKid(request);\n        const reqCnfString: string = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n\n        return {\n            kid: reqCnf.kid,\n            reqCnfString, \n            reqCnfHash: await this.cryptoUtils.hashString(reqCnfString) \n        };\n    }\n\n    /**\n     * Generates key_id for a SHR token request\n     * @param request\n     * @returns\n     */\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n    }\n\n    /**\n     * Signs the POP access_token with the local generated key-pair\n     * @param accessToken\n     * @param request\n     * @returns\n     */\n    async signPopToken(accessToken: string, keyId: string, request: SignedHttpRequestParameters): Promise<string> {\n        return this.signPayload(accessToken, keyId, request);\n    }\n\n    /**\n     * Utility function to generate the signed JWT for an access_token\n     * @param payload\n     * @param kid\n     * @param request\n     * @param claims\n     * @returns\n     */\n    async signPayload(payload: string, keyId: string, request: SignedHttpRequestParameters, claims?: object): Promise<string> {\n\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce } = request;\n\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return await this.cryptoUtils.signJwt({\n            at: payload,\n            ts: TimeUtils.nowSeconds(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n            client_claims: shrClaims || undefined,\n            ...claims\n        }, keyId, request.correlationId);\n    }\n}\n"],"names":[],"mappings":"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"}