{"version":3,"file":"azure-storage-blob.min.js","sources":["../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/httpHeaders.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/util/base64.browser.ts","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.3/node_modules/uuid/lib/bytesToUuid.js","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.3/node_modules/uuid/lib/rng-browser.js","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.3/node_modules/uuid/v4.js","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/util/constants.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/util/utils.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/serializer.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/webResource.ts","../../../../common/temp/node_modules/.registry.npmjs.org/tslib/1.10.0/node_modules/tslib/tslib.es6.js","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/httpPipelineLogLevel.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/restError.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/xhrHttpClient.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/operationParameter.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/operationSpec.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/util/xml.browser.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/requestPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/deserializationPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/exponentialRetryPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/generateClientRequestIdPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/msRestUserAgentPolicy.browser.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/userAgentPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/url.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/redirectPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/rpRegistrationPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/signingPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/systemErrorRetryPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/queryCollectionFormat.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/proxyPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/policies/throttlingRetryPolicy.ts","../../../../common/temp/node_modules/.registry.npmjs.org/@azure/ms-rest-js/2.0.4/node_modules/@azure/ms-rest-js/lib/serviceClient.ts","../src/Aborter.ts","../src/generated/src/models/mappers.ts","../src/generated/src/models/parameters.ts","../src/generated/src/operations/service.ts","../src/generated/src/operations/container.ts","../src/generated/src/operations/blob.ts","../src/generated/src/operations/pageBlob.ts","../src/generated/src/operations/appendBlob.ts","../src/generated/src/operations/blockBlob.ts","../src/IRange.ts","../src/utils/constants.ts","../src/utils/utils.common.ts","../src/policies/BrowserPolicy.ts","../src/policies/RetryPolicy.ts","../src/BrowserPolicyFactory.ts","../src/generated/src/storageClientContext.ts","../src/policies/KeepAlivePolicy.ts","../src/KeepAlivePolicyFactory.ts","../src/policies/LoggingPolicy.ts","../src/LoggingPolicyFactory.ts","../src/Pipeline.ts","../../../../common/temp/node_modules/.registry.npmjs.org/events/3.0.0/node_modules/events/events.js","../src/RetryPolicyFactory.ts","../src/policies/TelemetryPolicy.ts","../src/TelemetryPolicyFactory.ts","../src/policies/UniqueRequestIDPolicy.ts","../src/UniqueRequestIDPolicyFactory.ts","../src/StorageURL.ts","../src/BlobURL.ts","../src/BlobDownloadResponse.browser.ts","../src/AppendBlobURL.ts","../src/BlockBlobURL.ts","../src/ContainerURL.ts","../src/policies/CredentialPolicy.ts","../src/policies/AnonymousCredentialPolicy.ts","../src/credentials/Credential.ts","../src/credentials/AnonymousCredential.ts","../src/policies/TokenCredentialPolicy.ts","../src/credentials/TokenCredential.ts","../src/utils/Batch.ts","../src/highlevel.browser.ts","../src/PageBlobURL.ts","../src/ServiceURL.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string) {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = { name: headerName, value: headerValue.toString() };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(): RawHttpHeaders {\n    return this.rawHeaders();\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson());\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    return new HttpHeaders(this.rawHeaders());\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * Encodes a string in base64 format.\n * @param value the string to encode\n */\nexport function encodeString(value: string): string {\n  return btoa(value);\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value the Uint8Aray to encode\n */\nexport function encodeByteArray(value: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value the base64 string to decode\n */\nexport function decodeString(value: string): Uint8Array {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nexport const Constants = {\n  /**\n   * The ms-rest version\n   * @const\n   * @type {string}\n   */\n  msRestVersion: \"2.0.4\",\n\n  /**\n   * Specifies HTTP.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP: \"http:\",\n\n  /**\n   * Specifies HTTPS.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS: \"https:\",\n\n  /**\n   * Specifies HTTP Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP_PROXY: \"HTTP_PROXY\",\n\n  /**\n   * Specifies HTTPS Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS_PROXY: \"HTTPS_PROXY\",\n\n  HttpConstants: {\n    /**\n     * Http Verbs\n     *\n     * @const\n     * @enum {string}\n     */\n    HttpVerbs: {\n      PUT: \"PUT\",\n      GET: \"GET\",\n      DELETE: \"DELETE\",\n      POST: \"POST\",\n      MERGE: \"MERGE\",\n      HEAD: \"HEAD\",\n      PATCH: \"PATCH\"\n    },\n\n    StatusCodes: {\n      TooManyRequests: 429\n    }\n  },\n\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     *\n     * @const\n     * @type {string}\n     */\n    AUTHORIZATION: \"authorization\",\n\n    AUTHORIZATION_SCHEME: \"Bearer\",\n\n    /**\n     * The Retry-After response-header field can be used with a 503 (Service\n     * Unavailable) or 349 (Too Many Requests) responses to indicate how long\n     * the service is expected to be unavailable to the requesting client.\n     *\n     * @const\n     * @type {string}\n     */\n    RETRY_AFTER: \"Retry-After\",\n\n    /**\n     * The UserAgent header.\n     *\n     * @const\n     * @type {string}\n     */\n    USER_AGENT: \"User-Agent\"\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport uuidv4 from \"uuid/v4\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResource } from \"../webResource\";\nimport { Constants } from \"./constants\";\n\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode = (typeof process !== \"undefined\") && !!process.version && !!process.versions && !!process.versions.node;\n\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param {object} urlToCheck The url to check\n * @return {boolean} True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck: { protocol: string }): boolean {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n\n/**\n * Encodes an URI.\n *\n * @param {string} uri The URI to be encoded.\n * @return {string} The encoded URI.\n */\nexport function encodeUri(uri: string): string {\n  return encodeURIComponent(uri)\n    .replace(/!/g, \"%21\")\n    .replace(/\"/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\n\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param {HttpOperationResponse} response The Http Response\n *\n * @return {object} The stripped version of Http Response.\n */\nexport function stripResponse(response: HttpOperationResponse): any {\n  const strippedResponse: any = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param {WebResource} request The Http Request object\n *\n * @return {WebResource} The stripped version of Http Request.\n */\nexport function stripRequest(request: WebResource): WebResource {\n  const strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n\n/**\n * Validates the given uuid as a string\n *\n * @param {string} uuid The uuid as a string that needs to be validated\n *\n * @return {boolean} True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid: string): boolean {\n  const validUuidRegex = new RegExp(\"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\", \"ig\");\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Provides an array of values of an object. For example\n * for a given object { \"a\": \"foo\", \"b\": \"bar\" }, the method returns [\"foo\", \"bar\"].\n *\n * @param {object} obj An object whose properties need to be enumerated so that it\"s values can be provided as an array\n *\n * @return {any[]} An array of values of the given object.\n */\nexport function objectValues(obj: { [key: string]: any; }): any[] {\n  const result: any[] = [];\n  if (obj && obj instanceof Object) {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        result.push((<any>obj)[key]);\n      }\n    }\n  } else {\n    throw new Error(`The provided object ${JSON.stringify(obj, undefined, 2)} is not a valid object that can be ` +\n      `enumerated to provide its values as an array.`);\n  }\n  return result;\n}\n\n/**\n * Generated UUID\n *\n * @return {string} RFC4122 v4 UUID.\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param {Array} promiseFactories An array of promise factories(A function that return a promise)\n *\n * @param {any} [kickstart] Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n *\n * @return A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(promiseFactories: Array<any>, kickstart: any) {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * Merges source object into the target object\n * @param {object} source The object that needs to be merged\n *\n * @param {object} target The object to be merged into\n *\n * @returns {object} Returns the merged target object.\n */\nexport function mergeObjects(source: { [key: string]: any; }, target: { [key: string]: any; }) {\n  Object.keys(source).forEach((key) => {\n    target[key] = source[key];\n  });\n  return target;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param {number} t The number of milliseconds to be delayed.\n * @param {T} value The value to be resolved with after a timeout of t milliseconds.\n * @returns {Promise<T>} Resolved promise\n */\nexport function delay<T>(t: number, value?: T): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n\n/**\n * Service callback that is returned for REST requests initiated by the service client.\n */\nexport interface ServiceCallback<TResult> {\n  /**\n   * A method that will be invoked as a callback to a service function.\n   * @param {Error | RestError | null} err The error occurred if any, while executing the request; otherwise null.\n   * @param {TResult} [result] The deserialized response body if an error did not occur.\n   * @param {WebResource} [request] The raw/actual request sent to the server if an error did not occur.\n   * @param {HttpOperationResponse} [response] The raw/actual response from the server if an error did not occur.\n   */\n  (err: Error | RestError | null, result?: TResult, request?: WebResource, response?: HttpOperationResponse): void;\n}\n\n/**\n * Converts a Promise to a callback.\n * @param {Promise<any>} promise The Promise to be converted to a callback\n * @returns {Function} A function that takes the callback (cb: Function): void\n * @deprecated generated code should instead depend on responseToBody\n */\nexport function promiseToCallback(promise: Promise<any>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: Function): void => {\n    promise.then((data: any) => {\n      cb(undefined, data);\n    }, (err: Error) => {\n      cb(err);\n    });\n  };\n}\n\n/**\n * Converts a Promise to a service callback.\n * @param {Promise<HttpOperationResponse>} promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns {Function} A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback<T>(promise: Promise<HttpOperationResponse>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: ServiceCallback<T>): void => {\n    promise.then((data: HttpOperationResponse) => {\n      process.nextTick(cb, undefined, data.parsedBody as T, data.request, data);\n    }, (err: Error) => {\n      process.nextTick(cb, err);\n    });\n  };\n}\n\nexport function prepareXMLRootList(obj: any, elementName: string) {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  return { [elementName]: obj };\n}\n\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param {object} targetCtor The target object on which the properties need to be applied.\n * @param {Array<object>} sourceCtors An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtor: any, sourceCtors: any[]): void {\n  sourceCtors.forEach(sourceCtors => {\n    Object.getOwnPropertyNames(sourceCtors.prototype).forEach(name => {\n      targetCtor.prototype[name] = sourceCtors.prototype[name];\n    });\n  });\n}\n\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param {string} value The value to be validated for ISO 8601 duration format.\n * @return {boolean} `true` if valid, `false` otherwise.\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param {string | undefined} value The value to search and replace in.\n * @param {string} searchValue The value to search for in the value argument.\n * @param {string} replaceValue The value to replace searchValue with in the value argument.\n * @returns {string | undefined} The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(value: string | undefined, searchValue: string, replaceValue: string): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n\n/**\n * Determines whether the given enity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param value Any entity\n * @return boolean - true is it is primitive type, false otherwise.\n */\nexport function isPrimitiveType(value: any): boolean {\n  return (typeof value !== \"object\" && typeof value !== \"function\") || value === null;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\n\nexport class Serializer {\n  constructor(public readonly modelMappers: { [key: string]: any } = {}, public readonly isXML?: boolean) { }\n\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void {\n    const failValidation = (constraintName: keyof MapperConstraints, constraintValue: any) => {\n      throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n    };\n    if (mapper.constraints && (value != undefined)) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems != undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if ((typeof value !== \"string\") || (value.match(pattern) === null)) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (UniqueItems && value.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param {Mapper} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} object A valid Javascript object to be serialized\n   *\n   * @param {string} objectName Name of the serialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid serialized Javascript object\n   */\n  serialize(mapper: Mapper, object: any, objectName?: string): any {\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/ig) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      // Validate Constraints if any\n      this.validateConstraints(mapper, object, objectName);\n      if (mapperType.match(/^any$/ig) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/ig) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/ig) !== null) {\n        const enumMapper: EnumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/ig) !== null) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/ig) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/ig) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/ig) !== null) {\n        payload = serializeSequenceType(this, mapper as SequenceMapper, object, objectName);\n      } else if (mapperType.match(/^Dictionary$/ig) !== null) {\n        payload = serializeDictionaryType(this, mapper as DictionaryMapper, object, objectName);\n      } else if (mapperType.match(/^Composite$/ig) !== null) {\n        payload = serializeCompositeType(this, mapper as CompositeMapper, object, objectName);\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param {object} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} responseBody A valid Javascript entity to be deserialized\n   *\n   * @param {string} objectName Name of the deserialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid deserialized Javascript object\n   */\n  deserialize(mapper: Mapper, responseBody: any, objectName: string): any {\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/ig) !== null) {\n      payload = deserializeCompositeType(this, mapper as CompositeMapper, responseBody, objectName);\n    } else {\n      if (this.isXML) {\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\") and body (\"_\") properties, then just reduce the responseBody value to\n         * the body (\"_\") property.\n         */\n        if (responseBody[\"$\"] != undefined && responseBody[\"_\"] != undefined) {\n          responseBody = responseBody[\"_\"];\n        }\n      }\n\n      if (mapperType.match(/^Number$/ig) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/ig) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/ig) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/ig) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/ig) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/ig) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/ig) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/ig) !== null) {\n        payload = deserializeSequenceType(this, mapper as SequenceMapper, responseBody, objectName);\n      } else if (mapperType.match(/^Dictionary$/ig) !== null) {\n        payload = deserializeDictionaryType(this, mapper as DictionaryMapper, responseBody, objectName);\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\nfunction trimEnd(str: string, ch: string) {\n  let len = str.length;\n  while ((len - 1) >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: any): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/ig) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/ig) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/ig) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n      }\n    } else if (typeName.match(/^Boolean$/ig) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/ig) !== null) {\n      const objectType = typeof value;\n      if (objectType !== \"string\" &&\n        objectType !== \"function\" &&\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        !(typeof Blob === \"function\" && value instanceof Blob)) {\n        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`);\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string) {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = (value instanceof Date) ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = (value instanceof Date) ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = (value instanceof Date) ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n          `for it to be serialized in UnixTime/Epoch format.`);\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/ig) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n      }\n      value = value;\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(serializer: Serializer, mapper: SequenceMapper, object: any, objectName: string) {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    tempArray[i] = serializer.serialize(elementType, object[i], objectName);\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(serializer: Serializer, mapper: DictionaryMapper, object: any, objectName: string) {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    tempDictionary[key] = serializer.serialize(valueType, object[key], objectName + \".\" + key);\n  }\n  return tempDictionary;\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer the serializer containing the entire set of mappers\n * @param mapper the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer: Serializer, mapper: CompositeMapper, objectName: string): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const className = mapper.type.className;\n    if (!className) {\n      throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n\n    const modelMapper = serializer.modelMappers[className];\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${className}\".`);\n    }\n    modelProps = modelMapper.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(`modelProperties cannot be null or undefined in the ` +\n        `mapper \"${JSON.stringify(modelMapper)}\" of type \"${className}\" for object \"${objectName}\".`);\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(serializer: Serializer, mapper: CompositeMapper, object: any, objectName: string) {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if ((childObject == undefined) && (object[key] != undefined)) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        const propertyObjectName = propertyMapper.serializedName !== \"\"\n          ? objectName + \".\" + propertyMapper.serializedName\n          : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == undefined) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName);\n        if (serializedValue !== undefined && propName != undefined) {\n          if (propertyMapper.xmlIsAttribute) {\n            // $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject.$ = parentObject.$ || {};\n            parentObject.$[propName] = serializedValue;\n          } else if (propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: serializedValue };\n          } else {\n            parentObject[propName] = serializedValue;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every(pn => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]');\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction isSpecialXmlProperty(propertyName: string): boolean {\n  return [\"$\", \"_\"].includes(propertyName);\n}\n\nfunction deserializeCompositeType(serializer: Serializer, mapper: CompositeMapper, responseBody: any, objectName: string): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize((propertyMapper as DictionaryMapper).type.value, responseBody[headerKey], propertyObjectName);\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody.$) {\n        instance[key] = serializer.deserialize(propertyMapper, responseBody.$[xmlName!], propertyObjectName);\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        let unwrappedProperty = responseBody[propertyName!];\n        if (propertyMapper.xmlIsWrapped) {\n          unwrappedProperty = responseBody[xmlName!];\n          unwrappedProperty = unwrappedProperty && unwrappedProperty[xmlElementName!];\n\n          const isEmptyWrappedList = unwrappedProperty === undefined;\n          if (isEmptyWrappedList) {\n            unwrappedProperty = [];\n          }\n        }\n        instance[key] = serializer.deserialize(propertyMapper, unwrappedProperty, propertyObjectName);\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && propertyInstance == undefined) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string) => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]');\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key)) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(serializer: Serializer, mapper: DictionaryMapper, responseBody: any, objectName: string): any {\n  /*jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(serializer: Serializer, mapper: SequenceMapper, responseBody: any, objectName: string): any {\n  /*jshint validthis: true */\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`);\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(serializer: Serializer, mapper: CompositeMapper, object: any, polymorphicPropertyName: \"clientName\" | \"serializedName\"): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator = discriminatorValue === typeName\n          ? discriminatorValue\n          : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(serializer: Serializer, mapper: CompositeMapper): PolymorphicDiscriminator | undefined {\n  return mapper.type.polymorphicDiscriminator\n    || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent)\n    || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer: Serializer, typeName?: string) {\n  return (typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n\nexport interface MapperConstraints {\n  InclusiveMaximum?: number;\n  ExclusiveMaximum?: number;\n  InclusiveMinimum?: number;\n  ExclusiveMinimum?: number;\n  MaxLength?: number;\n  MinLength?: number;\n  Pattern?: RegExp;\n  MaxItems?: number;\n  MinItems?: number;\n  UniqueItems?: true;\n  MultipleOf?: number;\n}\n\nexport type MapperType = SimpleMapperType | CompositeMapperType | SequenceMapperType | DictionaryMapperType | EnumMapperType;\n\nexport interface SimpleMapperType {\n  name: \"Base64Url\"\n  | \"Boolean\"\n  | \"ByteArray\"\n  | \"Date\"\n  | \"DateTime\"\n  | \"DateTimeRfc1123\"\n  | \"Object\"\n  | \"Stream\"\n  | \"String\"\n  | \"TimeSpan\"\n  | \"UnixTime\"\n  | \"Uuid\"\n  | \"Number\"\n  | \"any\";\n}\n\nexport interface CompositeMapperType {\n  name: \"Composite\";\n\n  // Only one of the two below properties should be present.\n  // Use className to reference another type definition,\n  // and use modelProperties/additionalProperties when the reference to the other type has been resolved.\n  className?: string;\n\n  modelProperties?: { [propertyName: string]: Mapper };\n  additionalProperties?: Mapper;\n\n  uberParent?: string;\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\nexport interface SequenceMapperType {\n  name: \"Sequence\";\n  element: Mapper;\n}\n\nexport interface DictionaryMapperType {\n  name: \"Dictionary\";\n  value: Mapper;\n}\n\nexport interface EnumMapperType {\n  name: \"Enum\";\n  allowedValues: any[];\n}\n\nexport interface BaseMapper {\n  xmlName?: string;\n  xmlIsAttribute?: boolean;\n  xmlElementName?: string;\n  xmlIsWrapped?: boolean;\n  readOnly?: boolean;\n  isConstant?: boolean;\n  required?: boolean;\n  nullable?: boolean;\n  serializedName?: string;\n  type: MapperType;\n  defaultValue?: any;\n  constraints?: MapperConstraints;\n}\n\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\nexport interface PolymorphicDiscriminator {\n  serializedName: string;\n  clientName: string;\n  [key: string]: string;\n}\n\nexport interface CompositeMapper extends BaseMapper {\n  type: CompositeMapperType;\n}\n\nexport interface SequenceMapper extends BaseMapper {\n  type: SequenceMapperType;\n}\n\nexport interface DictionaryMapper extends BaseMapper {\n  type: DictionaryMapperType;\n  headerCollectionPrefix?: string;\n}\n\nexport interface EnumMapper extends BaseMapper {\n  type: EnumMapperType;\n}\n\nexport interface UrlParameterValue {\n  value: string;\n  skipUrlEncoding: boolean;\n}\n\n// TODO: why is this here?\nexport function serializeObject(toSerialize: any): any {\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  }\n  else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  }\n  else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary: { [key: string]: any } = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(toSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  const result: any = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n\nexport const MapperType = strEnum([\n  \"Base64Url\",\n  \"Boolean\",\n  \"ByteArray\",\n  \"Composite\",\n  \"Date\",\n  \"DateTime\",\n  \"DateTimeRfc1123\",\n  \"Dictionary\",\n  \"Enum\",\n  \"Number\",\n  \"Object\",\n  \"Sequence\",\n  \"String\",\n  \"Stream\",\n  \"TimeSpan\",\n  \"UnixTime\"\n]);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { OperationSpec } from \"./operationSpec\";\nimport { Mapper, Serializer } from \"./serializer\";\nimport { generateUuid } from \"./util/utils\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ProxySettings } from \"./serviceClient\";\n\nexport type HttpMethods = \"GET\" | \"PUT\" | \"POST\" | \"DELETE\" | \"PATCH\" | \"HEAD\" | \"OPTIONS\" | \"TRACE\";\nexport type HttpRequestBody = Blob | string | ArrayBuffer | ArrayBufferView | (() => NodeJS.ReadableStream);\n\n/**\n * Fired in response to upload or download progress.\n */\nexport type TransferProgressEvent = {\n  /**\n   * The number of bytes loaded so far.\n   */\n  loadedBytes: number\n};\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  readonly aborted: boolean;\n  dispatchEvent: (event: Event) => boolean;\n  onabort: ((this: AbortSignalLike, ev: Event) => any) | null;\n  addEventListener: (type: \"abort\", listener: (this: AbortSignalLike, ev: Event) => any, options?: any) => void;\n  removeEventListener: (type: \"abort\", listener: (this: AbortSignalLike, ev: Event) => any, options?: any) => void;\n}\n\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n *\n * @constructor\n */\nexport class WebResource {\n  url: string;\n  method: HttpMethods;\n  body?: any;\n  headers: HttpHeaders;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (operationSpec: OperationSpec, response: HttpOperationResponse) => (undefined | OperationResponse);\n  formData?: any;\n  query?: { [key: string]: any; };\n  operationSpec?: OperationSpec;\n  withCredentials: boolean;\n  timeout: number;\n  proxySettings?: ProxySettings;\n  keepAlive?: boolean;\n\n  abortSignal?: AbortSignalLike;\n\n  /** Callback which fires upon upload progress. */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  constructor(\n    url?: string,\n    method?: HttpMethods,\n    body?: any,\n    query?: { [key: string]: any; },\n    headers?: { [key: string]: any; } | HttpHeaders,\n    streamResponseBody?: boolean,\n    withCredentials?: boolean,\n    abortSignal?: AbortSignalLike,\n    timeout?: number,\n    onUploadProgress?: (progress: TransferProgressEvent) => void,\n    onDownloadProgress?: (progress: TransferProgressEvent) => void,\n    proxySettings?: ProxySettings,\n    keepAlive?: boolean) {\n\n    this.streamResponseBody = streamResponseBody;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = (headers instanceof HttpHeaders ? headers : new HttpHeaders(headers));\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n    this.keepAlive = keepAlive;\n  }\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  }\n\n  /**\n   * Prepares the request.\n   * @param {RequestPrepareOptions} options Options to provide for preparing the request.\n   * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n  prepare(options: RequestPrepareOptions): WebResource {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n\n    if (options.method == undefined || typeof options.method.valueOf() !== \"string\") {\n      throw new Error(\"options.method must be a string.\");\n    }\n\n    if (options.url && options.pathTemplate) {\n      throw new Error(\"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\");\n    }\n\n\n    if ((options.pathTemplate == undefined || typeof options.pathTemplate.valueOf() !== \"string\") && (options.url == undefined || typeof options.url.valueOf() !== \"string\")) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    }\n\n    // set the url if it is provided.\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error(\"options.url must be of type \\\"string\\\".\");\n      }\n      this.url = options.url;\n    }\n\n    // set the method\n    if (options.method) {\n      const validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error(\"The provided method \\\"\" + options.method + \"\\\" is invalid. Supported HTTP methods are: \" + JSON.stringify(validMethods));\n      }\n    }\n    this.method = (options.method.toUpperCase() as HttpMethods);\n\n    // construct the url if path template is provided\n    if (options.pathTemplate) {\n      const { pathTemplate, pathParameters } = options;\n      if (typeof pathTemplate !== \"string\") {\n        throw new Error(\"options.pathTemplate must be of type \\\"string\\\".\");\n      }\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n      const baseUrl = options.baseUrl;\n      let url = baseUrl + (baseUrl.endsWith(\"/\") ? \"\" : \"/\") + (pathTemplate.startsWith(\"/\") ? pathTemplate.slice(1) : pathTemplate);\n      const segments = url.match(/({\\w*\\s*\\w*})/ig);\n      if (segments && segments.length) {\n        if (!pathParameters) {\n          throw new Error(`pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`);\n        }\n        segments.forEach(function (item) {\n          const pathParamName = item.slice(1, -1);\n          const pathParam = (pathParameters as { [key: string]: any })[pathParamName];\n          if (pathParam === null || pathParam === undefined || !(typeof pathParam === \"string\" || typeof pathParam === \"object\")) {\n            throw new Error(`pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` +\n              ` however, it is not present in ${pathParameters} - ${JSON.stringify(pathParameters, undefined, 2)}.` +\n              `The value of the path parameter can either be a \"string\" of the form { ${pathParamName}: \"some sample value\" } or ` +\n              `it can be an \"object\" of the form { \"${pathParamName}\": { value: \"some sample value\", skipUrlEncoding: true } }.`);\n          }\n\n          if (typeof pathParam.valueOf() === \"string\") {\n            url = url.replace(item, encodeURIComponent(pathParam));\n          }\n\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(`options.pathParameters[${pathParamName}] is of type \"object\" but it does not contain a \"value\" property.`);\n            }\n            if (pathParam.skipUrlEncoding) {\n              url = url.replace(item, pathParam.value);\n            } else {\n              url = url.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n      this.url = url;\n    }\n\n    // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n    if (options.queryParameters) {\n      const queryParameters = options.queryParameters;\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(`options.queryParameters must be of type object. It should be a JSON object ` +\n          `of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. ` +\n          `The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.`);\n      }\n      // append question mark if it is not present in the url\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      }\n      // construct queryString\n      const queryParams = [];\n      // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n      this.query = {};\n      for (const queryParamName in queryParameters) {\n        const queryParam: any = queryParameters[queryParamName];\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          }\n          else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(`options.queryParameters[${queryParamName}] is of type \"object\" but it does not contain a \"value\" property.`);\n            }\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      }// end-of-for\n      // append the queryString\n      this.url += queryParams.join(\"&\");\n    }\n\n    // add headers to the request if they are provided\n    if (options.headers) {\n      const headers = options.headers;\n      for (const headerName of Object.keys(options.headers)) {\n        this.headers.set(headerName, headers[headerName]);\n      }\n    }\n    // ensure accept-language is set correctly\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    }\n    // ensure the request-id is set correctly\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", generateUuid());\n    }\n\n    // default\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n\n    // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty\n    this.body = options.body;\n    if (options.body != undefined) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(options.serializationMapper, options.body, \"requestBody\");\n        }\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n\n    return this;\n  }\n\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns {WebResource} The clone of this WebResource HTTP request object.\n   */\n  clone(): WebResource {\n    const result = new WebResource(\n      this.url,\n      this.method,\n      this.body,\n      this.query,\n      this.headers && this.headers.clone(),\n      this.streamResponseBody,\n      this.withCredentials,\n      this.abortSignal,\n      this.timeout,\n      this.onUploadProgress,\n      this.onDownloadProgress);\n\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n\n    return result;\n  }\n}\n\nexport interface RequestPrepareOptions {\n  /**\n   * The HTTP request method. Valid values are \"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\",\n   * or \"PATCH\".\n   */\n  method: HttpMethods;\n  /**\n   * The request url. It may or may not have query parameters in it. Either provide the \"url\" or\n   * provide the \"pathTemplate\" in the options object. Both the options are mutually exclusive.\n   */\n  url?: string;\n  /**\n   * A dictionary of query parameters to be appended to the url, where\n   * the \"key\" is the \"query-parameter-name\" and the \"value\" is the \"query-parameter-value\".\n   * The \"query-parameter-value\" can be of type \"string\" or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"query-parameter-value\".\n   * Example:\n   *    - query-parameter-value in \"object\" format: { \"query-parameter-name\": { value: \"query-parameter-value\", skipUrlEncoding: true } }\n   *    - query-parameter-value in \"string\" format: { \"query-parameter-name\": \"query-parameter-value\"}.\n   * Note: \"If options.url already has some query parameters, then the value provided in options.queryParameters will be appended to the url.\n   */\n  queryParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * The path template of the request url. Either provide the \"url\" or provide the \"pathTemplate\" in\n   * the options object. Both the options are mutually exclusive.\n   * Example: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}\"\n   */\n  pathTemplate?: string;\n  /**\n   * The base url of the request. Default value is: \"https://management.azure.com\". This is\n   * applicable only with pathTemplate. If you are providing options.url then it is expected that\n   * you provide the complete url.\n   */\n  baseUrl?: string;\n  /**\n   * A dictionary of path parameters that need to be replaced with actual values in the pathTemplate.\n   * Here the key is the \"path-parameter-name\" and the value is the \"path-parameter-value\".\n   * The \"path-parameter-value\" can be of type \"string\"  or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"path-parameter-value\".\n   * Example:\n   *    - path-parameter-value in \"object\" format: { \"path-parameter-name\": { value: \"path-parameter-value\", skipUrlEncoding: true } }\n   *    - path-parameter-value in \"string\" format: { \"path-parameter-name\": \"path-parameter-value\" }.\n   */\n  pathParameters?: { [key: string]: any | ParameterValue };\n  formData?: { [key: string]: any };\n  /**\n   * A dictionary of request headers that need to be applied to the request.\n   * Here the key is the \"header-name\" and the value is the \"header-value\". The header-value MUST be of type string.\n   *  - ContentType must be provided with the key name as \"Content-Type\". Default value \"application/json; charset=utf-8\".\n   *  - \"Transfer-Encoding\" is set to \"chunked\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"Content-Type\" is set to \"application/octet-stream\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"accept-language\" by default is set to \"en-US\"\n   *  - \"x-ms-client-request-id\" by default is set to a new Guid. To not generate a guid for the request, please set options.disableClientRequestId to true\n   */\n  headers?: { [key: string]: any };\n  /**\n   * When set to true, instructs the client to not set \"x-ms-client-request-id\" header to a new Guid().\n   */\n  disableClientRequestId?: boolean;\n  /**\n   * The request body. It can be of any type. This value will be serialized if it is not a stream.\n   */\n  body?: any;\n  /**\n   * Provides information on how to serialize the request body.\n   */\n  serializationMapper?: Mapper;\n  /**\n   * A dictionary of mappers that may be used while [de]serialization.\n   */\n  mappers?: { [x: string]: any };\n  /**\n   * Provides information on how to deserialize the response body.\n   */\n  deserializationMapper?: object;\n  /**\n   * Indicates whether this method should JSON.stringify() the request body. Default value: false.\n   */\n  disableJsonStringifyOnBody?: boolean;\n  /**\n   * Indicates whether the request body is a stream (useful for file upload scenarios).\n   */\n  bodyIsStream?: boolean;\n  abortSignal?: AbortSignalLike;\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * The Parameter value provided for path or query parameters in RequestPrepareOptions\n */\nexport interface ParameterValue {\n  value: any;\n  skipUrlEncoding: boolean;\n  [key: string]: any;\n}\n\n/**\n * Describes the base structure of the options object that will be used in every operation.\n */\nexport interface RequestOptionsBase {\n  /**\n   * @property {object} [customHeaders] User defined custom request headers that\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  [key: string]: any;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * The different levels of logs that can be used with the HttpPipelineLogger.\n */\nexport enum HttpPipelineLogLevel {\n  /**\n   * A log level that indicates that no logs will be logged.\n   */\n  OFF,\n\n  /**\n   * An error log.\n   */\n  ERROR,\n\n  /**\n   * A warning log.\n   */\n  WARNING,\n\n  /**\n   * An information log.\n   */\n  INFO\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { WebResource } from \"./webResource\";\n\nexport class RestError extends Error {\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  static readonly REQUEST_ABORTED_ERROR: string = \"REQUEST_ABORTED_ERROR\";\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  code?: string;\n  statusCode?: number;\n  request?: WebResource;\n  response?: HttpOperationResponse;\n  body?: any;\n  constructor(message: string, code?: string, statusCode?: number, request?: WebResource, response?: HttpOperationResponse, body?: any) {\n    super(message);\n    this.code = code;\n    this.statusCode = statusCode;\n    this.request = request;\n    this.response = response;\n    this.body = body;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpClient } from \"./httpClient\";\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { WebResource, TransferProgressEvent } from \"./webResource\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { RestError } from \"./restError\";\n\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nexport class XhrHttpClient implements HttpClient {\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    const xhr = new XMLHttpRequest();\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    const abortSignal = request.abortSignal;\n    if (abortSignal) {\n      const listener = () => {\n        xhr.abort();\n      };\n      abortSignal.addEventListener(\"abort\", listener);\n      xhr.addEventListener(\"readystatechange\", () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener);\n        }\n      });\n    }\n\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n\n    if (request.formData) {\n      const formData = request.formData;\n      const requestForm = new FormData();\n      const appendFormValue = (key: string, value: any) => {\n        if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n          requestForm.append(key, value.value, value.options);\n        } else {\n          requestForm.append(key, value);\n        }\n      };\n      for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n          for (let j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n\n      request.body = requestForm;\n      request.formData = undefined;\n      const contentType = request.headers.get(\"Content-Type\");\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n    for (const header of request.headers.headersArray()) {\n      xhr.setRequestHeader(header.name, header.value);\n    }\n    xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\";\n\n    // tslint:disable-next-line:no-null-keyword\n    xhr.send(request.body === undefined ? null : request.body);\n\n    if (request.streamResponseBody) {\n      return new Promise((resolve, reject) => {\n        xhr.addEventListener(\"readystatechange\", () => {\n          // Resolve as soon as headers are loaded\n          if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n            const blobBody = new Promise<Blob>((resolve, reject) => {\n              xhr.addEventListener(\"load\", () => {\n                resolve(xhr.response);\n              });\n              rejectOnTerminalEvent(request, xhr, reject);\n            });\n            resolve({\n              request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n              blobBody\n            });\n          }\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"load\", () => resolve({\n          request,\n          status: xhr.status,\n          headers: parseHeaders(xhr),\n          bodyAsText: xhr.responseText\n        }));\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  }\n}\n\nfunction addProgressListener(xhr: XMLHttpRequestEventTarget, listener?: (progress: TransferProgressEvent) => void) {\n  if (listener) {\n    xhr.addEventListener(\"progress\", rawEvent => listener({\n      loadedBytes: rawEvent.loaded\n    }));\n  }\n}\n\n// exported locally for testing\nexport function parseHeaders(xhr: XMLHttpRequest) {\n  const responseHeaders = new HttpHeaders();\n  const headerLines = xhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/);\n  for (const line of headerLines) {\n    const index = line.indexOf(\":\");\n    const headerName = line.slice(0, index);\n    const headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n  return responseHeaders;\n}\n\nfunction rejectOnTerminalEvent(request: WebResource, xhr: XMLHttpRequest, reject: (err: any) => void) {\n  xhr.addEventListener(\"error\", () => reject(new RestError(`Failed to send request to ${request.url}`, RestError.REQUEST_SEND_ERROR, undefined, request)));\n  xhr.addEventListener(\"abort\", () => reject(new RestError(\"The request was aborted\", RestError.REQUEST_ABORTED_ERROR, undefined, request)));\n  xhr.addEventListener(\"timeout\", () => reject(new RestError(`timeout of ${xhr.timeout}ms exceeded`, RestError.REQUEST_SEND_ERROR, undefined, request)));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { Mapper } from \"./serializer\";\n\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);\n}\n\nexport function getPathStringFromParameterPath(parameterPath: ParameterPath, mapper: Mapper): string {\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { OperationParameter, OperationQueryParameter, OperationURLParameter } from \"./operationParameter\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { MapperType, Serializer } from \"./serializer\";\nimport { HttpMethods } from \"./webResource\";\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\nexport function isStreamOperation(operationSpec: OperationSpec): boolean {\n  let result = false;\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse: OperationResponse = operationSpec.responses[statusCode];\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperType.Stream) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nconst parser = new DOMParser();\nexport function parseXML(str: string): Promise<any> {\n  try {\n    const dom = parser.parseFromString(str, \"application/xml\");\n    throwIfError(dom);\n\n    const obj = domToObject(dom.childNodes[0]);\n    return Promise.resolve(obj);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nlet errorNS = \"\";\ntry {\n  errorNS = parser.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0].namespaceURI!;\n} catch (ignored) {\n  // Most browsers will return a document containing <parsererror>, but IE will throw.\n}\n\nfunction throwIfError(dom: Document) {\n  if (errorNS) {\n    const parserErrors = dom.getElementsByTagNameNS(errorNS, \"parsererror\");\n    if (parserErrors.length) {\n      throw new Error(parserErrors.item(0)!.innerHTML);\n    }\n  }\n}\n\nfunction isElement(node: Node): node is Element {\n  return !!(node as Element).attributes;\n}\n\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\nfunction asElementWithAttributes(node: Node): Element | undefined {\n  return isElement(node) && node.hasAttributes() ? node : undefined;\n}\n\nfunction domToObject(node: Node): any {\n  let result: any = {};\n\n  const childNodeCount: number = node.childNodes.length;\n\n  const firstChildNode: Node = node.childNodes[0];\n  const onlyChildTextValue: string | undefined = (firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue) || undefined;\n\n  const elementWithAttributes: Element | undefined = asElementWithAttributes(node);\n  if (elementWithAttributes) {\n    result[\"$\"] = {};\n\n    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {\n      const attr = elementWithAttributes.attributes[i];\n      result[\"$\"][attr.nodeName] = attr.nodeValue;\n    }\n\n    if (onlyChildTextValue) {\n      result[\"_\"] = onlyChildTextValue;\n    }\n  } else if (childNodeCount === 0) {\n    result = \"\";\n  } else if (onlyChildTextValue) {\n    result = onlyChildTextValue;\n  }\n\n  if (!onlyChildTextValue) {\n    for (let i = 0; i < childNodeCount; i++) {\n      const child = node.childNodes[i];\n      // Ignore leading/trailing whitespace nodes\n      if (child.nodeType !== Node.TEXT_NODE) {\n        const childObject: any = domToObject(child);\n        if (!result[child.nodeName]) {\n          result[child.nodeName] = childObject;\n        } else if (Array.isArray(result[child.nodeName])) {\n          result[child.nodeName].push(childObject);\n        } else {\n          result[child.nodeName] = [result[child.nodeName], childObject];\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n// tslint:disable-next-line:no-null-keyword\nconst doc = document.implementation.createDocument(null, null, null);\nconst serializer = new XMLSerializer();\n\nexport function stringifyXML(obj: any, opts?: { rootName?: string }) {\n  const rootName = opts && opts.rootName || \"root\";\n  const dom = buildNode(obj, rootName)[0];\n  return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + serializer.serializeToString(dom);\n}\n\nfunction buildAttributes(attrs: { [key: string]: { toString(): string; } }): Attr[] {\n  const result = [];\n  for (const key of Object.keys(attrs)) {\n    const attr = doc.createAttribute(key);\n    attr.value = attrs[key].toString();\n    result.push(attr);\n  }\n  return result;\n}\n\nfunction buildNode(obj: any, elementName: string): Node[] {\n  if (typeof obj === \"string\" || typeof obj === \"number\" || typeof obj === \"boolean\") {\n    const elem = doc.createElement(elementName);\n    elem.textContent = obj.toString();\n    return [elem];\n  }\n  else if (Array.isArray(obj)) {\n    const result = [];\n    for (const arrayElem of obj) {\n      for (const child of buildNode(arrayElem, elementName)) {\n        result.push(child);\n      }\n    }\n    return result;\n  } else if (typeof obj === \"object\") {\n    const elem = doc.createElement(elementName);\n    for (const key of Object.keys(obj)) {\n      if (key === \"$\") {\n        for (const attr of buildAttributes(obj[key])) {\n          elem.attributes.setNamedItem(attr);\n        }\n      } else {\n        for (const child of buildNode(obj[key], key)) {\n          elem.appendChild(child);\n        }\n      }\n    }\n    return [elem];\n  }\n  else {\n    throw new Error(`Illegal value passed to buildObject: ${obj}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { WebResource } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RequestPolicy\n};\n\nexport interface RequestPolicy {\n  sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse>;\n}\n\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  protected constructor(readonly _nextPolicy: RequestPolicy, readonly _options: RequestPolicyOptions) {\n  }\n\n  public abstract sendRequest(webResource: WebResource): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions {\n  constructor(private _logger?: HttpPipelineLogger) {\n  }\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel;\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec, isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { Mapper, MapperType } from \"../serializer\";\nimport * as utils from \"../util/utils\";\nimport { parseXML } from \"../util/xml\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(deserializationContentTypes?: DeserializationContentTypes): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n    }\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n\n  constructor(nextPolicy: RequestPolicy, deserializationContentTypes: DeserializationContentTypes | undefined, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n\n    this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then((response: HttpOperationResponse) => deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response));\n  }\n}\n\nfunction getOperationResponse(parsedResponse: HttpOperationResponse): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResource = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter: undefined | ((operationSpec: OperationSpec, response: HttpOperationResponse) => (undefined | OperationResponse)) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) = parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nexport function deserializeResponseBody(jsonContentTypes: string[], xmlContentTypes: string[], response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  return parse(jsonContentTypes, xmlContentTypes, response).then(parsedResponse => {\n    const shouldDeserialize: boolean = shouldDeserializeResponse(parsedResponse);\n    if (shouldDeserialize) {\n      const operationSpec: OperationSpec | undefined = parsedResponse.request.operationSpec;\n      if (operationSpec && operationSpec.responses) {\n        const statusCode: number = parsedResponse.status;\n\n        const expectedStatusCodes: string[] = Object.keys(operationSpec.responses);\n\n        const hasNoExpectedStatusCodes: boolean = (expectedStatusCodes.length === 0 || (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n\n        const responseSpec: OperationResponse | undefined = getOperationResponse(parsedResponse);\n\n        const isExpectedStatusCode: boolean = hasNoExpectedStatusCodes ? (200 <= statusCode && statusCode < 300) : !!responseSpec;\n        if (!isExpectedStatusCode) {\n          const defaultResponseSpec: OperationResponse = operationSpec.responses.default;\n          if (defaultResponseSpec) {\n            const initialErrorMessage: string = isStreamOperation(operationSpec)\n              ? `Unexpected status code: ${statusCode}`\n              : parsedResponse.bodyAsText as string;\n\n            const error = new RestError(initialErrorMessage);\n            error.statusCode = statusCode;\n            error.request = utils.stripRequest(parsedResponse.request);\n            error.response = utils.stripResponse(parsedResponse);\n\n            let parsedErrorResponse: { [key: string]: any } = parsedResponse.parsedBody;\n            try {\n              if (parsedErrorResponse) {\n                const defaultResponseBodyMapper: Mapper | undefined = defaultResponseSpec.bodyMapper;\n                if (defaultResponseBodyMapper && defaultResponseBodyMapper.serializedName === \"CloudError\") {\n                  if (parsedErrorResponse.error) {\n                    parsedErrorResponse = parsedErrorResponse.error;\n                  }\n                  if (parsedErrorResponse.code) {\n                    error.code = parsedErrorResponse.code;\n                  }\n                  if (parsedErrorResponse.message) {\n                    error.message = parsedErrorResponse.message;\n                  }\n                } else {\n                  let internalError: any = parsedErrorResponse;\n                  if (parsedErrorResponse.error) {\n                    internalError = parsedErrorResponse.error;\n                  }\n\n                  error.code = internalError.code;\n                  if (internalError.message) {\n                    error.message = internalError.message;\n                  }\n                }\n\n                if (defaultResponseBodyMapper) {\n                  let valueToDeserialize: any = parsedErrorResponse;\n                  if (operationSpec.isXML && defaultResponseBodyMapper.type.name === MapperType.Sequence) {\n                    valueToDeserialize = typeof parsedErrorResponse === \"object\"\n                      ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName!]\n                      : [];\n                  }\n                  error.body = operationSpec.serializer.deserialize(defaultResponseBodyMapper, valueToDeserialize, \"error.body\");\n                }\n              }\n            } catch (defaultError) {\n              error.message = `Error \\\"${defaultError.message}\\\" occurred in deserializing the responseBody - \\\"${parsedResponse.bodyAsText}\\\" for the default response.`;\n            }\n            return Promise.reject(error);\n          }\n        } else if (responseSpec) {\n          if (responseSpec.bodyMapper) {\n            let valueToDeserialize: any = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n              valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!] : [];\n            }\n            try {\n              parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\");\n            } catch (error) {\n              const restError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`);\n              restError.request = utils.stripRequest(parsedResponse.request);\n              restError.response = utils.stripResponse(parsedResponse);\n              return Promise.reject(restError);\n            }\n          } else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n          }\n\n          if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), \"operationRes.parsedHeaders\");\n          }\n        }\n      }\n    }\n    return Promise.resolve(parsedResponse);\n  });\n}\n\nfunction parse(jsonContentTypes: string[], xmlContentTypes: string[], operationResponse: HttpOperationResponse): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }) => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse, operationResponse.bodyAsText);\n    return Promise.reject(e);\n  };\n\n  if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType ? [] : contentType.split(\";\").map(component => component.toLowerCase());\n    if (contentComponents.length === 0 || contentComponents.some(component => jsonContentTypes.indexOf(component) !== -1)) {\n      return new Promise<HttpOperationResponse>(resolve => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(component => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text)\n        .then(body => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\nimport { RestError } from \"../restError\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function exponentialRetryPolicy(retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\nconst DEFAULT_CLIENT_RETRY_COUNT = 3;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\nconst DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\nexport class ExponentialRetryPolicy extends BaseRequestPolicy {\n  /**\n   * The client retry count.\n   */\n  retryCount: number;\n  /**\n   * The client retry interval in milliseconds.\n   */\n  retryInterval: number;\n  /**\n   * The minimum retry interval in milliseconds.\n   */\n  minRetryInterval: number;\n  /**\n   * The maximum retry interval in milliseconds.\n   */\n  maxRetryInterval: number;\n\n  /**\n   * @constructor\n   * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.\n   * @param {RequestPolicyOptions} options The options for this RequestPolicy.\n   * @param {number} [retryCount]        The client retry count.\n   * @param {number} [retryInterval]     The client retry interval, in milliseconds.\n   * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.\n   * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number) {\n    super(nextPolicy, options);\n    function isNumber(n: any): n is number { return typeof n === \"number\"; }\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = isNumber(minRetryInterval) ? minRetryInterval : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone())\n      .then(response => retry(this, request, response))\n      .catch(error => retry(this, request, error.response, undefined, error));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: ExponentialRetryPolicy, statusCode: number | undefined, retryData: RetryData): boolean {\n  if (statusCode == undefined || (statusCode < 500 && statusCode !== 408) || statusCode === 501 || statusCode === 505) {\n    return false;\n  }\n\n  let currentCount: number;\n  if (!retryData) {\n    throw new Error(\"retryData for the ExponentialRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = (retryData && retryData.retryCount);\n  }\n\n  return (currentCount < policy.retryCount);\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {RetryData} retryData  The retry data.\n * @param {RetryError} [err] The operation\"s error, if any.\n */\nfunction updateRetryData(policy: ExponentialRetryPolicy, retryData?: RetryData, err?: RetryError): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta = policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n\n  return retryData;\n}\n\nfunction retry(policy: ExponentialRetryPolicy, request: WebResource, response?: HttpOperationResponse, retryData?: RetryData, requestError?: RetryError): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, requestError);\n  const isAborted: boolean | undefined = request.abortSignal && request.abortSignal.aborted;\n  if (!isAborted && shouldRetry(policy, response && response.status, retryData)) {\n    return utils.delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then(res => retry(policy, request, res, retryData, undefined))\n      .catch(err => retry(policy, request, response, retryData, err));\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    const err = retryData.error ||\n      new RestError(\n        \"Failed to send the request.\",\n        RestError.REQUEST_SEND_ERROR,\n        response && response.status,\n        response && response.request,\n        response);\n    return Promise.reject(err);\n  } else {\n    return Promise.resolve(response);\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function generateClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\"): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    }\n  };\n}\n\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, private _requestIdHeaderName: string) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, utils.generateUuid());\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n * and \"plugins\" section in webpack.testconfig.ts.\n */\n\nimport { TelemetryInfo } from \"./userAgentPolicy\";\n\ninterface NavigatorEx extends Navigator {\n  readonly oscpu: string | undefined;\n}\n\nexport function getDefaultUserAgentKey(): string {\n  return \"x-ms-command-name\";\n}\n\nexport function getPlatformSpecificData(): TelemetryInfo[] {\n  const navigator = window.navigator as NavigatorEx;\n  const osInfo = {\n    key: \"OS\",\n    value: (navigator.oscpu || navigator.platform).replace(\" \", \"\")\n  };\n\n  return [osInfo];\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { WebResource } from \"../webResource\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport type TelemetryInfo = { key?: string; value?: string };\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"ms-rest-js\",\n    value: Constants.msRestVersion\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(telemetryInfo: TelemetryInfo[], keySeparator = \" \", valueSeparator = \"/\"): string {\n  return telemetryInfo.map(info => {\n    const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n    return `${info.key}${value}`;\n  }).join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string = (!userAgentData || userAgentData.key == undefined) ? getDefaultUserAgentKey() : userAgentData.key;\n  const value: string = (!userAgentData || userAgentData.value == undefined) ?  getDefaultUserAgentValue() : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(readonly _nextPolicy: RequestPolicy, readonly _options: RequestPolicyOptions, protected headerKey: string, protected headerValue: string) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  addUserAgentHeader(request: WebResource): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { replaceAll } from \"./util/utils\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\" | \"Invalid\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: any): void {\n    if (parameterName) {\n      if (parameterValue != undefined) {\n        const newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n        case \"ParameterName\":\n          switch (currentCharacter) {\n          case \"=\":\n            currentState = \"ParameterValue\";\n            break;\n\n          case \"&\":\n            parameterName = \"\";\n            parameterValue = \"\";\n            break;\n\n          default:\n            parameterName += currentCharacter;\n            break;\n          }\n          break;\n\n        case \"ParameterValue\":\n          switch (currentCharacter) {\n          case \"=\":\n            parameterName = \"\";\n            parameterValue = \"\";\n            currentState = \"Invalid\";\n            break;\n\n          case \"&\":\n            result.set(parameterName, parameterValue);\n            parameterName = \"\";\n            parameterValue = \"\";\n            currentState = \"ParameterName\";\n            break;\n\n          default:\n            parameterValue += currentCharacter;\n            break;\n          }\n          break;\n\n        case \"Invalid\":\n          if (currentCharacter === \"&\") {\n            currentState = \"ParameterName\";\n          }\n          break;\n\n        default:\n          throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port == undefined || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      if (path.indexOf(\"://\") !== -1) {\n        this.set(path, \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: any): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      if (token) {\n        switch (token.type) {\n        case \"SCHEME\":\n          this._scheme = token.text || undefined;\n          break;\n\n        case \"HOST\":\n          this._host = token.text || undefined;\n          break;\n\n        case \"PORT\":\n          this._port = token.text || undefined;\n          break;\n\n        case \"PATH\":\n          const tokenPath: string | undefined = token.text || undefined;\n          if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n            this._path = tokenPath;\n          }\n          break;\n\n        case \"QUERY\":\n          this._query = URLQuery.parse(token.text);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {\n  }\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (48 /* '0' */ <= characterCode && characterCode <= 57 /* '9' */) ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90 /* 'Z' */) ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122 /* 'z' */);\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n      case \"SCHEME\":\n        nextScheme(this);\n        break;\n\n      case \"SCHEME_OR_HOST\":\n        nextSchemeOrHost(this);\n        break;\n\n      case \"HOST\":\n        nextHost(this);\n        break;\n\n      case \"PORT\":\n        nextPort(this);\n        break;\n\n      case \"PATH\":\n        nextPath(this);\n        break;\n\n      case \"QUERY\":\n        nextQuery(this);\n        break;\n\n      default:\n        throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(tokenizer, (character: string) => terminatingCharacters.indexOf(character) === -1);\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then(response => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(policy: RedirectPolicy, response: HttpOperationResponse, currentRetries: number): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (locationHeader &&\n    (status === 300 || status === 307 || (status === 303 && request.method === \"POST\")) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n    }\n\n    return policy._nextPolicy.sendRequest(request)\n      .then(res => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly _retryTimeout = 30) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone())\n      .then(response => registerIfNeeded(this, request, response));\n  }\n}\n\n\nfunction registerIfNeeded(policy: RPRegistrationPolicy, request: WebResource, response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request)\n        // Autoregistration of ${provider} failed for some reason. We will not return this error\n        // instead will return the initial response with 409 status code back to the user.\n        // do nothing here as we are returning the original response at the end of this method.\n        .catch(() => false)\n        .then(registrationStatus => {\n          if (registrationStatus) {\n            // Retry the original request. We have to change the x-ms-client-request-id\n            // otherwise Azure endpoint will return the initial 409 (cached) response.\n            request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n            return policy._nextPolicy.sendRequest(request.clone());\n          }\n          return response;\n        });\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResource} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest: WebResource, reuseUrlToo = false): WebResource {\n  const reqOptions: WebResource = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (responseBody && responseBody.error && responseBody.error.message &&\n      responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//ig);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\nfunction registerRP(policy: RPRegistrationPolicy, urlPrefix: string, provider: string, originalRequest: WebResource): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  return policy._nextPolicy.sendRequest(reqOptions)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n      }\n      return getRegistrationStatus(policy, getUrl, originalRequest);\n    });\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\nfunction getRegistrationStatus(policy: RPRegistrationPolicy, url: string, originalRequest: WebResource): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  return policy._nextPolicy.sendRequest(reqOptions).then(res => {\n    const obj = (res.parsedBody as any);\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils.delay(policy._retryTimeout * 1000).then(() => getRegistrationStatus(policy, url, originalRequest));\n    }\n  });\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicyFactory, RequestPolicy, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function signingPolicy(authenticationProvider: ServiceClientCredentials): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    }\n  };\n}\n\nexport class SigningPolicy extends BaseRequestPolicy {\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, public authenticationProvider: ServiceClientCredentials) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResource): Promise<WebResource> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then(nextRequest => this._nextPolicy.sendRequest(nextRequest));\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function systemErrorRetryPolicy(retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n *\n * @constructor\n * @param {number} retryCount        The client retry count.\n * @param {number} retryInterval     The client retry interval, in milliseconds.\n * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.\n * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n  DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\n  DEFAULT_CLIENT_RETRY_COUNT = 3;\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number) {\n    super(nextPolicy, options);\n    this.retryCount = typeof retryCount === \"number\" ? retryCount : this.DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = typeof retryInterval === \"number\" ? retryInterval : this.DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = typeof minRetryInterval === \"number\" ? minRetryInterval : this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = typeof maxRetryInterval === \"number\" ? maxRetryInterval : this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone()).then(response => retry(this, request, response));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: SystemErrorRetryPolicy, retryData: RetryData): boolean {\n  let currentCount;\n  if (!retryData) {\n    throw new Error(\"retryData for the SystemErrorRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = (retryData && retryData.retryCount);\n  }\n  return (currentCount < policy.retryCount);\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {RetryData} retryData  The retry data.\n * @param {object} err        The operation\"s error, if any.\n */\nfunction updateRetryData(policy: SystemErrorRetryPolicy, retryData?: RetryData, err?: RetryError): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta = policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n\n  return retryData;\n}\n\nfunction retry(policy: SystemErrorRetryPolicy, request: WebResource, operationResponse: HttpOperationResponse, retryData?: RetryData, err?: RetryError): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n  if (err && err.code && shouldRetry(policy, retryData) &&\n    (err.code === \"ETIMEDOUT\" || err.code === \"ESOCKETTIMEDOUT\" || err.code === \"ECONNREFUSED\" ||\n      err.code === \"ECONNRESET\" || err.code === \"ENOENT\")) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    return utils.delay(retryData.retryInterval)\n        .then(() => policy._nextPolicy.sendRequest(request.clone()))\n        .then(res => retry(policy, request, res, retryData, err))\n        .catch(err => retry(policy, request, operationResponse, retryData, err));\n  } else {\n    if (err != undefined) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      err = retryData.error;\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationResponse);\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * The format that will be used to join an array of values together for a query parameter value.\n */\nexport enum QueryCollectionFormat {\n  Csv = \",\",\n  Ssv = \" \",\n  Tsv = \"\\t\",\n  Pipes = \"|\",\n  Multi = \"Multi\",\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { ProxySettings } from \"../serviceClient\";\nimport { WebResource } from \"../webResource\";\nimport { Constants } from \"../util/constants\";\nimport { URLBuilder } from \"../url\";\n\nfunction loadEnvironmentProxyValue(): string | undefined {\n  if (!process) {\n    return undefined;\n  }\n\n  if (process.env[Constants.HTTPS_PROXY]) {\n    return process.env[Constants.HTTPS_PROXY];\n  } else if (process.env[Constants.HTTPS_PROXY.toLowerCase()]) {\n    return process.env[Constants.HTTPS_PROXY.toLowerCase()];\n  } else if (process.env[Constants.HTTP_PROXY]) {\n    return process.env[Constants.HTTP_PROXY];\n  } else if (process.env[Constants.HTTP_PROXY.toLowerCase()]) {\n    return process.env[Constants.HTTP_PROXY.toLowerCase()];\n  }\n\n  return undefined;\n}\n\nexport function getDefaultProxySettings(proxyUrl?: string): ProxySettings | undefined {\n  if (!proxyUrl) {\n    proxyUrl = loadEnvironmentProxyValue();\n    if (!proxyUrl) {\n      return undefined;\n    }\n  }\n\n  const parsedUrl = URLBuilder.parse(proxyUrl);\n  return {\n    host: parsedUrl.getScheme() + \"://\" + parsedUrl.getHost(),\n    port: Number.parseInt(parsedUrl.getPort() || \"80\")\n  };\n}\n\n\nexport function proxyPolicy(proxySettings?: ProxySettings): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ProxyPolicy(nextPolicy, options, proxySettings!);\n    }\n  };\n}\n\nexport class ProxyPolicy extends BaseRequestPolicy {\n  proxySettings: ProxySettings;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, proxySettings: ProxySettings) {\n    super(nextPolicy, options);\n    this.proxySettings = proxySettings;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.proxySettings) {\n      request.proxySettings = this.proxySettings;\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions, RequestPolicyFactory } from \"./requestPolicy\";\nimport { WebResource } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\n\ntype ResponseHandler = (httpRequest: WebResource, response: HttpOperationResponse) => Promise<HttpOperationResponse>;\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\n\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\n\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private _handleResponse: ResponseHandler;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, _handleResponse?: ResponseHandler) {\n    super(nextPolicy, options);\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  public async sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(httpRequest.clone()).then(response => {\n      if (response.status !== StatusCodes.TooManyRequests) {\n        return response;\n      } else {\n        return this._handleResponse(httpRequest, response);\n      }\n    });\n  }\n\n  private async _defaultResponseHandler(httpRequest: WebResource, httpResponse: HttpOperationResponse): Promise<HttpOperationResponse> {\n    const retryAfterHeader: string | undefined = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n\n    if (retryAfterHeader) {\n      const delayInMs: number | undefined = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n      if (delayInMs) {\n        return delay(delayInMs).then((_: any) => this._nextPolicy.sendRequest(httpRequest));\n      }\n    }\n\n    return httpResponse;\n  }\n\n  public static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  public static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ServiceClientCredentials } from \"./credentials/serviceClientCredentials\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpOperationResponse, RestResponse } from \"./httpOperationResponse\";\nimport { HttpPipelineLogger } from \"./httpPipelineLogger\";\nimport { OperationArguments } from \"./operationArguments\";\nimport { getPathStringFromParameter, getPathStringFromParameterPath, OperationParameter, ParameterPath } from \"./operationParameter\";\nimport { isStreamOperation, OperationSpec } from \"./operationSpec\";\nimport { deserializationPolicy, DeserializationContentTypes } from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport { userAgentPolicy, getDefaultUserAgentHeaderName, getDefaultUserAgentValue } from \"./policies/userAgentPolicy\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { CompositeMapper, DictionaryMapper, Mapper, MapperType, Serializer } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport { RequestOptionsBase, RequestPrepareOptions, WebResource } from \"./webResource\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ServiceCallback } from \"./util/utils\";\nimport { proxyPolicy, getDefaultProxySettings } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\n\n\n/**\n * HTTP proxy settings (Node.js only)\n */\nexport interface ProxySettings {\n  host: string;\n  port: number;\n  username?: string;\n  password?: string;\n}\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions {\n  /**\n   * An array of factories which get called to create the RequestPolicy pipeline used to send a HTTP\n   * request on the wire, or a function that takes in the defaultRequestPolicyFactories and returns\n   * the requestPolicyFactories that will be used.\n   */\n  requestPolicyFactories?: RequestPolicyFactory[] | ((defaultRequestPolicyFactories: RequestPolicyFactory[]) => (void | RequestPolicyFactory[]));\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * The HttpPipelineLogger that can be used to debug RequestPolicies within the HTTP pipeline.\n   */\n  httpPipelineLogger?: HttpPipelineLogger;\n  /**\n   * If set to true, turn off the default retry policy.\n   */\n  noRetryPolicy?: boolean;\n  /**\n   * Gets or sets the retry timeout in seconds for AutomaticRPRegistration. Default value is 30.\n   */\n  rpRegistrationRetryTimeout?: number;\n  /**\n   * Whether or not to generate a client request ID header for each HTTP request.\n   */\n  generateClientRequestIdHeader?: boolean;\n  /**\n   * Whether to include credentials in CORS requests in the browser.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials for more information.\n   */\n  withCredentials?: boolean;\n  /**\n   * If specified, a GenerateRequestIdPolicy will be added to the HTTP pipeline that will add a\n   * header to all outgoing requests with this header name and a random UUID as the request ID.\n   */\n  clientRequestIdHeaderName?: string;\n  /**\n   * The content-types that will be associated with JSON or XML serialization.\n   */\n  deserializationContentTypes?: DeserializationContentTypes;\n  /**\n   * The header name to use for the telemetry header while sending the request. If this is not\n   * specified, then \"User-Agent\" will be used when running on Node.js and \"x-ms-command-name\" will\n   * be used when running in a browser.\n   */\n  userAgentHeaderName?: string | ((defaultUserAgentHeaderName: string) => string);\n  /**\n   * The string to be set to the telemetry header while sending the request, or a function that\n   * takes in the default user-agent string and returns the user-agent string that will be used.\n   */\n  userAgent?: string | ((defaultUserAgent: string) => string);\n  /**\n   * Proxy settings which will be used for every HTTP request (Node.js only).\n   */\n  proxySettings?: ProxySettings;\n}\n\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   */\n  protected baseUri?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  protected requestContentType?: string;\n\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n  private readonly _requestPolicyOptions: RequestPolicyOptions;\n\n  private readonly _requestPolicyFactories: RequestPolicyFactory[];\n  private readonly _withCredentials: boolean;\n\n  /**\n   * The ServiceClient constructor\n   * @constructor\n   * @param {ServiceClientCredentials} [credentials] The credentials object used for authentication.\n   * @param {ServiceClientOptions} [options] The service client options that govern the behavior of the client.\n   */\n  constructor(credentials?: ServiceClientCredentials, options?: ServiceClientOptions) {\n    if (!options) {\n      options = {};\n    }\n\n    if (credentials && !credentials.signRequest) {\n      throw new Error(\"credentials argument needs to implement signRequest method\");\n    }\n\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || new DefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n\n    let requestPolicyFactories: RequestPolicyFactory[];\n    if (Array.isArray(options.requestPolicyFactories)) {\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      requestPolicyFactories = createDefaultRequestPolicyFactories(credentials, options);\n      if (options.requestPolicyFactories) {\n        const newRequestPolicyFactories: void | RequestPolicyFactory[] = options.requestPolicyFactories(requestPolicyFactories);\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  sendRequest(options: RequestPrepareOptions | WebResource): Promise<HttpOperationResponse> {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n\n    let httpRequest: WebResource;\n    try {\n      if (options instanceof WebResource) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    let httpPipeline: RequestPolicy = this._httpClient;\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (let i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);\n      }\n    }\n    return httpPipeline.sendRequest(httpRequest);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n   * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n   * @param {ServiceCallback} callback The callback to call when the response is received.\n   */\n  sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>): Promise<RestResponse> {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n\n    const httpRequest = new WebResource();\n\n    let result: Promise<RestResponse>;\n    try {\n      const baseUri: string | undefined = operationSpec.baseUrl || this.baseUri;\n      if (!baseUri) {\n        throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\");\n      }\n\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n\n      const requestUrl: URLBuilder = URLBuilder.parse(baseUri);\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (const urlParameter of operationSpec.urlParameters) {\n          let urlParameterValue: string = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);\n          urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter));\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n          requestUrl.replaceAll(`{${urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)}}`, urlParameterValue);\n        }\n      }\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (const queryParameter of operationSpec.queryParameters) {\n          let queryParameterValue: any = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);\n          if (queryParameterValue != undefined) {\n            queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n            if (queryParameter.collectionFormat != undefined) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  queryParameterValue = \"\";\n                } else {\n                  for (const index in queryParameterValue) {\n                    const item = queryParameterValue[index];\n                    queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                  }\n                }\n              } else {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (const index in queryParameterValue) {\n                  queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                }\n              }\n              else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n            requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n          }\n        }\n      }\n      httpRequest.url = requestUrl.toString();\n\n      const contentType = operationSpec.contentType || this.requestContentType;\n      if (contentType) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n\n      if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n          let headerValue: any = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);\n          if (headerValue != undefined) {\n            headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n            const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper).headerCollectionPrefix;\n            if (headerCollectionPrefix) {\n              for (const key of Object.keys(headerValue)) {\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n            }\n          }\n        }\n      }\n\n      const options: RequestOptionsBase | undefined = operationArguments.options;\n      if (options) {\n        if (options.customHeaders) {\n          for (const customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n      }\n\n      httpRequest.withCredentials = this._withCredentials;\n\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n\n      if (httpRequest.streamResponseBody == undefined) {\n        httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n      }\n\n      result = this.sendRequest(httpRequest)\n        .then(res => flattenResponse(res, operationSpec.responses[res.status]));\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n\n    const cb = callback;\n    if (cb) {\n      result\n        // tslint:disable-next-line:no-null-keyword\n        .then(res => cb(null, res._response.parsedBody, res._response.request, res._response))\n        .catch(err => cb(err));\n    }\n\n    return result;\n  }\n}\n\nexport function serializeRequestBody(serviceClient: ServiceClient, httpRequest: WebResource, operationArguments: OperationArguments, operationSpec: OperationSpec): void {\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const { required, xmlName, xmlElementName, serializedName } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n    try {\n      if (httpRequest.body != undefined || required) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(operationSpec.requestBody);\n        httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString);\n        const isStream = typeName === MapperType.Stream;\n        if (operationSpec.isXML) {\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(utils.prepareXMLRootList(httpRequest.body, xmlElementName || xmlName || serializedName!), { rootName: xmlName || serializedName });\n          }\n          else if (!isStream) {\n            httpRequest.body = stringifyXML(httpRequest.body, { rootName: xmlName || serializedName });\n          }\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue: any = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);\n      if (formDataParameterValue != undefined) {\n        const formDataParameterPropertyName: string = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter));\n      }\n    }\n  }\n}\n\nfunction isRequestPolicyFactory(instance: any): instance is RequestPolicyFactory {\n  return typeof instance.create === \"function\";\n}\n\nfunction getValueOrFunctionResult(value: undefined | string | ((defaultValue: string) => string), defaultValueCreator: (() => string)): string {\n  let result: string;\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n  return result;\n}\n\nfunction createDefaultRequestPolicyFactories(credentials: ServiceClientCredentials | RequestPolicyFactory | undefined, options: ServiceClientOptions): RequestPolicyFactory[] {\n  const factories: RequestPolicyFactory[] = [];\n\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n\n  if (credentials) {\n    if (isRequestPolicyFactory(credentials)) {\n      factories.push(credentials);\n    } else {\n      factories.push(signingPolicy(credentials));\n    }\n  }\n\n  const userAgentHeaderName: string = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);\n  const userAgentHeaderValue: string = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));\n  }\n  factories.push(redirectPolicy());\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n\n  const proxySettings = options.proxySettings || getDefaultProxySettings();\n  if (proxySettings) {\n    factories.push(proxyPolicy(proxySettings));\n  }\n\n  return factories;\n}\n\nexport type PropertyParent = { [propertyName: string]: any };\n\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent: PropertyParent, propertyPath: string[]): PropertyParent {\n  if (parent && propertyPath) {\n    const propertyPathLength: number = propertyPath.length;\n    for (let i = 0; i < propertyPathLength - 1; ++i) {\n      const propertyName: string = propertyPath[i];\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n      parent = parent[propertyName];\n    }\n  }\n  return parent;\n}\n\nfunction getOperationArgumentValueFromParameter(serviceClient: ServiceClient, operationArguments: OperationArguments, parameter: OperationParameter, serializer: Serializer): any {\n  return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);\n}\n\nexport function getOperationArgumentValueFromParameterPath(serviceClient: ServiceClient, operationArguments: OperationArguments, parameterPath: ParameterPath, parameterMapper: Mapper, serializer: Serializer): any {\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult: PropertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue = parameterMapper.required || (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n\n      // Serialize just for validation purposes.\n      const parameterPathString: string = getPathStringFromParameterPath(parameterPath, parameterMapper);\n      serializer.serialize(parameterMapper, value, parameterPathString);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![propertyName];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);\n      // Serialize just for validation purposes.\n      const propertyPathString: string = getPathStringFromParameterPath(propertyPath, propertyMapper);\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(parent: { [parameterName: string]: any }, parameterPath: string[]): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent != undefined && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nexport function flattenResponse(_response: HttpOperationResponse, responseSpec: OperationResponse | undefined): RestResponse {\n  const parsedHeaders = _response.parsedHeaders;\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n\n  const addOperationResponse = (obj: {}) =>\n    Object.defineProperty(obj, \"_response\", {\n      value: _response\n    });\n\n  if (bodyMapper) {\n    const typeName = bodyMapper.type.name;\n    if (typeName === \"Stream\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody\n      });\n    }\n\n    const modelProperties = typeName === \"Composite\" && (bodyMapper as CompositeMapper).type.modelProperties || {};\n    const isPageableResponse = Object.keys(modelProperties).some(k => modelProperties[k].serializedName === \"\");\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      const arrayResponse = [...(_response.parsedBody || [])] as RestResponse & any[];\n\n      for (const key of Object.keys(modelProperties)) {\n        if (modelProperties[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n\n      if (parsedHeaders) {\n        for (const key of Object.keys(parsedHeaders)) {\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        ..._response.parsedBody\n      });\n    }\n  }\n\n  if (bodyMapper || _response.request.method === \"HEAD\" || utils.isPrimitiveType(_response.parsedBody)) {\n    // primitive body types and HEAD booleans\n    return addOperationResponse({\n      ...parsedHeaders,\n      body: _response.parsedBody\n    });\n  }\n\n  return addOperationResponse({\n    ...parsedHeaders,\n    ..._response.parsedBody\n  });\n}\n","import { AbortSignalLike, isNode } from \"@azure/ms-rest-js\";\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call Aborter.none to create a new Aborter instance without timeout.\n * - Call Aborter.timeout() to create a new Aborter instance with timeout.\n *\n * For an existing instance aborter:\n * - Call aborter.withTimeout() to create and return a child Aborter instance with timeout.\n * - Call aborter.withValue(key, value) to create and return a child Aborter instance with key/value pair.\n * - Call aborter.abort() to abort current instance and all children instances.\n * - Call aborter.getValue(key) to search and get value with corresponding key from current aborter to all parents.\n *\n * @example\n * // Abort without timeout\n * await blockBlobURL.upload(Aborter.none, buf, buf.length);\n *\n * @example\n * // Abort container create in 1000ms\n * await blockBlobURL.upload(Aborter.timeout(1000), buf, buf.length);\n *\n * @example\n * // Share aborter cross multiple operations in 30s\n * // Upload the same data to 2 different data centers at the same time, abort another when any of them is finished\n * const aborter = Aborter.timeout(30 * 1000);\n * blockBlobURL1.upload(aborter, buf, buf.length).then(aborter.abort);\n * blockBlobURL2.upload(aborter, buf, buf.length).then(aborter.abort);\n *\n * @example\n * // Cascaded aborting\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await blockBlobURL.upload(aborter.withTimeout(25 * 1000), buf, buf.length);\n * await blockBlobURL.upload(aborter.withTimeout(25 * 1000), buf, buf.length);\n *\n * @export\n * @class Aborter\n * @implements {AbortSignalLike}\n */\n\nexport class Aborter implements AbortSignalLike {\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof Aborter\n   */\n  public get aborted(): boolean {\n    return this._aborted;\n  }\n\n  /**\n   * Creates a new Aborter instance without timeout.\n   *\n   * @readonly\n   * @static\n   * @type {Aborter}\n   * @memberof Aborter\n   */\n  public static get none(): Aborter {\n    return new Aborter(undefined, 0);\n  }\n\n  /**\n   * Creates a new Aborter instance with timeout in milliseconds.\n   * Set parameter timeout to 0 will not create a timer.\n   *\n   * @static\n   * @param {number} {timeout} in milliseconds\n   * @returns {Aborter}\n   * @memberof Aborter\n   */\n  public static timeout(timeout: number): Aborter {\n    return new Aborter(undefined, timeout);\n  }\n\n  /**\n   * onabort event listener.\n   *\n   * @memberof Aborter\n   */\n  public onabort: ((this: AbortSignalLike, ev: any) => any) | null = null;\n\n  // tslint:disable-next-line:variable-name\n  private _aborted: boolean = false;\n  private timer?: any;\n  private readonly parent?: Aborter;\n  private readonly children: Aborter[] = []; // When child object calls dispose(), remove child from here\n  private readonly abortEventListeners: ((this: AbortSignalLike, ev?: any) => any)[] = [];\n  // Pipeline proxies need to use \"abortSignal as Aborter\" in order to access non AbortSignalLike methods\n  // immutable primitive types\n  private readonly key?: string;\n  private readonly value?: string | number | boolean | null;\n  // private disposed: boolean = false;\n\n  /**\n   * Private constructor for internal usage, creates an instance of Aborter.\n   *\n   * @param {Aborter} [parent] Optional. Parent aborter.\n   * @param {number} [timeout=0] Optional. Timeout before abort in millisecond, 0 means no timeout.\n   * @param {string} [key] Optional. Immutable key in string.\n   * @param {(string | number | boolean | null)} [value] Optional. Immutable value.\n   * @memberof Aborter\n   */\n  private constructor(\n    parent?: Aborter,\n    timeout: number = 0,\n    key?: string,\n    value?: string | number | boolean | null\n  ) {\n    this.parent = parent;\n    this.key = key;\n    this.value = value;\n\n    if (timeout > 0) {\n      this.timer = setTimeout(() => {\n        this.abort.call(this);\n      }, timeout);\n\n      // When called, the active Timeout object will not require the Node.js event loop\n      // to remain active. If there is no other activity keeping the event loop running,\n      // the process may exit before the Timeout object's callback is invoked.\n      if (this.timer && isNode) {\n        this.timer!.unref();\n      }\n    }\n  }\n\n  /**\n   * Create and return a new Aborter instance, which will be appended as a child node of current Aborter.\n   * Current Aborter instance becomes father node of the new instance. When current or father Aborter node\n   * triggers timeout event, all children nodes abort event will be triggered too.\n   *\n   * When timeout parameter (in millisecond) is larger than 0, the abort event will be triggered when timeout.\n   * Otherwise, call abort() method to manually abort.\n   *\n   * @param {number} {timeout} Timeout in millisecond.\n   * @returns {Aborter} The new Aborter instance created.\n   * @memberof Aborter\n   */\n  public withTimeout(timeout: number): Aborter {\n    const childCancelContext = new Aborter(this, timeout);\n    this.children.push(childCancelContext);\n    return childCancelContext;\n  }\n\n  /**\n   * Create and return a new Aborter instance, which will be appended as a child node of current Aborter.\n   * Current Aborter instance becomes father node of the new instance. When current or father Aborter node\n   * triggers timeout event, all children nodes abort event will be triggered too.\n   *\n   * Immutable key value pair will be set into the new created Aborter instance.\n   * Call getValue() to find out latest value with corresponding key in the chain of\n   * [current node] -> [parent node] and [grand parent node]....\n   *\n   * @param {string} key\n   * @param {(string | number | boolean | null)} [value]\n   * @returns {Aborter}\n   * @memberof Aborter\n   */\n  public withValue(key: string, value?: string | number | boolean | null): Aborter {\n    const childCancelContext = new Aborter(this, 0, key, value);\n    this.children.push(childCancelContext);\n    return childCancelContext;\n  }\n\n  /**\n   * Find out latest value with corresponding key in the chain of\n   * [current node] -> [parent node] -> [grand parent node] -> ... -> [root node].\n   *\n   * If key is not found, undefined will be returned.\n   *\n   * @param {string} key\n   * @returns {(string | number | boolean | null | undefined)}\n   * @memberof Aborter\n   */\n  public getValue(key: string): string | number | boolean | null | undefined {\n    for (let parent: Aborter | undefined = this; parent; parent = parent.parent) {\n      if (parent.key === key) {\n        return parent.value;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Trigger abort event immediately, the onabort and all abort event listeners will be triggered.\n   * Will try to trigger abort event for all children Aborter nodes.\n   *\n   * - If there is a timeout, the timer will be cancelled.\n   * - If aborted is true, nothing will happen.\n   *\n   * @returns\n   * @memberof Aborter\n   */\n  public abort() {\n    if (this.aborted) {\n      return;\n    }\n    this.cancelTimer();\n\n    if (this.onabort) {\n      this.onabort.call(this, { type: \"abort\" } as any);\n    }\n\n    this.abortEventListeners.forEach((listener) => {\n      listener.call(this, { type: \"abort\" } as any);\n    });\n\n    this.children.forEach((child) => child.cancelByParent());\n\n    this._aborted = true;\n  }\n\n  // public dispose() {\n  //   if (this.disposed || this.aborted) {\n  //     return;\n  //   }\n\n  //   this.cancelTimer();\n\n  //   // (parent)A <- B <- C(child), if B disposes, when A abort, C will not abort\n  //   if (this.parent) {\n  //     const index = this.parent.children.indexOf(this);\n  //     if (index > -1) {\n  //       this.parent.children.splice(index, 1);\n  //     }\n  //   }\n\n  //   this.disposed = true;\n  // }\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param {\"abort\"} _type Only support \"abort\" event\n   * @param {(this: AbortSignalLike, ev: any) => any} listener\n   * @memberof Aborter\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    this.abortEventListeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param {\"abort\"} _type Only support \"abort\" event\n   * @param {(this: AbortSignalLike, ev: any) => any} listener\n   * @memberof Aborter\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    const index = this.abortEventListeners.indexOf(listener);\n    if (index > -1) {\n      this.abortEventListeners.splice(index, 1);\n    }\n  }\n\n  public dispatchEvent(): boolean {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  private cancelByParent() {\n    // if (!this.disposed) {\n    this.abort();\n    // }\n  }\n\n  private cancelTimer() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n\nexport const KeyInfo: msRest.CompositeMapper = {\n  serializedName: \"KeyInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyInfo\",\n    modelProperties: {\n      start: {\n        xmlName: \"Start\",\n        required: true,\n        serializedName: \"Start\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiry: {\n        xmlName: \"Expiry\",\n        required: true,\n        serializedName: \"Expiry\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UserDelegationKey: msRest.CompositeMapper = {\n  serializedName: \"UserDelegationKey\",\n  type: {\n    name: \"Composite\",\n    className: \"UserDelegationKey\",\n    modelProperties: {\n      signedOid: {\n        xmlName: \"SignedOid\",\n        required: true,\n        serializedName: \"SignedOid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedTid: {\n        xmlName: \"SignedTid\",\n        required: true,\n        serializedName: \"SignedTid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedStart: {\n        xmlName: \"SignedStart\",\n        required: true,\n        serializedName: \"SignedStart\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedExpiry: {\n        xmlName: \"SignedExpiry\",\n        required: true,\n        serializedName: \"SignedExpiry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedService: {\n        xmlName: \"SignedService\",\n        required: true,\n        serializedName: \"SignedService\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedVersion: {\n        xmlName: \"SignedVersion\",\n        required: true,\n        serializedName: \"SignedVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        xmlName: \"Value\",\n        required: true,\n        serializedName: \"Value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageError: msRest.CompositeMapper = {\n  serializedName: \"StorageError\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageError\",\n    modelProperties: {\n      code: {\n        xmlName: \"Code\",\n        serializedName: \"Code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        xmlName: \"Message\",\n        serializedName: \"Message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AccessPolicy: msRest.CompositeMapper = {\n  serializedName: \"AccessPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"AccessPolicy\",\n    modelProperties: {\n      start: {\n        xmlName: \"Start\",\n        required: true,\n        serializedName: \"Start\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiry: {\n        xmlName: \"Expiry\",\n        required: true,\n        serializedName: \"Expiry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      permission: {\n        xmlName: \"Permission\",\n        required: true,\n        serializedName: \"Permission\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobProperties: msRest.CompositeMapper = {\n  xmlName: \"Properties\",\n  serializedName: \"BlobProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobProperties\",\n    modelProperties: {\n      creationTime: {\n        xmlName: \"Creation-Time\",\n        serializedName: \"Creation-Time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      lastModified: {\n        xmlName: \"Last-Modified\",\n        required: true,\n        serializedName: \"Last-Modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        xmlName: \"Etag\",\n        required: true,\n        serializedName: \"Etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        xmlName: \"Content-Length\",\n        serializedName: \"Content-Length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        xmlName: \"Content-Type\",\n        serializedName: \"Content-Type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentEncoding: {\n        xmlName: \"Content-Encoding\",\n        serializedName: \"Content-Encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        xmlName: \"Content-Language\",\n        serializedName: \"Content-Language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        xmlName: \"Content-MD5\",\n        serializedName: \"Content-MD5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentDisposition: {\n        xmlName: \"Content-Disposition\",\n        serializedName: \"Content-Disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        xmlName: \"Cache-Control\",\n        serializedName: \"Cache-Control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        xmlName: \"x-ms-blob-sequence-number\",\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      blobType: {\n        xmlName: \"BlobType\",\n        serializedName: \"BlobType\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"BlockBlob\",\n            \"PageBlob\",\n            \"AppendBlob\"\n          ]\n        }\n      },\n      leaseStatus: {\n        xmlName: \"LeaseStatus\",\n        serializedName: \"LeaseStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      leaseState: {\n        xmlName: \"LeaseState\",\n        serializedName: \"LeaseState\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseDuration: {\n        xmlName: \"LeaseDuration\",\n        serializedName: \"LeaseDuration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      copyId: {\n        xmlName: \"CopyId\",\n        serializedName: \"CopyId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        xmlName: \"CopyStatus\",\n        serializedName: \"CopyStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      copySource: {\n        xmlName: \"CopySource\",\n        serializedName: \"CopySource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        xmlName: \"CopyProgress\",\n        serializedName: \"CopyProgress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyCompletionTime: {\n        xmlName: \"CopyCompletionTime\",\n        serializedName: \"CopyCompletionTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        xmlName: \"CopyStatusDescription\",\n        serializedName: \"CopyStatusDescription\",\n        type: {\n          name: \"String\"\n        }\n      },\n      serverEncrypted: {\n        xmlName: \"ServerEncrypted\",\n        serializedName: \"ServerEncrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      incrementalCopy: {\n        xmlName: \"IncrementalCopy\",\n        serializedName: \"IncrementalCopy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      destinationSnapshot: {\n        xmlName: \"DestinationSnapshot\",\n        serializedName: \"DestinationSnapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deletedTime: {\n        xmlName: \"DeletedTime\",\n        serializedName: \"DeletedTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      remainingRetentionDays: {\n        xmlName: \"RemainingRetentionDays\",\n        serializedName: \"RemainingRetentionDays\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      accessTier: {\n        xmlName: \"AccessTier\",\n        serializedName: \"AccessTier\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierInferred: {\n        xmlName: \"AccessTierInferred\",\n        serializedName: \"AccessTierInferred\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      archiveStatus: {\n        xmlName: \"ArchiveStatus\",\n        serializedName: \"ArchiveStatus\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierChangeTime: {\n        xmlName: \"AccessTierChangeTime\",\n        serializedName: \"AccessTierChangeTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobItem: msRest.CompositeMapper = {\n  xmlName: \"Blob\",\n  serializedName: \"BlobItem\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobItem\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleted: {\n        xmlName: \"Deleted\",\n        required: true,\n        serializedName: \"Deleted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      snapshot: {\n        xmlName: \"Snapshot\",\n        required: true,\n        serializedName: \"Snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        xmlName: \"Properties\",\n        required: true,\n        serializedName: \"Properties\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobProperties\"\n        }\n      },\n      metadata: {\n        xmlName: \"Metadata\",\n        serializedName: \"Metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BlobFlatListSegment: msRest.CompositeMapper = {\n  xmlName: \"Blobs\",\n  serializedName: \"BlobFlatListSegment\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobFlatListSegment\",\n    modelProperties: {\n      blobItems: {\n        xmlName: \"BlobItems\",\n        xmlElementName: \"Blob\",\n        required: true,\n        serializedName: \"BlobItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListBlobsFlatSegmentResponse: msRest.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListBlobsFlatSegmentResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListBlobsFlatSegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        xmlIsAttribute: true,\n        xmlName: \"ServiceEndpoint\",\n        required: true,\n        serializedName: \"ServiceEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      containerName: {\n        xmlIsAttribute: true,\n        xmlName: \"ContainerName\",\n        required: true,\n        serializedName: \"ContainerName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        xmlName: \"Prefix\",\n        serializedName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        xmlName: \"Marker\",\n        serializedName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxResults: {\n        xmlName: \"MaxResults\",\n        serializedName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      delimiter: {\n        xmlName: \"Delimiter\",\n        serializedName: \"Delimiter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      segment: {\n        xmlName: \"Blobs\",\n        required: true,\n        serializedName: \"Segment\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobFlatListSegment\"\n        }\n      },\n      nextMarker: {\n        xmlName: \"NextMarker\",\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobPrefix: msRest.CompositeMapper = {\n  serializedName: \"BlobPrefix\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobPrefix\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobHierarchyListSegment: msRest.CompositeMapper = {\n  xmlName: \"Blobs\",\n  serializedName: \"BlobHierarchyListSegment\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobHierarchyListSegment\",\n    modelProperties: {\n      blobPrefixes: {\n        xmlName: \"BlobPrefixes\",\n        xmlElementName: \"BlobPrefix\",\n        serializedName: \"BlobPrefixes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobPrefix\"\n            }\n          }\n        }\n      },\n      blobItems: {\n        xmlName: \"BlobItems\",\n        xmlElementName: \"Blob\",\n        required: true,\n        serializedName: \"BlobItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListBlobsHierarchySegmentResponse: msRest.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListBlobsHierarchySegmentResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListBlobsHierarchySegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        xmlIsAttribute: true,\n        xmlName: \"ServiceEndpoint\",\n        required: true,\n        serializedName: \"ServiceEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      containerName: {\n        xmlIsAttribute: true,\n        xmlName: \"ContainerName\",\n        required: true,\n        serializedName: \"ContainerName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        xmlName: \"Prefix\",\n        serializedName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        xmlName: \"Marker\",\n        serializedName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxResults: {\n        xmlName: \"MaxResults\",\n        serializedName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      delimiter: {\n        xmlName: \"Delimiter\",\n        serializedName: \"Delimiter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      segment: {\n        xmlName: \"Blobs\",\n        required: true,\n        serializedName: \"Segment\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobHierarchyListSegment\"\n        }\n      },\n      nextMarker: {\n        xmlName: \"NextMarker\",\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Block: msRest.CompositeMapper = {\n  serializedName: \"Block\",\n  type: {\n    name: \"Composite\",\n    className: \"Block\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      size: {\n        xmlName: \"Size\",\n        required: true,\n        serializedName: \"Size\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockList: msRest.CompositeMapper = {\n  serializedName: \"BlockList\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockList\",\n    modelProperties: {\n      committedBlocks: {\n        xmlIsWrapped: true,\n        xmlName: \"CommittedBlocks\",\n        xmlElementName: \"Block\",\n        serializedName: \"CommittedBlocks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Block\"\n            }\n          }\n        }\n      },\n      uncommittedBlocks: {\n        xmlIsWrapped: true,\n        xmlName: \"UncommittedBlocks\",\n        xmlElementName: \"Block\",\n        serializedName: \"UncommittedBlocks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Block\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BlockLookupList: msRest.CompositeMapper = {\n  xmlName: \"BlockList\",\n  serializedName: \"BlockLookupList\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockLookupList\",\n    modelProperties: {\n      committed: {\n        xmlName: \"Committed\",\n        xmlElementName: \"Committed\",\n        serializedName: \"Committed\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      uncommitted: {\n        xmlName: \"Uncommitted\",\n        xmlElementName: \"Uncommitted\",\n        serializedName: \"Uncommitted\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      latest: {\n        xmlName: \"Latest\",\n        xmlElementName: \"Latest\",\n        serializedName: \"Latest\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerProperties: msRest.CompositeMapper = {\n  serializedName: \"ContainerProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerProperties\",\n    modelProperties: {\n      lastModified: {\n        xmlName: \"Last-Modified\",\n        required: true,\n        serializedName: \"Last-Modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        xmlName: \"Etag\",\n        required: true,\n        serializedName: \"Etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseStatus: {\n        xmlName: \"LeaseStatus\",\n        serializedName: \"LeaseStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      leaseState: {\n        xmlName: \"LeaseState\",\n        serializedName: \"LeaseState\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseDuration: {\n        xmlName: \"LeaseDuration\",\n        serializedName: \"LeaseDuration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      publicAccess: {\n        xmlName: \"PublicAccess\",\n        serializedName: \"PublicAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      hasImmutabilityPolicy: {\n        xmlName: \"HasImmutabilityPolicy\",\n        serializedName: \"HasImmutabilityPolicy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      hasLegalHold: {\n        xmlName: \"HasLegalHold\",\n        serializedName: \"HasLegalHold\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerItem: msRest.CompositeMapper = {\n  xmlName: \"Container\",\n  serializedName: \"ContainerItem\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerItem\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        xmlName: \"Properties\",\n        required: true,\n        serializedName: \"Properties\",\n        type: {\n          name: \"Composite\",\n          className: \"ContainerProperties\"\n        }\n      },\n      metadata: {\n        xmlName: \"Metadata\",\n        serializedName: \"Metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListContainersSegmentResponse: msRest.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListContainersSegmentResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListContainersSegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        xmlIsAttribute: true,\n        xmlName: \"ServiceEndpoint\",\n        required: true,\n        serializedName: \"ServiceEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        xmlName: \"Prefix\",\n        serializedName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        xmlName: \"Marker\",\n        serializedName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxResults: {\n        xmlName: \"MaxResults\",\n        serializedName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      containerItems: {\n        xmlIsWrapped: true,\n        xmlName: \"Containers\",\n        xmlElementName: \"Container\",\n        required: true,\n        serializedName: \"ContainerItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ContainerItem\"\n            }\n          }\n        }\n      },\n      nextMarker: {\n        xmlName: \"NextMarker\",\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CorsRule: msRest.CompositeMapper = {\n  serializedName: \"CorsRule\",\n  type: {\n    name: \"Composite\",\n    className: \"CorsRule\",\n    modelProperties: {\n      allowedOrigins: {\n        xmlName: \"AllowedOrigins\",\n        required: true,\n        serializedName: \"AllowedOrigins\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedMethods: {\n        xmlName: \"AllowedMethods\",\n        required: true,\n        serializedName: \"AllowedMethods\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedHeaders: {\n        xmlName: \"AllowedHeaders\",\n        required: true,\n        serializedName: \"AllowedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exposedHeaders: {\n        xmlName: \"ExposedHeaders\",\n        required: true,\n        serializedName: \"ExposedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxAgeInSeconds: {\n        xmlName: \"MaxAgeInSeconds\",\n        required: true,\n        serializedName: \"MaxAgeInSeconds\",\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeoReplication: msRest.CompositeMapper = {\n  serializedName: \"GeoReplication\",\n  type: {\n    name: \"Composite\",\n    className: \"GeoReplication\",\n    modelProperties: {\n      status: {\n        xmlName: \"Status\",\n        required: true,\n        serializedName: \"Status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastSyncTime: {\n        xmlName: \"LastSyncTime\",\n        required: true,\n        serializedName: \"LastSyncTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const RetentionPolicy: msRest.CompositeMapper = {\n  serializedName: \"RetentionPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"RetentionPolicy\",\n    modelProperties: {\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      days: {\n        xmlName: \"Days\",\n        serializedName: \"Days\",\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Logging: msRest.CompositeMapper = {\n  serializedName: \"Logging\",\n  type: {\n    name: \"Composite\",\n    className: \"Logging\",\n    modelProperties: {\n      version: {\n        xmlName: \"Version\",\n        required: true,\n        serializedName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleteProperty: {\n        xmlName: \"Delete\",\n        required: true,\n        serializedName: \"Delete\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      read: {\n        xmlName: \"Read\",\n        required: true,\n        serializedName: \"Read\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      write: {\n        xmlName: \"Write\",\n        required: true,\n        serializedName: \"Write\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        xmlName: \"RetentionPolicy\",\n        required: true,\n        serializedName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const Metrics: msRest.CompositeMapper = {\n  serializedName: \"Metrics\",\n  type: {\n    name: \"Composite\",\n    className: \"Metrics\",\n    modelProperties: {\n      version: {\n        xmlName: \"Version\",\n        serializedName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      includeAPIs: {\n        xmlName: \"IncludeAPIs\",\n        serializedName: \"IncludeAPIs\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        xmlName: \"RetentionPolicy\",\n        serializedName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageRange: msRest.CompositeMapper = {\n  serializedName: \"PageRange\",\n  type: {\n    name: \"Composite\",\n    className: \"PageRange\",\n    modelProperties: {\n      start: {\n        xmlName: \"Start\",\n        required: true,\n        serializedName: \"Start\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      end: {\n        xmlName: \"End\",\n        required: true,\n        serializedName: \"End\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClearRange: msRest.CompositeMapper = {\n  serializedName: \"ClearRange\",\n  type: {\n    name: \"Composite\",\n    className: \"ClearRange\",\n    modelProperties: {\n      start: {\n        xmlName: \"Start\",\n        required: true,\n        serializedName: \"Start\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      end: {\n        xmlName: \"End\",\n        required: true,\n        serializedName: \"End\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageList: msRest.CompositeMapper = {\n  serializedName: \"PageList\",\n  type: {\n    name: \"Composite\",\n    className: \"PageList\",\n    modelProperties: {\n      pageRange: {\n        xmlName: \"PageRange\",\n        xmlElementName: \"PageRange\",\n        serializedName: \"PageRange\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PageRange\"\n            }\n          }\n        }\n      },\n      clearRange: {\n        xmlName: \"ClearRange\",\n        xmlElementName: \"ClearRange\",\n        serializedName: \"ClearRange\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ClearRange\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SignedIdentifier: msRest.CompositeMapper = {\n  serializedName: \"SignedIdentifier\",\n  type: {\n    name: \"Composite\",\n    className: \"SignedIdentifier\",\n    modelProperties: {\n      id: {\n        xmlName: \"Id\",\n        required: true,\n        serializedName: \"Id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessPolicy: {\n        xmlName: \"AccessPolicy\",\n        required: true,\n        serializedName: \"AccessPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"AccessPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const StaticWebsite: msRest.CompositeMapper = {\n  serializedName: \"StaticWebsite\",\n  type: {\n    name: \"Composite\",\n    className: \"StaticWebsite\",\n    modelProperties: {\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      indexDocument: {\n        xmlName: \"IndexDocument\",\n        serializedName: \"IndexDocument\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorDocument404Path: {\n        xmlName: \"ErrorDocument404Path\",\n        serializedName: \"ErrorDocument404Path\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageServiceProperties: msRest.CompositeMapper = {\n  serializedName: \"StorageServiceProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageServiceProperties\",\n    modelProperties: {\n      logging: {\n        xmlName: \"Logging\",\n        serializedName: \"Logging\",\n        type: {\n          name: \"Composite\",\n          className: \"Logging\"\n        }\n      },\n      hourMetrics: {\n        xmlName: \"HourMetrics\",\n        serializedName: \"HourMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      minuteMetrics: {\n        xmlName: \"MinuteMetrics\",\n        serializedName: \"MinuteMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      cors: {\n        xmlIsWrapped: true,\n        xmlName: \"Cors\",\n        xmlElementName: \"CorsRule\",\n        serializedName: \"Cors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CorsRule\"\n            }\n          }\n        }\n      },\n      defaultServiceVersion: {\n        xmlName: \"DefaultServiceVersion\",\n        serializedName: \"DefaultServiceVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleteRetentionPolicy: {\n        xmlName: \"DeleteRetentionPolicy\",\n        serializedName: \"DeleteRetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      },\n      staticWebsite: {\n        xmlName: \"StaticWebsite\",\n        serializedName: \"StaticWebsite\",\n        type: {\n          name: \"Composite\",\n          className: \"StaticWebsite\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageServiceStats: msRest.CompositeMapper = {\n  serializedName: \"StorageServiceStats\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageServiceStats\",\n    modelProperties: {\n      geoReplication: {\n        xmlName: \"GeoReplication\",\n        serializedName: \"GeoReplication\",\n        type: {\n          name: \"Composite\",\n          className: \"GeoReplication\"\n        }\n      }\n    }\n  }\n};\n\nexport const LeaseAccessConditions: msRest.CompositeMapper = {\n  xmlName: \"lease-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"LeaseAccessConditions\",\n    modelProperties: {\n      leaseId: {\n        xmlName: \"leaseId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ModifiedAccessConditions: msRest.CompositeMapper = {\n  xmlName: \"modified-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"ModifiedAccessConditions\",\n    modelProperties: {\n      ifModifiedSince: {\n        xmlName: \"ifModifiedSince\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      ifUnmodifiedSince: {\n        xmlName: \"ifUnmodifiedSince\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      ifMatch: {\n        xmlName: \"ifMatch\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ifNoneMatch: {\n        xmlName: \"ifNoneMatch\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobHTTPHeaders: msRest.CompositeMapper = {\n  xmlName: \"blob-HTTP-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobHTTPHeaders\",\n    modelProperties: {\n      blobCacheControl: {\n        xmlName: \"blobCacheControl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentType: {\n        xmlName: \"blobContentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentMD5: {\n        xmlName: \"blobContentMD5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobContentEncoding: {\n        xmlName: \"blobContentEncoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLanguage: {\n        xmlName: \"blobContentLanguage\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentDisposition: {\n        xmlName: \"blobContentDisposition\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SourceModifiedAccessConditions: msRest.CompositeMapper = {\n  xmlName: \"source-modified-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"SourceModifiedAccessConditions\",\n    modelProperties: {\n      sourceIfModifiedSince: {\n        xmlName: \"sourceIfModifiedSince\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      sourceIfUnmodifiedSince: {\n        xmlName: \"sourceIfUnmodifiedSince\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      sourceIfMatch: {\n        xmlName: \"sourceIfMatch\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceIfNoneMatch: {\n        xmlName: \"sourceIfNoneMatch\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SequenceNumberAccessConditions: msRest.CompositeMapper = {\n  xmlName: \"sequence-number-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"SequenceNumberAccessConditions\",\n    modelProperties: {\n      ifSequenceNumberLessThanOrEqualTo: {\n        xmlName: \"ifSequenceNumberLessThanOrEqualTo\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      ifSequenceNumberLessThan: {\n        xmlName: \"ifSequenceNumberLessThan\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      ifSequenceNumberEqualTo: {\n        xmlName: \"ifSequenceNumberEqualTo\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendPositionAccessConditions: msRest.CompositeMapper = {\n  xmlName: \"append-position-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendPositionAccessConditions\",\n    modelProperties: {\n      maxSize: {\n        xmlName: \"maxSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      appendPosition: {\n        xmlName: \"appendPosition\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSetPropertiesHeaders: msRest.CompositeMapper = {\n  serializedName: \"service-setproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSetPropertiesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetPropertiesHeaders: msRest.CompositeMapper = {\n  serializedName: \"service-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetPropertiesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetStatisticsHeaders: msRest.CompositeMapper = {\n  serializedName: \"service-getstatistics-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetStatisticsHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceListContainersSegmentHeaders: msRest.CompositeMapper = {\n  serializedName: \"service-listcontainerssegment-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceListContainersSegmentHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetUserDelegationKeyHeaders: msRest.CompositeMapper = {\n  serializedName: \"service-getuserdelegationkey-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetUserDelegationKeyHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetAccountInfoHeaders: msRest.CompositeMapper = {\n  serializedName: \"service-getaccountinfo-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetAccountInfoHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      skuName: {\n        serializedName: \"x-ms-sku-name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Standard_LRS\",\n            \"Standard_GRS\",\n            \"Standard_RAGRS\",\n            \"Standard_ZRS\",\n            \"Premium_LRS\"\n          ]\n        }\n      },\n      accountKind: {\n        serializedName: \"x-ms-account-kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Storage\",\n            \"BlobStorage\",\n            \"StorageV2\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerCreateHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerCreateHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetPropertiesHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetPropertiesHeaders\",\n    modelProperties: {\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobPublicAccess: {\n        serializedName: \"x-ms-blob-public-access\",\n        type: {\n          name: \"String\"\n        }\n      },\n      hasImmutabilityPolicy: {\n        serializedName: \"x-ms-has-immutability-policy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      hasLegalHold: {\n        serializedName: \"x-ms-has-legal-hold\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerDeleteHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-delete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSetMetadataHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-setmetadata-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSetMetadataHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetAccessPolicyHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-getaccesspolicy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetAccessPolicyHeaders\",\n    modelProperties: {\n      blobPublicAccess: {\n        serializedName: \"x-ms-blob-public-access\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSetAccessPolicyHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-setaccesspolicy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSetAccessPolicyHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerAcquireLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-acquirelease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerAcquireLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerReleaseLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-releaselease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerReleaseLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRenewLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-renewlease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRenewLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerBreakLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-breaklease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerBreakLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseTime: {\n        serializedName: \"x-ms-lease-time\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerChangeLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-changelease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerChangeLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerListBlobFlatSegmentHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-listblobflatsegment-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerListBlobFlatSegmentHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerListBlobHierarchySegmentHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-listblobhierarchysegment-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerListBlobHierarchySegmentHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetAccountInfoHeaders: msRest.CompositeMapper = {\n  serializedName: \"container-getaccountinfo-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetAccountInfoHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      skuName: {\n        serializedName: \"x-ms-sku-name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Standard_LRS\",\n            \"Standard_GRS\",\n            \"Standard_RAGRS\",\n            \"Standard_ZRS\",\n            \"Premium_LRS\"\n          ]\n        }\n      },\n      accountKind: {\n        serializedName: \"x-ms-account-kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Storage\",\n            \"BlobStorage\",\n            \"StorageV2\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDownloadHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-download-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDownloadHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      blobType: {\n        serializedName: \"x-ms-blob-type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"BlockBlob\",\n            \"PageBlob\",\n            \"AppendBlob\"\n          ]\n        }\n      },\n      copyCompletionTime: {\n        serializedName: \"x-ms-copy-completion-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"x-ms-copy-status-description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"x-ms-copy-progress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"x-ms-copy-source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      blobContentMD5: {\n        serializedName: \"x-ms-blob-content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetPropertiesHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetPropertiesHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      creationTime: {\n        serializedName: \"x-ms-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      blobType: {\n        serializedName: \"x-ms-blob-type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"BlockBlob\",\n            \"PageBlob\",\n            \"AppendBlob\"\n          ]\n        }\n      },\n      copyCompletionTime: {\n        serializedName: \"x-ms-copy-completion-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"x-ms-copy-status-description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"x-ms-copy-progress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"x-ms-copy-source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      isIncrementalCopy: {\n        serializedName: \"x-ms-incremental-copy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      destinationSnapshot: {\n        serializedName: \"x-ms-copy-destination-snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      accessTier: {\n        serializedName: \"x-ms-access-tier\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierInferred: {\n        serializedName: \"x-ms-access-tier-inferred\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      archiveStatus: {\n        serializedName: \"x-ms-archive-status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierChangeTime: {\n        serializedName: \"x-ms-access-tier-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDeleteHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-delete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobCreateHeaders: msRest.CompositeMapper = {\n  serializedName: \"pageblob-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobCreateHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobCreateHeaders: msRest.CompositeMapper = {\n  serializedName: \"appendblob-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobCreateHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobUploadHeaders: msRest.CompositeMapper = {\n  serializedName: \"blockblob-upload-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobUploadHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobUndeleteHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-undelete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobUndeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetHTTPHeadersHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-sethttpheaders-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetHTTPHeadersHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetMetadataHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-setmetadata-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetMetadataHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobAcquireLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-acquirelease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobAcquireLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobReleaseLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-releaselease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobReleaseLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobRenewLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-renewlease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobRenewLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobChangeLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-changelease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobChangeLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobBreakLeaseHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-breaklease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobBreakLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseTime: {\n        serializedName: \"x-ms-lease-time\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobCreateSnapshotHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-createsnapshot-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobCreateSnapshotHeaders\",\n    modelProperties: {\n      snapshot: {\n        serializedName: \"x-ms-snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobStartCopyFromURLHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-startcopyfromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobStartCopyFromURLHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobCopyFromURLHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-copyfromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobCopyFromURLHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"success\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobAbortCopyFromURLHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-abortcopyfromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobAbortCopyFromURLHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetTierHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-settier-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetTierHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetAccountInfoHeaders: msRest.CompositeMapper = {\n  serializedName: \"blob-getaccountinfo-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetAccountInfoHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      skuName: {\n        serializedName: \"x-ms-sku-name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Standard_LRS\",\n            \"Standard_GRS\",\n            \"Standard_RAGRS\",\n            \"Standard_ZRS\",\n            \"Premium_LRS\"\n          ]\n        }\n      },\n      accountKind: {\n        serializedName: \"x-ms-account-kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Storage\",\n            \"BlobStorage\",\n            \"StorageV2\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobStageBlockHeaders: msRest.CompositeMapper = {\n  serializedName: \"blockblob-stageblock-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobStageBlockHeaders\",\n    modelProperties: {\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobStageBlockFromURLHeaders: msRest.CompositeMapper = {\n  serializedName: \"blockblob-stageblockfromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobStageBlockFromURLHeaders\",\n    modelProperties: {\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobCommitBlockListHeaders: msRest.CompositeMapper = {\n  serializedName: \"blockblob-commitblocklist-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobCommitBlockListHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobGetBlockListHeaders: msRest.CompositeMapper = {\n  serializedName: \"blockblob-getblocklist-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobGetBlockListHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLength: {\n        serializedName: \"x-ms-blob-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUploadPagesHeaders: msRest.CompositeMapper = {\n  serializedName: \"pageblob-uploadpages-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUploadPagesHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobClearPagesHeaders: msRest.CompositeMapper = {\n  serializedName: \"pageblob-clearpages-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobClearPagesHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUploadPagesFromURLHeaders: msRest.CompositeMapper = {\n  serializedName: \"pageblob-uploadpagesfromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUploadPagesFromURLHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobGetPageRangesHeaders: msRest.CompositeMapper = {\n  serializedName: \"pageblob-getpageranges-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobGetPageRangesHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLength: {\n        serializedName: \"x-ms-blob-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobGetPageRangesDiffHeaders: msRest.CompositeMapper = {\n  serializedName: \"pageblob-getpagerangesdiff-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobGetPageRangesDiffHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLength: {\n        serializedName: \"x-ms-blob-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobResizeHeaders: msRest.CompositeMapper = {\n  serializedName: \"pageblob-resize-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobResizeHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUpdateSequenceNumberHeaders: msRest.CompositeMapper = {\n  serializedName: \"pageblob-updatesequencenumber-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUpdateSequenceNumberHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobCopyIncrementalHeaders: msRest.CompositeMapper = {\n  serializedName: \"pageblob-copyincremental-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobCopyIncrementalHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobAppendBlockHeaders: msRest.CompositeMapper = {\n  serializedName: \"appendblob-appendblock-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobAppendBlockHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobAppendOffset: {\n        serializedName: \"x-ms-blob-append-offset\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobAppendBlockFromUrlHeaders: msRest.CompositeMapper = {\n  serializedName: \"appendblob-appendblockfromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobAppendBlockFromUrlHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobAppendOffset: {\n        serializedName: \"x-ms-blob-append-offset\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport const access: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"access\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-public-access\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action0: msRest.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'acquire',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action1: msRest.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'release',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action2: msRest.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'renew',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action3: msRest.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'break',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action4: msRest.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'change',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const appendPosition: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"appendPositionAccessConditions\",\n    \"appendPosition\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-condition-appendpos\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const blobCacheControl: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobCacheControl\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-cache-control\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobContentDisposition: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentDisposition\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-disposition\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobContentEncoding: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentEncoding\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-encoding\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobContentLanguage: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentLanguage\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-language\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobContentLength: msRest.OperationParameter = {\n  parameterPath: \"blobContentLength\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-blob-content-length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const blobContentMD5: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-md5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const blobContentType: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentType\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobSequenceNumber: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobSequenceNumber\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-sequence-number\",\n    defaultValue: 0,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const blobType0: msRest.OperationParameter = {\n  parameterPath: \"blobType\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-blob-type\",\n    defaultValue: 'PageBlob',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobType1: msRest.OperationParameter = {\n  parameterPath: \"blobType\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-blob-type\",\n    defaultValue: 'AppendBlob',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobType2: msRest.OperationParameter = {\n  parameterPath: \"blobType\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-blob-type\",\n    defaultValue: 'BlockBlob',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blockId: msRest.OperationQueryParameter = {\n  parameterPath: \"blockId\",\n  mapper: {\n    required: true,\n    serializedName: \"blockid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const breakPeriod: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"breakPeriod\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-lease-break-period\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const comp0: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'properties',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp1: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'stats',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp10: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'tier',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp11: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'page',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp12: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'pagelist',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp13: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'incrementalcopy',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp14: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'appendblock',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp15: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'block',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp16: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'blocklist',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp2: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'list',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp3: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'userdelegationkey',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp4: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'metadata',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp5: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'acl',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp6: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'lease',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp7: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'undelete',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp8: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'snapshot',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp9: msRest.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'copy',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const contentLength: msRest.OperationParameter = {\n  parameterPath: \"contentLength\",\n  mapper: {\n    required: true,\n    serializedName: \"Content-Length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const copyActionAbortConstant: msRest.OperationParameter = {\n  parameterPath: \"copyActionAbortConstant\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-copy-action\",\n    defaultValue: 'abort',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const copyId: msRest.OperationQueryParameter = {\n  parameterPath: \"copyId\",\n  mapper: {\n    required: true,\n    serializedName: \"copyid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const copySource: msRest.OperationParameter = {\n  parameterPath: \"copySource\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-copy-source\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const deleteSnapshots: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"deleteSnapshots\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-delete-snapshots\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"include\",\n        \"only\"\n      ]\n    }\n  }\n};\nexport const delimiter: msRest.OperationQueryParameter = {\n  parameterPath: \"delimiter\",\n  mapper: {\n    required: true,\n    serializedName: \"delimiter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const duration: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"duration\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-lease-duration\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const ifMatch: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"modifiedAccessConditions\",\n    \"ifMatch\"\n  ],\n  mapper: {\n    serializedName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const ifModifiedSince: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"modifiedAccessConditions\",\n    \"ifModifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"If-Modified-Since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\nexport const ifNoneMatch: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"modifiedAccessConditions\",\n    \"ifNoneMatch\"\n  ],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const ifSequenceNumberEqualTo: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sequenceNumberAccessConditions\",\n    \"ifSequenceNumberEqualTo\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-if-sequence-number-eq\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const ifSequenceNumberLessThan: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sequenceNumberAccessConditions\",\n    \"ifSequenceNumberLessThan\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-if-sequence-number-lt\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const ifSequenceNumberLessThanOrEqualTo: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sequenceNumberAccessConditions\",\n    \"ifSequenceNumberLessThanOrEqualTo\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-if-sequence-number-le\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const ifUnmodifiedSince: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"modifiedAccessConditions\",\n    \"ifUnmodifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"If-Unmodified-Since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\nexport const include0: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"include\"\n  ],\n  mapper: {\n    serializedName: \"include\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"metadata\"\n      ]\n    }\n  }\n};\nexport const include1: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"include\"\n  ],\n  mapper: {\n    serializedName: \"include\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"copy\",\n            \"deleted\",\n            \"metadata\",\n            \"snapshots\",\n            \"uncommittedblobs\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const leaseId0: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"leaseAccessConditions\",\n    \"leaseId\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const leaseId1: msRest.OperationParameter = {\n  parameterPath: \"leaseId\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const listType: msRest.OperationQueryParameter = {\n  parameterPath: \"listType\",\n  mapper: {\n    required: true,\n    serializedName: \"blocklisttype\",\n    defaultValue: 'committed',\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"committed\",\n        \"uncommitted\",\n        \"all\"\n      ]\n    }\n  }\n};\nexport const marker: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"marker\"\n  ],\n  mapper: {\n    serializedName: \"marker\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const maxresults: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"maxresults\"\n  ],\n  mapper: {\n    serializedName: \"maxresults\",\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const maxSize: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"appendPositionAccessConditions\",\n    \"maxSize\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-condition-maxsize\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const metadata: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"metadata\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-meta\",\n    type: {\n      name: \"Dictionary\",\n      value: {\n        type: {\n          name: \"String\"\n        }\n      }\n    },\n    headerCollectionPrefix: \"x-ms-meta-\"\n  }\n};\nexport const pageWrite0: msRest.OperationParameter = {\n  parameterPath: \"pageWrite\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-page-write\",\n    defaultValue: 'update',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const pageWrite1: msRest.OperationParameter = {\n  parameterPath: \"pageWrite\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-page-write\",\n    defaultValue: 'clear',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const prefix: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"prefix\"\n  ],\n  mapper: {\n    serializedName: \"prefix\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const prevsnapshot: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"prevsnapshot\"\n  ],\n  mapper: {\n    serializedName: \"prevsnapshot\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const proposedLeaseId0: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"proposedLeaseId\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-proposed-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const proposedLeaseId1: msRest.OperationParameter = {\n  parameterPath: \"proposedLeaseId\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-proposed-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const range0: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"range\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const range1: msRest.OperationParameter = {\n  parameterPath: \"range\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const rangeGetContentMD5: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"rangeGetContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-range-get-content-md5\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const requestId: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"requestId\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-client-request-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const restype0: msRest.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'service',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const restype1: msRest.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'account',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const restype2: msRest.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'container',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sequenceNumberAction: msRest.OperationParameter = {\n  parameterPath: \"sequenceNumberAction\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-sequence-number-action\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"max\",\n        \"update\",\n        \"increment\"\n      ]\n    }\n  }\n};\nexport const snapshot: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"snapshot\"\n  ],\n  mapper: {\n    serializedName: \"snapshot\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceContentMD5: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-content-md5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const sourceIfMatch: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfMatch\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceIfModifiedSince: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfModifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-modified-since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\nexport const sourceIfNoneMatch: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfNoneMatch\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-none-match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceIfUnmodifiedSince: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfUnmodifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-unmodified-since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\nexport const sourceRange0: msRest.OperationParameter = {\n  parameterPath: \"sourceRange\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-source-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceRange1: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceRange\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceUrl: msRest.OperationParameter = {\n  parameterPath: \"sourceUrl\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-copy-source\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const tier: msRest.OperationParameter = {\n  parameterPath: \"tier\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-access-tier\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const timeout: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"timeout\"\n  ],\n  mapper: {\n    serializedName: \"timeout\",\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const transactionalContentMD5: msRest.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"transactionalContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"Content-MD5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const url: msRest.OperationURLParameter = {\n  parameterPath: \"url\",\n  mapper: {\n    required: true,\n    serializedName: \"url\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const version: msRest.OperationParameter = {\n  parameterPath: \"version\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-version\",\n    defaultValue: '2018-11-09',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const xMsRequiresSync: msRest.OperationParameter = {\n  parameterPath: \"xMsRequiresSync\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-requires-sync\",\n    defaultValue: 'true',\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/serviceMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Service. */\nexport class Service {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Service.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param storageServiceProperties The StorageService properties.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceSetPropertiesResponse>\n   */\n  setProperties(storageServiceProperties: Models.StorageServiceProperties, options?: Models.ServiceSetPropertiesOptionalParams): Promise<Models.ServiceSetPropertiesResponse>;\n  /**\n   * @param storageServiceProperties The StorageService properties.\n   * @param callback The callback\n   */\n  setProperties(storageServiceProperties: Models.StorageServiceProperties, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param storageServiceProperties The StorageService properties.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setProperties(storageServiceProperties: Models.StorageServiceProperties, options: Models.ServiceSetPropertiesOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  setProperties(storageServiceProperties: Models.StorageServiceProperties, options?: Models.ServiceSetPropertiesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ServiceSetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        storageServiceProperties,\n        options\n      },\n      setPropertiesOperationSpec,\n      callback) as Promise<Models.ServiceSetPropertiesResponse>;\n  }\n\n  /**\n   * gets the properties of a storage account's Blob service, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetPropertiesResponse>\n   */\n  getProperties(options?: Models.ServiceGetPropertiesOptionalParams): Promise<Models.ServiceGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: msRest.ServiceCallback<Models.StorageServiceProperties>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.ServiceGetPropertiesOptionalParams, callback: msRest.ServiceCallback<Models.StorageServiceProperties>): void;\n  getProperties(options?: Models.ServiceGetPropertiesOptionalParams | msRest.ServiceCallback<Models.StorageServiceProperties>, callback?: msRest.ServiceCallback<Models.StorageServiceProperties>): Promise<Models.ServiceGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.ServiceGetPropertiesResponse>;\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the\n   * storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetStatisticsResponse>\n   */\n  getStatistics(options?: Models.ServiceGetStatisticsOptionalParams): Promise<Models.ServiceGetStatisticsResponse>;\n  /**\n   * @param callback The callback\n   */\n  getStatistics(callback: msRest.ServiceCallback<Models.StorageServiceStats>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStatistics(options: Models.ServiceGetStatisticsOptionalParams, callback: msRest.ServiceCallback<Models.StorageServiceStats>): void;\n  getStatistics(options?: Models.ServiceGetStatisticsOptionalParams | msRest.ServiceCallback<Models.StorageServiceStats>, callback?: msRest.ServiceCallback<Models.StorageServiceStats>): Promise<Models.ServiceGetStatisticsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getStatisticsOperationSpec,\n      callback) as Promise<Models.ServiceGetStatisticsResponse>;\n  }\n\n  /**\n   * The List Containers Segment operation returns a list of the containers under the specified\n   * account\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceListContainersSegmentResponse>\n   */\n  listContainersSegment(options?: Models.ServiceListContainersSegmentOptionalParams): Promise<Models.ServiceListContainersSegmentResponse>;\n  /**\n   * @param callback The callback\n   */\n  listContainersSegment(callback: msRest.ServiceCallback<Models.ListContainersSegmentResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listContainersSegment(options: Models.ServiceListContainersSegmentOptionalParams, callback: msRest.ServiceCallback<Models.ListContainersSegmentResponse>): void;\n  listContainersSegment(options?: Models.ServiceListContainersSegmentOptionalParams | msRest.ServiceCallback<Models.ListContainersSegmentResponse>, callback?: msRest.ServiceCallback<Models.ListContainersSegmentResponse>): Promise<Models.ServiceListContainersSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listContainersSegmentOperationSpec,\n      callback) as Promise<Models.ServiceListContainersSegmentResponse>;\n  }\n\n  /**\n   * Retrieves a user delgation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   * @param keyInfo\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetUserDelegationKeyResponse>\n   */\n  getUserDelegationKey(keyInfo: Models.KeyInfo, options?: Models.ServiceGetUserDelegationKeyOptionalParams): Promise<Models.ServiceGetUserDelegationKeyResponse>;\n  /**\n   * @param keyInfo\n   * @param callback The callback\n   */\n  getUserDelegationKey(keyInfo: Models.KeyInfo, callback: msRest.ServiceCallback<Models.UserDelegationKey>): void;\n  /**\n   * @param keyInfo\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getUserDelegationKey(keyInfo: Models.KeyInfo, options: Models.ServiceGetUserDelegationKeyOptionalParams, callback: msRest.ServiceCallback<Models.UserDelegationKey>): void;\n  getUserDelegationKey(keyInfo: Models.KeyInfo, options?: Models.ServiceGetUserDelegationKeyOptionalParams | msRest.ServiceCallback<Models.UserDelegationKey>, callback?: msRest.ServiceCallback<Models.UserDelegationKey>): Promise<Models.ServiceGetUserDelegationKeyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        keyInfo,\n        options\n      },\n      getUserDelegationKeyOperationSpec,\n      callback) as Promise<Models.ServiceGetUserDelegationKeyResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetAccountInfoResponse>\n   */\n  getAccountInfo(options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetAccountInfoResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccountInfo(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccountInfo(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  getAccountInfo(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ServiceGetAccountInfoResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccountInfoOperationSpec,\n      callback) as Promise<Models.ServiceGetAccountInfoResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers, true);\nconst setPropertiesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype0,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  requestBody: {\n    parameterPath: \"storageServiceProperties\",\n    mapper: {\n      ...Mappers.StorageServiceProperties,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype0,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getStatisticsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype0,\n    Parameters.comp1\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageServiceStats,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listContainersSegmentOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxresults,\n    Parameters.include0,\n    Parameters.timeout,\n    Parameters.comp2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getUserDelegationKeyOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype0,\n    Parameters.comp3\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  requestBody: {\n    parameterPath: \"keyInfo\",\n    mapper: {\n      ...Mappers.KeyInfo,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UserDelegationKey,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccountInfoOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.restype1,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ServiceGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/containerMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Container. */\nexport class Container {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Container.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * creates a new container under the specified account. If the container with the same name already\n   * exists, the operation fails\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerCreateResponse>\n   */\n  create(options?: Models.ContainerCreateOptionalParams): Promise<Models.ContainerCreateResponse>;\n  /**\n   * @param callback The callback\n   */\n  create(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(options: Models.ContainerCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  create(options?: Models.ContainerCreateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.ContainerCreateResponse>;\n  }\n\n  /**\n   * returns all user-defined metadata and system properties for the specified container. The data\n   * returned does not include the container's list of blobs\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerGetPropertiesResponse>\n   */\n  getProperties(options?: Models.ContainerGetPropertiesOptionalParams): Promise<Models.ContainerGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.ContainerGetPropertiesOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  getProperties(options?: Models.ContainerGetPropertiesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.ContainerGetPropertiesResponse>;\n  }\n\n  /**\n   * operation marks the specified container for deletion. The container and any blobs contained\n   * within it are later deleted during garbage collection\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerDeleteResponse>\n   */\n  deleteMethod(options?: Models.ContainerDeleteMethodOptionalParams): Promise<Models.ContainerDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.ContainerDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.ContainerDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.ContainerDeleteResponse>;\n  }\n\n  /**\n   * operation sets one or more user-defined name-value pairs for the specified container.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerSetMetadataResponse>\n   */\n  setMetadata(options?: Models.ContainerSetMetadataOptionalParams): Promise<Models.ContainerSetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.ContainerSetMetadataOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  setMetadata(options?: Models.ContainerSetMetadataOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.ContainerSetMetadataResponse>;\n  }\n\n  /**\n   * gets the permissions for the specified container. The permissions indicate whether container\n   * data may be accessed publicly.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerGetAccessPolicyResponse>\n   */\n  getAccessPolicy(options?: Models.ContainerGetAccessPolicyOptionalParams): Promise<Models.ContainerGetAccessPolicyResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccessPolicy(callback: msRest.ServiceCallback<Models.SignedIdentifier[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccessPolicy(options: Models.ContainerGetAccessPolicyOptionalParams, callback: msRest.ServiceCallback<Models.SignedIdentifier[]>): void;\n  getAccessPolicy(options?: Models.ContainerGetAccessPolicyOptionalParams | msRest.ServiceCallback<Models.SignedIdentifier[]>, callback?: msRest.ServiceCallback<Models.SignedIdentifier[]>): Promise<Models.ContainerGetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccessPolicyOperationSpec,\n      callback) as Promise<Models.ContainerGetAccessPolicyResponse>;\n  }\n\n  /**\n   * sets the permissions for the specified container. The permissions indicate whether blobs in a\n   * container may be accessed publicly.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerSetAccessPolicyResponse>\n   */\n  setAccessPolicy(options?: Models.ContainerSetAccessPolicyOptionalParams): Promise<Models.ContainerSetAccessPolicyResponse>;\n  /**\n   * @param callback The callback\n   */\n  setAccessPolicy(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setAccessPolicy(options: Models.ContainerSetAccessPolicyOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  setAccessPolicy(options?: Models.ContainerSetAccessPolicyOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerSetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setAccessPolicyOperationSpec,\n      callback) as Promise<Models.ContainerSetAccessPolicyResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerAcquireLeaseResponse>\n   */\n  acquireLease(options?: Models.ContainerAcquireLeaseOptionalParams): Promise<Models.ContainerAcquireLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  acquireLease(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  acquireLease(options: Models.ContainerAcquireLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  acquireLease(options?: Models.ContainerAcquireLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerAcquireLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      acquireLeaseOperationSpec,\n      callback) as Promise<Models.ContainerAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerReleaseLeaseResponse>\n   */\n  releaseLease(leaseId: string, options?: Models.ContainerReleaseLeaseOptionalParams): Promise<Models.ContainerReleaseLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, options: Models.ContainerReleaseLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  releaseLease(leaseId: string, options?: Models.ContainerReleaseLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerReleaseLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      releaseLeaseOperationSpec,\n      callback) as Promise<Models.ContainerReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerRenewLeaseResponse>\n   */\n  renewLease(leaseId: string, options?: Models.ContainerRenewLeaseOptionalParams): Promise<Models.ContainerRenewLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  renewLease(leaseId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  renewLease(leaseId: string, options: Models.ContainerRenewLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  renewLease(leaseId: string, options?: Models.ContainerRenewLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerRenewLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      renewLeaseOperationSpec,\n      callback) as Promise<Models.ContainerRenewLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerBreakLeaseResponse>\n   */\n  breakLease(options?: Models.ContainerBreakLeaseOptionalParams): Promise<Models.ContainerBreakLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  breakLease(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  breakLease(options: Models.ContainerBreakLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  breakLease(options?: Models.ContainerBreakLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerBreakLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      breakLeaseOperationSpec,\n      callback) as Promise<Models.ContainerBreakLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerChangeLeaseResponse>\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, options?: Models.ContainerChangeLeaseOptionalParams): Promise<Models.ContainerChangeLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, options: Models.ContainerChangeLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  changeLease(leaseId: string, proposedLeaseId: string, options?: Models.ContainerChangeLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerChangeLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        proposedLeaseId,\n        options\n      },\n      changeLeaseOperationSpec,\n      callback) as Promise<Models.ContainerChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerListBlobFlatSegmentResponse>\n   */\n  listBlobFlatSegment(options?: Models.ContainerListBlobFlatSegmentOptionalParams): Promise<Models.ContainerListBlobFlatSegmentResponse>;\n  /**\n   * @param callback The callback\n   */\n  listBlobFlatSegment(callback: msRest.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listBlobFlatSegment(options: Models.ContainerListBlobFlatSegmentOptionalParams, callback: msRest.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): void;\n  listBlobFlatSegment(options?: Models.ContainerListBlobFlatSegmentOptionalParams | msRest.ServiceCallback<Models.ListBlobsFlatSegmentResponse>, callback?: msRest.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): Promise<Models.ContainerListBlobFlatSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listBlobFlatSegmentOperationSpec,\n      callback) as Promise<Models.ContainerListBlobFlatSegmentResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   * element in the response body that acts as a placeholder for all blobs whose names begin with the\n   * same substring up to the appearance of the delimiter character. The delimiter may be a single\n   * character or a string.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerListBlobHierarchySegmentResponse>\n   */\n  listBlobHierarchySegment(delimiter: string, options?: Models.ContainerListBlobHierarchySegmentOptionalParams): Promise<Models.ContainerListBlobHierarchySegmentResponse>;\n  /**\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   * element in the response body that acts as a placeholder for all blobs whose names begin with the\n   * same substring up to the appearance of the delimiter character. The delimiter may be a single\n   * character or a string.\n   * @param callback The callback\n   */\n  listBlobHierarchySegment(delimiter: string, callback: msRest.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): void;\n  /**\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   * element in the response body that acts as a placeholder for all blobs whose names begin with the\n   * same substring up to the appearance of the delimiter character. The delimiter may be a single\n   * character or a string.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listBlobHierarchySegment(delimiter: string, options: Models.ContainerListBlobHierarchySegmentOptionalParams, callback: msRest.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): void;\n  listBlobHierarchySegment(delimiter: string, options?: Models.ContainerListBlobHierarchySegmentOptionalParams | msRest.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>, callback?: msRest.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): Promise<Models.ContainerListBlobHierarchySegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        delimiter,\n        options\n      },\n      listBlobHierarchySegmentOperationSpec,\n      callback) as Promise<Models.ContainerListBlobHierarchySegmentResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerGetAccountInfoResponse>\n   */\n  getAccountInfo(options?: msRest.RequestOptionsBase): Promise<Models.ContainerGetAccountInfoResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccountInfo(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccountInfo(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  getAccountInfo(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ContainerGetAccountInfoResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccountInfoOperationSpec,\n      callback) as Promise<Models.ContainerGetAccountInfoResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers, true);\nconst createOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.access,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccessPolicyOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp5\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        xmlElementName: \"SignedIdentifier\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedIdentifier\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.ContainerGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setAccessPolicyOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp5\n  ],\n  headerParameters: [\n    Parameters.access,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"containerAcl\"\n    ],\n    mapper: {\n      xmlName: \"SignedIdentifiers\",\n      xmlElementName: \"SignedIdentifier\",\n      serializedName: \"containerAcl\",\n      type: {\n        name: \"Sequence\",\n        element: {\n          type: {\n            name: \"Composite\",\n            className: \"SignedIdentifier\"\n          }\n        }\n      }\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst acquireLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.duration,\n    Parameters.proposedLeaseId0,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst releaseLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst renewLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action2,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst breakLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.breakPeriod,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action3,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst changeLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.proposedLeaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action4,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listBlobFlatSegmentOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxresults,\n    Parameters.include1,\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listBlobHierarchySegmentOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.delimiter,\n    Parameters.marker,\n    Parameters.maxresults,\n    Parameters.include1,\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccountInfoOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.restype1,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/blobMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Blob. */\nexport class Blob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Blob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Download operation reads or downloads a blob from the system, including its metadata and\n   * properties. You can also call Download to read a snapshot.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobDownloadResponse>\n   */\n  download(options?: Models.BlobDownloadOptionalParams): Promise<Models.BlobDownloadResponse>;\n  /**\n   * @param callback The callback\n   */\n  download(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  download(options: Models.BlobDownloadOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  download(options?: Models.BlobDownloadOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobDownloadResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      downloadOperationSpec,\n      callback) as Promise<Models.BlobDownloadResponse>;\n  }\n\n  /**\n   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and\n   * system properties for the blob. It does not return the content of the blob.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobGetPropertiesResponse>\n   */\n  getProperties(options?: Models.BlobGetPropertiesOptionalParams): Promise<Models.BlobGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.BlobGetPropertiesOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  getProperties(options?: Models.BlobGetPropertiesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.BlobGetPropertiesResponse>;\n  }\n\n  /**\n   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n   * permanently removed from the storage account. If the storage account's soft delete feature is\n   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n   * immediately. However, the blob service retains the blob or snapshot for the number of days\n   * specified by the DeleteRetentionPolicy section of [Storage service properties]\n   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n   * is permanently removed from the storage account. Note that you continue to be charged for the\n   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify\n   * the \"include=deleted\" query parameter to discover which blobs and snapshots have been soft\n   * deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other\n   * operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code\n   * of 404 (ResourceNotFound).\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobDeleteResponse>\n   */\n  deleteMethod(options?: Models.BlobDeleteMethodOptionalParams): Promise<Models.BlobDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.BlobDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.BlobDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.BlobDeleteResponse>;\n  }\n\n  /**\n   * Undelete a blob that was previously soft deleted\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobUndeleteResponse>\n   */\n  undelete(options?: Models.BlobUndeleteOptionalParams): Promise<Models.BlobUndeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  undelete(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  undelete(options: Models.BlobUndeleteOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  undelete(options?: Models.BlobUndeleteOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobUndeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      undeleteOperationSpec,\n      callback) as Promise<Models.BlobUndeleteResponse>;\n  }\n\n  /**\n   * The Set HTTP Headers operation sets system properties on the blob\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobSetHTTPHeadersResponse>\n   */\n  setHTTPHeaders(options?: Models.BlobSetHTTPHeadersOptionalParams): Promise<Models.BlobSetHTTPHeadersResponse>;\n  /**\n   * @param callback The callback\n   */\n  setHTTPHeaders(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setHTTPHeaders(options: Models.BlobSetHTTPHeadersOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  setHTTPHeaders(options?: Models.BlobSetHTTPHeadersOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobSetHTTPHeadersResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setHTTPHeadersOperationSpec,\n      callback) as Promise<Models.BlobSetHTTPHeadersResponse>;\n  }\n\n  /**\n   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n   * name-value pairs\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobSetMetadataResponse>\n   */\n  setMetadata(options?: Models.BlobSetMetadataOptionalParams): Promise<Models.BlobSetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.BlobSetMetadataOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  setMetadata(options?: Models.BlobSetMetadataOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.BlobSetMetadataResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobAcquireLeaseResponse>\n   */\n  acquireLease(options?: Models.BlobAcquireLeaseOptionalParams): Promise<Models.BlobAcquireLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  acquireLease(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  acquireLease(options: Models.BlobAcquireLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  acquireLease(options?: Models.BlobAcquireLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobAcquireLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      acquireLeaseOperationSpec,\n      callback) as Promise<Models.BlobAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobReleaseLeaseResponse>\n   */\n  releaseLease(leaseId: string, options?: Models.BlobReleaseLeaseOptionalParams): Promise<Models.BlobReleaseLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, options: Models.BlobReleaseLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  releaseLease(leaseId: string, options?: Models.BlobReleaseLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobReleaseLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      releaseLeaseOperationSpec,\n      callback) as Promise<Models.BlobReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobRenewLeaseResponse>\n   */\n  renewLease(leaseId: string, options?: Models.BlobRenewLeaseOptionalParams): Promise<Models.BlobRenewLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  renewLease(leaseId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  renewLease(leaseId: string, options: Models.BlobRenewLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  renewLease(leaseId: string, options?: Models.BlobRenewLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobRenewLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      renewLeaseOperationSpec,\n      callback) as Promise<Models.BlobRenewLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobChangeLeaseResponse>\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, options?: Models.BlobChangeLeaseOptionalParams): Promise<Models.BlobChangeLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, options: Models.BlobChangeLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  changeLease(leaseId: string, proposedLeaseId: string, options?: Models.BlobChangeLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobChangeLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        proposedLeaseId,\n        options\n      },\n      changeLeaseOperationSpec,\n      callback) as Promise<Models.BlobChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobBreakLeaseResponse>\n   */\n  breakLease(options?: Models.BlobBreakLeaseOptionalParams): Promise<Models.BlobBreakLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  breakLease(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  breakLease(options: Models.BlobBreakLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  breakLease(options?: Models.BlobBreakLeaseOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobBreakLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      breakLeaseOperationSpec,\n      callback) as Promise<Models.BlobBreakLeaseResponse>;\n  }\n\n  /**\n   * The Create Snapshot operation creates a read-only snapshot of a blob\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobCreateSnapshotResponse>\n   */\n  createSnapshot(options?: Models.BlobCreateSnapshotOptionalParams): Promise<Models.BlobCreateSnapshotResponse>;\n  /**\n   * @param callback The callback\n   */\n  createSnapshot(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createSnapshot(options: Models.BlobCreateSnapshotOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  createSnapshot(options?: Models.BlobCreateSnapshotOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobCreateSnapshotResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      createSnapshotOperationSpec,\n      callback) as Promise<Models.BlobCreateSnapshotResponse>;\n  }\n\n  /**\n   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobStartCopyFromURLResponse>\n   */\n  startCopyFromURL(copySource: string, options?: Models.BlobStartCopyFromURLOptionalParams): Promise<Models.BlobStartCopyFromURLResponse>;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param callback The callback\n   */\n  startCopyFromURL(copySource: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  startCopyFromURL(copySource: string, options: Models.BlobStartCopyFromURLOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  startCopyFromURL(copySource: string, options?: Models.BlobStartCopyFromURLOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobStartCopyFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copySource,\n        options\n      },\n      startCopyFromURLOperationSpec,\n      callback) as Promise<Models.BlobStartCopyFromURLResponse>;\n  }\n\n  /**\n   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n   * return a response until the copy is complete.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobCopyFromURLResponse>\n   */\n  copyFromURL(copySource: string, options?: Models.BlobCopyFromURLOptionalParams): Promise<Models.BlobCopyFromURLResponse>;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param callback The callback\n   */\n  copyFromURL(copySource: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  copyFromURL(copySource: string, options: Models.BlobCopyFromURLOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  copyFromURL(copySource: string, options?: Models.BlobCopyFromURLOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobCopyFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copySource,\n        options\n      },\n      copyFromURLOperationSpec,\n      callback) as Promise<Models.BlobCopyFromURLResponse>;\n  }\n\n  /**\n   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a\n   * destination blob with zero length and full metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   * operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobAbortCopyFromURLResponse>\n   */\n  abortCopyFromURL(copyId: string, options?: Models.BlobAbortCopyFromURLOptionalParams): Promise<Models.BlobAbortCopyFromURLResponse>;\n  /**\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   * operation.\n   * @param callback The callback\n   */\n  abortCopyFromURL(copyId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   * operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  abortCopyFromURL(copyId: string, options: Models.BlobAbortCopyFromURLOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  abortCopyFromURL(copyId: string, options?: Models.BlobAbortCopyFromURLOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobAbortCopyFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copyId,\n        options\n      },\n      abortCopyFromURLOperationSpec,\n      callback) as Promise<Models.BlobAbortCopyFromURLResponse>;\n  }\n\n  /**\n   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a\n   * premium storage account and on a block blob in a blob storage account (locally redundant storage\n   * only). A premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob.\n   * A block blob's tier determines Hot/Cool/Archive storage type. This operation does not update the\n   * blob's ETag.\n   * @param tier Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6',\n   * 'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool', 'Archive'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobSetTierResponse>\n   */\n  setTier(tier: Models.AccessTier, options?: Models.BlobSetTierOptionalParams): Promise<Models.BlobSetTierResponse>;\n  /**\n   * @param tier Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6',\n   * 'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool', 'Archive'\n   * @param callback The callback\n   */\n  setTier(tier: Models.AccessTier, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param tier Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6',\n   * 'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool', 'Archive'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setTier(tier: Models.AccessTier, options: Models.BlobSetTierOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  setTier(tier: Models.AccessTier, options?: Models.BlobSetTierOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobSetTierResponse> {\n    return this.client.sendOperationRequest(\n      {\n        tier,\n        options\n      },\n      setTierOperationSpec,\n      callback) as Promise<Models.BlobSetTierResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobGetAccountInfoResponse>\n   */\n  getAccountInfo(options?: msRest.RequestOptionsBase): Promise<Models.BlobGetAccountInfoResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccountInfo(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccountInfo(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  getAccountInfo(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlobGetAccountInfoResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccountInfoOperationSpec,\n      callback) as Promise<Models.BlobGetAccountInfoResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers, true);\nconst downloadOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.range0,\n    Parameters.rangeGetContentMD5,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"HEAD\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.deleteSnapshots,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst undeleteOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp7\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setHTTPHeadersOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHTTPHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst acquireLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6\n  ],\n  headerParameters: [\n    Parameters.duration,\n    Parameters.proposedLeaseId0,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst releaseLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst renewLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action2,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst changeLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.proposedLeaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action4,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst breakLeaseOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6\n  ],\n  headerParameters: [\n    Parameters.breakPeriod,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action3,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst createSnapshotOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp8\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.leaseId0\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst startCopyFromURLOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.copySource,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.leaseId0\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst copyFromURLOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.copySource,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.xMsRequiresSync,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.leaseId0\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst abortCopyFromURLOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.copyId,\n    Parameters.timeout,\n    Parameters.comp9\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.copyActionAbortConstant,\n    Parameters.leaseId0\n  ],\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setTierOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp10\n  ],\n  headerParameters: [\n    Parameters.tier,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccountInfoOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.restype1,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/pageBlobMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a PageBlob. */\nexport class PageBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a PageBlob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create operation creates a new page blob.\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobCreateResponse>\n   */\n  create(contentLength: number, blobContentLength: number, options?: Models.PageBlobCreateOptionalParams): Promise<Models.PageBlobCreateResponse>;\n  /**\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param callback The callback\n   */\n  create(contentLength: number, blobContentLength: number, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(contentLength: number, blobContentLength: number, options: Models.PageBlobCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  create(contentLength: number, blobContentLength: number, options?: Models.PageBlobCreateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PageBlobCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        contentLength,\n        blobContentLength,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.PageBlobCreateResponse>;\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobUploadPagesResponse>\n   */\n  uploadPages(body: msRest.HttpRequestBody, contentLength: number, options?: Models.PageBlobUploadPagesOptionalParams): Promise<Models.PageBlobUploadPagesResponse>;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  uploadPages(body: msRest.HttpRequestBody, contentLength: number, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  uploadPages(body: msRest.HttpRequestBody, contentLength: number, options: Models.PageBlobUploadPagesOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  uploadPages(body: msRest.HttpRequestBody, contentLength: number, options?: Models.PageBlobUploadPagesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PageBlobUploadPagesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        body,\n        contentLength,\n        options\n      },\n      uploadPagesOperationSpec,\n      callback) as Promise<Models.PageBlobUploadPagesResponse>;\n  }\n\n  /**\n   * The Clear Pages operation clears a set of pages from a page blob\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobClearPagesResponse>\n   */\n  clearPages(contentLength: number, options?: Models.PageBlobClearPagesOptionalParams): Promise<Models.PageBlobClearPagesResponse>;\n  /**\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  clearPages(contentLength: number, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  clearPages(contentLength: number, options: Models.PageBlobClearPagesOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  clearPages(contentLength: number, options?: Models.PageBlobClearPagesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PageBlobClearPagesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        contentLength,\n        options\n      },\n      clearPagesOperationSpec,\n      callback) as Promise<Models.PageBlobClearPagesResponse>;\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the contents are read\n   * from a URL\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param sourceRange Bytes of source data in the specified range. The length of this range should\n   * match the ContentLength header and x-ms-range/Range destination range header.\n   * @param contentLength The length of the request.\n   * @param range The range of bytes to which the source range would be written. The range should be\n   * 512 aligned and range-end is required.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobUploadPagesFromURLResponse>\n   */\n  uploadPagesFromURL(sourceUrl: string, sourceRange: string, contentLength: number, range: string, options?: Models.PageBlobUploadPagesFromURLOptionalParams): Promise<Models.PageBlobUploadPagesFromURLResponse>;\n  /**\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param sourceRange Bytes of source data in the specified range. The length of this range should\n   * match the ContentLength header and x-ms-range/Range destination range header.\n   * @param contentLength The length of the request.\n   * @param range The range of bytes to which the source range would be written. The range should be\n   * 512 aligned and range-end is required.\n   * @param callback The callback\n   */\n  uploadPagesFromURL(sourceUrl: string, sourceRange: string, contentLength: number, range: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param sourceRange Bytes of source data in the specified range. The length of this range should\n   * match the ContentLength header and x-ms-range/Range destination range header.\n   * @param contentLength The length of the request.\n   * @param range The range of bytes to which the source range would be written. The range should be\n   * 512 aligned and range-end is required.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  uploadPagesFromURL(sourceUrl: string, sourceRange: string, contentLength: number, range: string, options: Models.PageBlobUploadPagesFromURLOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  uploadPagesFromURL(sourceUrl: string, sourceRange: string, contentLength: number, range: string, options?: Models.PageBlobUploadPagesFromURLOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PageBlobUploadPagesFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        sourceUrl,\n        sourceRange,\n        contentLength,\n        range,\n        options\n      },\n      uploadPagesFromURLOperationSpec,\n      callback) as Promise<Models.PageBlobUploadPagesFromURLResponse>;\n  }\n\n  /**\n   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot\n   * of a page blob\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobGetPageRangesResponse>\n   */\n  getPageRanges(options?: Models.PageBlobGetPageRangesOptionalParams): Promise<Models.PageBlobGetPageRangesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getPageRanges(callback: msRest.ServiceCallback<Models.PageList>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getPageRanges(options: Models.PageBlobGetPageRangesOptionalParams, callback: msRest.ServiceCallback<Models.PageList>): void;\n  getPageRanges(options?: Models.PageBlobGetPageRangesOptionalParams | msRest.ServiceCallback<Models.PageList>, callback?: msRest.ServiceCallback<Models.PageList>): Promise<Models.PageBlobGetPageRangesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPageRangesOperationSpec,\n      callback) as Promise<Models.PageBlobGetPageRangesResponse>;\n  }\n\n  /**\n   * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that\n   * were changed between target blob and previous snapshot.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobGetPageRangesDiffResponse>\n   */\n  getPageRangesDiff(options?: Models.PageBlobGetPageRangesDiffOptionalParams): Promise<Models.PageBlobGetPageRangesDiffResponse>;\n  /**\n   * @param callback The callback\n   */\n  getPageRangesDiff(callback: msRest.ServiceCallback<Models.PageList>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getPageRangesDiff(options: Models.PageBlobGetPageRangesDiffOptionalParams, callback: msRest.ServiceCallback<Models.PageList>): void;\n  getPageRangesDiff(options?: Models.PageBlobGetPageRangesDiffOptionalParams | msRest.ServiceCallback<Models.PageList>, callback?: msRest.ServiceCallback<Models.PageList>): Promise<Models.PageBlobGetPageRangesDiffResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPageRangesDiffOperationSpec,\n      callback) as Promise<Models.PageBlobGetPageRangesDiffResponse>;\n  }\n\n  /**\n   * Resize the Blob\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobResizeResponse>\n   */\n  resize(blobContentLength: number, options?: Models.PageBlobResizeOptionalParams): Promise<Models.PageBlobResizeResponse>;\n  /**\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param callback The callback\n   */\n  resize(blobContentLength: number, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  resize(blobContentLength: number, options: Models.PageBlobResizeOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  resize(blobContentLength: number, options?: Models.PageBlobResizeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PageBlobResizeResponse> {\n    return this.client.sendOperationRequest(\n      {\n        blobContentLength,\n        options\n      },\n      resizeOperationSpec,\n      callback) as Promise<Models.PageBlobResizeResponse>;\n  }\n\n  /**\n   * Update the sequence number of the blob\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the\n   * request. This property applies to page blobs only. This property indicates how the service\n   * should modify the blob's sequence number. Possible values include: 'max', 'update', 'increment'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobUpdateSequenceNumberResponse>\n   */\n  updateSequenceNumber(sequenceNumberAction: Models.SequenceNumberActionType, options?: Models.PageBlobUpdateSequenceNumberOptionalParams): Promise<Models.PageBlobUpdateSequenceNumberResponse>;\n  /**\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the\n   * request. This property applies to page blobs only. This property indicates how the service\n   * should modify the blob's sequence number. Possible values include: 'max', 'update', 'increment'\n   * @param callback The callback\n   */\n  updateSequenceNumber(sequenceNumberAction: Models.SequenceNumberActionType, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the\n   * request. This property applies to page blobs only. This property indicates how the service\n   * should modify the blob's sequence number. Possible values include: 'max', 'update', 'increment'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateSequenceNumber(sequenceNumberAction: Models.SequenceNumberActionType, options: Models.PageBlobUpdateSequenceNumberOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  updateSequenceNumber(sequenceNumberAction: Models.SequenceNumberActionType, options?: Models.PageBlobUpdateSequenceNumberOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PageBlobUpdateSequenceNumberResponse> {\n    return this.client.sendOperationRequest(\n      {\n        sequenceNumberAction,\n        options\n      },\n      updateSequenceNumberOperationSpec,\n      callback) as Promise<Models.PageBlobUpdateSequenceNumberResponse>;\n  }\n\n  /**\n   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page\n   * blob. The snapshot is copied such that only the differential changes between the previously\n   * copied snapshot are transferred to the destination. The copied snapshots are complete copies of\n   * the original snapshot and can be read or copied from as usual. This API is supported since REST\n   * version 2016-05-31.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobCopyIncrementalResponse>\n   */\n  copyIncremental(copySource: string, options?: Models.PageBlobCopyIncrementalOptionalParams): Promise<Models.PageBlobCopyIncrementalResponse>;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param callback The callback\n   */\n  copyIncremental(copySource: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  copyIncremental(copySource: string, options: Models.PageBlobCopyIncrementalOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  copyIncremental(copySource: string, options?: Models.PageBlobCopyIncrementalOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PageBlobCopyIncrementalResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copySource,\n        options\n      },\n      copyIncrementalOperationSpec,\n      callback) as Promise<Models.PageBlobCopyIncrementalResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers, true);\nconst createOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.blobContentLength,\n    Parameters.blobSequenceNumber,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobType0,\n    Parameters.blobContentType,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentMD5,\n    Parameters.blobCacheControl,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst uploadPagesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp11\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.transactionalContentMD5,\n    Parameters.range0,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.pageWrite0,\n    Parameters.leaseId0,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  requestBody: {\n    parameterPath: \"body\",\n    mapper: {\n      required: true,\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst clearPagesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp11\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.range0,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.pageWrite1,\n    Parameters.leaseId0,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobClearPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst uploadPagesFromURLOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp11\n  ],\n  headerParameters: [\n    Parameters.sourceUrl,\n    Parameters.sourceRange0,\n    Parameters.sourceContentMD5,\n    Parameters.contentLength,\n    Parameters.range1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.pageWrite0,\n    Parameters.leaseId0,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPageRangesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout,\n    Parameters.comp12\n  ],\n  headerParameters: [\n    Parameters.range0,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPageRangesDiffOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout,\n    Parameters.prevsnapshot,\n    Parameters.comp12\n  ],\n  headerParameters: [\n    Parameters.range0,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst resizeOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.blobContentLength,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobResizeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst updateSequenceNumberOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.sequenceNumberAction,\n    Parameters.blobSequenceNumber,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst copyIncrementalOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp13\n  ],\n  headerParameters: [\n    Parameters.copySource,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.PageBlobCopyIncrementalHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/appendBlobMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a AppendBlob. */\nexport class AppendBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a AppendBlob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create Append Blob operation creates a new append blob.\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AppendBlobCreateResponse>\n   */\n  create(contentLength: number, options?: Models.AppendBlobCreateOptionalParams): Promise<Models.AppendBlobCreateResponse>;\n  /**\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  create(contentLength: number, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(contentLength: number, options: Models.AppendBlobCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  create(contentLength: number, options?: Models.AppendBlobCreateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.AppendBlobCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        contentLength,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.AppendBlobCreateResponse>;\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob.\n   * The Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n   * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AppendBlobAppendBlockResponse>\n   */\n  appendBlock(body: msRest.HttpRequestBody, contentLength: number, options?: Models.AppendBlobAppendBlockOptionalParams): Promise<Models.AppendBlobAppendBlockResponse>;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  appendBlock(body: msRest.HttpRequestBody, contentLength: number, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  appendBlock(body: msRest.HttpRequestBody, contentLength: number, options: Models.AppendBlobAppendBlockOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  appendBlock(body: msRest.HttpRequestBody, contentLength: number, options?: Models.AppendBlobAppendBlockOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.AppendBlobAppendBlockResponse> {\n    return this.client.sendOperationRequest(\n      {\n        body,\n        contentLength,\n        options\n      },\n      appendBlockOperationSpec,\n      callback) as Promise<Models.AppendBlobAppendBlockResponse>;\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob\n   * where the contents are read from a source url. The Append Block operation is permitted only if\n   * the blob was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on\n   * version 2015-02-21 version or later.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AppendBlobAppendBlockFromUrlResponse>\n   */\n  appendBlockFromUrl(sourceUrl: string, contentLength: number, options?: Models.AppendBlobAppendBlockFromUrlOptionalParams): Promise<Models.AppendBlobAppendBlockFromUrlResponse>;\n  /**\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  appendBlockFromUrl(sourceUrl: string, contentLength: number, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  appendBlockFromUrl(sourceUrl: string, contentLength: number, options: Models.AppendBlobAppendBlockFromUrlOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  appendBlockFromUrl(sourceUrl: string, contentLength: number, options?: Models.AppendBlobAppendBlockFromUrlOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.AppendBlobAppendBlockFromUrlResponse> {\n    return this.client.sendOperationRequest(\n      {\n        sourceUrl,\n        contentLength,\n        options\n      },\n      appendBlockFromUrlOperationSpec,\n      callback) as Promise<Models.AppendBlobAppendBlockFromUrlResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers, true);\nconst createOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobType1,\n    Parameters.blobContentType,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentMD5,\n    Parameters.blobCacheControl,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst appendBlockOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp14\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.transactionalContentMD5,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.maxSize,\n    Parameters.appendPosition,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  requestBody: {\n    parameterPath: \"body\",\n    mapper: {\n      required: true,\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst appendBlockFromUrlOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp14\n  ],\n  headerParameters: [\n    Parameters.sourceUrl,\n    Parameters.sourceRange1,\n    Parameters.sourceContentMD5,\n    Parameters.contentLength,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.maxSize,\n    Parameters.appendPosition,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/blockBlobMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a BlockBlob. */\nexport class BlockBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a BlockBlob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Upload Block Blob operation updates the content of an existing block blob. Updating an\n   * existing block blob overwrites any existing metadata on the blob. Partial updates are not\n   * supported with Put Blob; the content of the existing blob is overwritten with the content of the\n   * new blob. To perform a partial update of the content of a block blob, use the Put Block List\n   * operation.\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobUploadResponse>\n   */\n  upload(body: msRest.HttpRequestBody, contentLength: number, options?: Models.BlockBlobUploadOptionalParams): Promise<Models.BlockBlobUploadResponse>;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  upload(body: msRest.HttpRequestBody, contentLength: number, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  upload(body: msRest.HttpRequestBody, contentLength: number, options: Models.BlockBlobUploadOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  upload(body: msRest.HttpRequestBody, contentLength: number, options?: Models.BlockBlobUploadOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlockBlobUploadResponse> {\n    return this.client.sendOperationRequest(\n      {\n        body,\n        contentLength,\n        options\n      },\n      uploadOperationSpec,\n      callback) as Promise<Models.BlockBlobUploadResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobStageBlockResponse>\n   */\n  stageBlock(blockId: string, contentLength: number, body: msRest.HttpRequestBody, options?: Models.BlockBlobStageBlockOptionalParams): Promise<Models.BlockBlobStageBlockResponse>;\n  /**\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param callback The callback\n   */\n  stageBlock(blockId: string, contentLength: number, body: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  stageBlock(blockId: string, contentLength: number, body: msRest.HttpRequestBody, options: Models.BlockBlobStageBlockOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  stageBlock(blockId: string, contentLength: number, body: msRest.HttpRequestBody, options?: Models.BlockBlobStageBlockOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlockBlobStageBlockResponse> {\n    return this.client.sendOperationRequest(\n      {\n        blockId,\n        contentLength,\n        body,\n        options\n      },\n      stageBlockOperationSpec,\n      callback) as Promise<Models.BlockBlobStageBlockResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob where the\n   * contents are read from a URL.\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobStageBlockFromURLResponse>\n   */\n  stageBlockFromURL(blockId: string, contentLength: number, sourceUrl: string, options?: Models.BlockBlobStageBlockFromURLOptionalParams): Promise<Models.BlockBlobStageBlockFromURLResponse>;\n  /**\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param callback The callback\n   */\n  stageBlockFromURL(blockId: string, contentLength: number, sourceUrl: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  stageBlockFromURL(blockId: string, contentLength: number, sourceUrl: string, options: Models.BlockBlobStageBlockFromURLOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  stageBlockFromURL(blockId: string, contentLength: number, sourceUrl: string, options?: Models.BlockBlobStageBlockFromURLOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlockBlobStageBlockFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        blockId,\n        contentLength,\n        sourceUrl,\n        options\n      },\n      stageBlockFromURLOperationSpec,\n      callback) as Promise<Models.BlockBlobStageBlockFromURLResponse>;\n  }\n\n  /**\n   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up\n   * the blob. In order to be written as part of a blob, a block must have been successfully written\n   * to the server in a prior Put Block operation. You can call Put Block List to update a blob by\n   * uploading only those blocks that have changed, then committing the new and existing blocks\n   * together. You can do this by specifying whether to commit a block from the committed block list\n   * or from the uncommitted block list, or to commit the most recently uploaded version of the\n   * block, whichever list it may belong to.\n   * @param blocks\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobCommitBlockListResponse>\n   */\n  commitBlockList(blocks: Models.BlockLookupList, options?: Models.BlockBlobCommitBlockListOptionalParams): Promise<Models.BlockBlobCommitBlockListResponse>;\n  /**\n   * @param blocks\n   * @param callback The callback\n   */\n  commitBlockList(blocks: Models.BlockLookupList, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param blocks\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  commitBlockList(blocks: Models.BlockLookupList, options: Models.BlockBlobCommitBlockListOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  commitBlockList(blocks: Models.BlockLookupList, options?: Models.BlockBlobCommitBlockListOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BlockBlobCommitBlockListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        blocks,\n        options\n      },\n      commitBlockListOperationSpec,\n      callback) as Promise<Models.BlockBlobCommitBlockListResponse>;\n  }\n\n  /**\n   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a\n   * block blob\n   * @param listType Specifies whether to return the list of committed blocks, the list of\n   * uncommitted blocks, or both lists together. Possible values include: 'committed', 'uncommitted',\n   * 'all'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobGetBlockListResponse>\n   */\n  getBlockList(listType: Models.BlockListType, options?: Models.BlockBlobGetBlockListOptionalParams): Promise<Models.BlockBlobGetBlockListResponse>;\n  /**\n   * @param listType Specifies whether to return the list of committed blocks, the list of\n   * uncommitted blocks, or both lists together. Possible values include: 'committed', 'uncommitted',\n   * 'all'\n   * @param callback The callback\n   */\n  getBlockList(listType: Models.BlockListType, callback: msRest.ServiceCallback<Models.BlockList>): void;\n  /**\n   * @param listType Specifies whether to return the list of committed blocks, the list of\n   * uncommitted blocks, or both lists together. Possible values include: 'committed', 'uncommitted',\n   * 'all'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getBlockList(listType: Models.BlockListType, options: Models.BlockBlobGetBlockListOptionalParams, callback: msRest.ServiceCallback<Models.BlockList>): void;\n  getBlockList(listType: Models.BlockListType, options?: Models.BlockBlobGetBlockListOptionalParams | msRest.ServiceCallback<Models.BlockList>, callback?: msRest.ServiceCallback<Models.BlockList>): Promise<Models.BlockBlobGetBlockListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        listType,\n        options\n      },\n      getBlockListOperationSpec,\n      callback) as Promise<Models.BlockBlobGetBlockListResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers, true);\nconst uploadOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobType2,\n    Parameters.blobContentType,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentMD5,\n    Parameters.blobCacheControl,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  requestBody: {\n    parameterPath: \"body\",\n    mapper: {\n      required: true,\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst stageBlockOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.blockId,\n    Parameters.timeout,\n    Parameters.comp15\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.transactionalContentMD5,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  requestBody: {\n    parameterPath: \"body\",\n    mapper: {\n      required: true,\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst stageBlockFromURLOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.blockId,\n    Parameters.timeout,\n    Parameters.comp15\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.sourceUrl,\n    Parameters.sourceRange1,\n    Parameters.sourceContentMD5,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst commitBlockListOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp16\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentMD5,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  requestBody: {\n    parameterPath: \"blocks\",\n    mapper: {\n      ...Mappers.BlockLookupList,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobCommitBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getBlockListOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.listType,\n    Parameters.timeout,\n    Parameters.comp16\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlockList,\n      headersMapper: Mappers.BlockBlobGetBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","// tslint:disable:max-line-length\n/**\n * Range for Blob Service Operations.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-the-range-header-for-blob-service-operations\n *\n * @export\n * @interface IRange\n */\nexport interface IRange {\n  /**\n   * StartByte, larger than or equal 0.\n   *\n   * @type {string}\n   * @memberof IRange\n   */\n  offset: number;\n  /**\n   * Optional. Count of bytes, larger than 0.\n   * If not provided, will return bytes from offset to the end.\n   *\n   * @type {string}\n   * @memberof IRange\n   */\n  count?: number;\n}\n\n/**\n * Generate a range string. For example:\n *\n * \"bytes=255-\" or \"bytes=0-511\"\n *\n * @export\n * @param {IRange} iRange\n * @returns {string}\n */\nexport function rangeToString(iRange: IRange): string {\n  if (iRange.offset < 0) {\n    throw new RangeError(`IRange.offset cannot be smaller than 0.`);\n  }\n  if (iRange.count && iRange.count <= 0) {\n    throw new RangeError(\n      `IRange.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`\n    );\n  }\n  return iRange.count\n    ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}`\n    : `bytes=${iRange.offset}-`;\n}\n","export const SDK_VERSION: string = \"10.4.1\";\nexport const SERVICE_VERSION: string = \"2018-11-09\";\n\nexport const BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES: number = 256 * 1024 * 1024; // 256MB\nexport const BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES: number = 100 * 1024 * 1024; // 100MB\nexport const BLOCK_BLOB_MAX_BLOCKS: number = 50000;\nexport const DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES: number = 4 * 1024 * 1024; // 4MB\nexport const DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS: number = 5;\n\nexport const URLConstants = {\n  Parameters: {\n    FORCE_BROWSER_NO_CACHE: \"_\",\n    SIGNATURE: \"sig\",\n    SNAPSHOT: \"snapshot\",\n    TIMEOUT: \"timeout\"\n  }\n};\n\nexport const HTTPURLConnection = {\n  HTTP_CONFLICT: 409,\n  HTTP_NOT_FOUND: 404,\n  HTTP_PRECON_FAILED: 412,\n  HTTP_RANGE_NOT_SATISFIABLE: 416\n};\n\nexport const HeaderConstants = {\n  AUTHORIZATION: \"authorization\",\n  AUTHORIZATION_SCHEME: \"Bearer\",\n  CONTENT_ENCODING: \"content-encoding\",\n  CONTENT_LANGUAGE: \"content-language\",\n  CONTENT_LENGTH: \"content-length\",\n  CONTENT_MD5: \"content-md5\",\n  CONTENT_TYPE: \"content-type\",\n  COOKIE: \"Cookie\",\n  DATE: \"date\",\n  IF_MATCH: \"if-match\",\n  IF_MODIFIED_SINCE: \"if-modified-since\",\n  IF_NONE_MATCH: \"if-none-match\",\n  IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n  PREFIX_FOR_STORAGE: \"x-ms-\",\n  RANGE: \"Range\",\n  USER_AGENT: \"User-Agent\",\n  X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n  X_MS_DATE: \"x-ms-date\"\n};\n\nexport const ETagNone = \"\";\nexport const ETagAny = \"*\";\n","import { AbortSignalLike, isNode, URLBuilder } from \"@azure/ms-rest-js\";\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JSv10 SDKs\n *\n * When customers pass a URL string into XXXURL classes constrcutor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XXXURL constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" insead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `BlobURL.fromContainerURL(containerURL, blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @export\n * @param {string} url\n * @returns {string}\n */\nexport function escapeURLPath(url: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path || \"/\";\n\n  path = escape(path);\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\n/**\n * Internal escape method implmented Strategy Two mentioned in escapeURL() description.\n *\n * @param {string} text\n * @returns {string}\n */\nfunction escape(text: string): string {\n  return encodeURIComponent(text)\n    .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n    .replace(/'/g, \"%27\") // Escape for \"'\"\n    .replace(/\\+/g, \"%20\")\n    .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} name String to be appended to URL\n * @returns {string} An updated URL string\n */\nexport function appendToURLPath(url: string, name: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} name Parameter name\n * @param {string} [value] Parameter value\n * @returns {string} An updated URL string\n */\nexport function setURLParameter(url: string, name: string, value?: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL parameter by name.\n *\n * @export\n * @param {string} url\n * @param {string} name\n * @returns {(string | string[] | undefined)}\n */\nexport function getURLParameter(url: string, name: string): string | string[] | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n\n/**\n * Set URL host.\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} host New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url: string, host: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL path from an URL string.\n *\n * @export\n * @param {string} url Source URL string\n * @returns {(string | undefined)}\n */\nexport function getURLPath(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @export\n * @param {string} url\n * @returns {{[key: string]: string}}\n */\nexport function getURLQueries(url: string): { [key: string]: string } {\n  let queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n\n  let querySubStrings: string[] = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter((value: string) => {\n    const indexOfEqual = value.indexOf(\"=\");\n    const lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return (\n      indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1\n    );\n  });\n\n  const queries: { [key: string]: string } = {};\n  for (const querySubString of querySubStrings) {\n    const splitResults = querySubString.split(\"=\");\n    const key: string = splitResults[0];\n    const value: string = splitResults[1];\n    queries[key] = value;\n  }\n\n  return queries;\n}\n\n/**\n * Rounds a date off to seconds.\n *\n * @export\n * @param {Date} date\n * @param {boolean} [withMilliseconds=true] If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns {string} Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date: Date, withMilliseconds: boolean = true): string {\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n\n  return withMilliseconds\n    ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n    : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n\n/**\n * Base64 encode.\n *\n * @export\n * @param {string} content\n * @returns {string}\n */\nexport function base64encode(content: string): string {\n  return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n\n/**\n * Base64 decode.\n *\n * @export\n * @param {string} encodedString\n * @returns {string}\n */\nexport function base64decode(encodedString: string): string {\n  return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @export\n * @param {number} blockIndex\n * @returns {string}\n */\nexport function generateBlockID(blockIDPrefix: string, blockIndex: number): string {\n  // To generate a 64 bytes base64 string, source string should be 48\n  const maxSourceStringLength = 48;\n\n  // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n  const maxBlockIndexLength = 6;\n\n  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n\n  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n  }\n  const res =\n    blockIDPrefix +\n    padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n  return base64encode(res);\n}\n\n/**\n * Delay specified time interval.\n *\n * @export\n * @param {number} timeInMs\n * @param {AbortSignalLike} [aborter]\n * @param {Error} [abortError]\n */\nexport async function delay(timeInMs: number, aborter?: AbortSignalLike, abortError?: Error) {\n  return new Promise((resolve, reject) => {\n    let timeout: any;\n\n    const abortHandler = () => {\n      if (timeout !== undefined) {\n        clearTimeout(timeout);\n      }\n      reject(abortError);\n    }\n\n    const resolveHandler = () => {\n      if (aborter !== undefined) {\n        aborter.removeEventListener(\"abort\", abortHandler);\n      }\n      resolve();\n    };\n\n    timeout = setTimeout(resolveHandler, timeInMs);\n    if (aborter !== undefined) {\n      aborter.addEventListener(\"abort\", abortHandler);\n    }\n  });\n}\n\n/**\n * String.prototype.padStart()\n *\n * @export\n * @param {string} currentString\n * @param {number} targetLength\n * @param {string} [padString=\" \"]\n * @returns {string}\n */\nexport function padStart(\n  currentString: string,\n  targetLength: number,\n  padString: string = \" \"\n): string {\n  if (String.prototype.padStart) {\n    return currentString.padStart(targetLength, padString);\n  }\n\n  padString = padString || \" \";\n  if (currentString.length > targetLength) {\n    return currentString;\n  } else {\n    targetLength = targetLength - currentString.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + currentString;\n  }\n}\n","import {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/ms-rest-js\";\n\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n\n/**\n * BrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * BrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n *\n * @class BrowserPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class BrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of BrowserPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof BrowserPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof BrowserPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(\n        request.url,\n        URLConstants.Parameters.FORCE_BROWSER_NO_CACHE,\n        new Date().getTime().toString()\n      );\n    }\n\n    request.headers.remove(HeaderConstants.COOKIE);\n\n    // According to XHR standards, content-length should be fully controlled by browsers\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","import {\n  AbortSignalLike,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  HttpPipelineLogLevel,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource,\n} from \"@azure/ms-rest-js\";\n\nimport { IRetryOptions } from \"../RetryPolicyFactory\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @export\n * @param {IRetryOptions} retryOptions\n * @returns\n */\nexport function NewRetryPolicyFactory(retryOptions?: IRetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): RetryPolicy => {\n      return new RetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n\n/**\n * RetryPolicy types.\n *\n * @export\n * @enum {number}\n */\nexport enum RetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED\n}\n\n// Default values of IRetryOptions\nconst DEFAULT_RETRY_OPTIONS: IRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: RetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n};\n\nconst RETRY_ABORT_ERROR = new RestError(\"The request was aborted\", RestError.REQUEST_ABORTED_ERROR);\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n *\n * @class RetryPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class RetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   *\n   * @private\n   * @type {IRetryOptions}\n   * @memberof RetryPolicy\n   */\n  private readonly retryOptions: IRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {IRetryOptions} [retryOptions=DEFAULT_RETRY_OPTIONS]\n   * @memberof RetryPolicy\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: IRetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n\n      secondaryHost: retryOptions.secondaryHost\n        ? retryOptions.secondaryHost\n        : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof RetryPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @protected\n   * @param {WebResource} request\n   * @param {HttpOperationResponse} response\n   * @param {boolean} secondaryHas404  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param {number} attempt           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof RetryPolicy\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry =\n      secondaryHas404 ||\n      !this.retryOptions.secondaryHost ||\n      !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n      attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost!);\n    }\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(\n        newRequest.url,\n        URLConstants.Parameters.TIMEOUT,\n        Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n      );\n    }\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      this.logf(\n        HttpPipelineLogLevel.INFO,\n        `RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`\n      );\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err) {\n      this.logf(\n        HttpPipelineLogLevel.ERROR,\n        `RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`\n      );\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return await this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @protected\n   * @param {boolean} isPrimaryRetry\n   * @param {number} attempt\n   * @param {HttpOperationResponse} [response]\n   * @param {RestError} [err]\n   * @returns {boolean}\n   * @memberof RetryPolicy\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      this.logf(\n        HttpPipelineLogLevel.INFO,\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code && err.code.toString().toUpperCase().includes(retriableError))\n        ) {\n          this.logf(\n            HttpPipelineLogLevel.INFO,\n            `RetryPolicy: Network error ${retriableError} found, will retry.`\n          );\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        this.logf(HttpPipelineLogLevel.INFO, `RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        this.logf(\n          HttpPipelineLogLevel.INFO,\n          `RetryPolicy: Will retry for status code ${statusCode}.`\n        );\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * This is to log for debugging purposes only.\n   * Comment/uncomment as necessary for releasing/debugging.\n   *\n   * @private\n   * @param {HttpPipelineLogLevel} level\n   * @param {string} message\n   * @memberof RetryPolicy\n   */\n  // tslint:disable-next-line:variable-name\n  private logf(_level: HttpPipelineLogLevel, _message: string) {\n    // this.log(_level, _message);\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @private\n   * @param {boolean} isPrimaryRetry\n   * @param {number} attempt\n   * @param {AbortSignalLike} [abortSignal]\n   * @returns\n   * @memberof RetryPolicy\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number, abortSignal?: AbortSignalLike) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case RetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case RetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    this.logf(HttpPipelineLogLevel.INFO, `RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}\n","import { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/ms-rest-js\";\n\nimport { BrowserPolicy } from \"./policies/BrowserPolicy\";\n\n/**\n * BrowserPolicyFactory is a factory class helping generating BrowserPolicy objects.\n *\n * @export\n * @class BrowserPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class BrowserPolicyFactory implements RequestPolicyFactory {\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): BrowserPolicy {\n    return new BrowserPolicy(nextPolicy, options);\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nconst packageName = \"azure-storage-blob\";\nconst packageVersion = \"1.0.0\";\n\nexport class StorageClientContext extends msRest.ServiceClient {\n  url: string;\n  version: string;\n\n  /**\n   * Initializes a new instance of the StorageClientContext class.\n   * @param url The URL of the service account, container, or blob that is the targe of the desired\n   * operation.\n   * @param [options] The parameter options\n   */\n  constructor(url: string, options?: msRest.ServiceClientOptions) {\n    if (url == undefined) {\n      throw new Error(\"'url' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = msRest.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.version = '2018-11-09';\n    this.baseUri = \"{url}\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.url = url;\n  }\n}\n","import {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource,\n} from \"@azure/ms-rest-js\";\n\nimport { IKeepAliveOptions } from \"../KeepAlivePolicyFactory\";\n\n/**\n * KeepAlivePolicy is a policy used to control keep alive settings for every request.\n *\n * @class KeepAlivePolicy\n * @extends {BaseRequestPolicy}\n */\nexport class KeepAlivePolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   * \n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {IKeepAliveOptions} [keepAliveOptions]\n   * @memberof KeepAlivePolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, private readonly keepAliveOptions: IKeepAliveOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof KeepAlivePolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    request.keepAlive = this.keepAliveOptions.enable;\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","import { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/ms-rest-js\";\n\nimport { KeepAlivePolicy } from \"./policies/KeepAlivePolicy\";\n\n/**\n * Interface of KeepAlivePolicy options.\n *\n * @export\n * @interface IKeepAliveOptions\n */\nexport interface IKeepAliveOptions {\n  enable: boolean;\n}\n\n/**\n * KeepAlivePolicyFactory is a factory class helping generating KeepAlivePolicy objects.\n *\n * @export\n * @class KeepAlivePolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class KeepAlivePolicyFactory implements RequestPolicyFactory {\n  /**\n   * Creates an instance of KeepAlivePolicyFactory.\n   *\n   * @param {IKeepAliveOptions} [telemetry]\n   * @memberof KeepAlivePolicyFactory\n   */\n  constructor(private readonly keepAliveOptions: IKeepAliveOptions = { enable: true }) {}\n\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): KeepAlivePolicy {\n    return new KeepAlivePolicy(nextPolicy, options, this.keepAliveOptions);\n  }\n}\n","import {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  HttpPipelineLogLevel,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/ms-rest-js\";\n\nimport { IRequestLogOptions } from \"../LoggingPolicyFactory\";\nimport { HTTPURLConnection, URLConstants } from \"../utils/constants\";\nimport { getURLParameter, setURLParameter } from \"../utils/utils.common\";\n\n// Default values of IRetryOptions\nconst DEFAULT_REQUEST_LOG_OPTIONS: IRequestLogOptions = {\n  logWarningIfTryOverThreshold: 3000\n};\n\n/**\n * LoggingPolicy is a policy used to log requests.\n *\n * @class LoggingPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class LoggingPolicy extends BaseRequestPolicy {\n  private tryCount: number = 0;\n  private operationStartTime: Date = new Date();\n  private requestStartTime: Date = new Date();\n\n  private readonly loggingOptions: IRequestLogOptions;\n\n  /**\n   * Creates an instance of LoggingPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {IRequestLogOptions} [loggingOptions=DEFAULT_REQUEST_LOG_OPTIONS]\n   * @memberof LoggingPolicy\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    loggingOptions: IRequestLogOptions = DEFAULT_REQUEST_LOG_OPTIONS\n  ) {\n    super(nextPolicy, options);\n    this.loggingOptions = loggingOptions;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof LoggingPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    this.tryCount++;\n    this.requestStartTime = new Date();\n    if (this.tryCount === 1) {\n      this.operationStartTime = this.requestStartTime;\n    }\n\n    let safeURL: string = request.url;\n    if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n      safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n    }\n    this.log(\n      HttpPipelineLogLevel.INFO,\n      `'${safeURL}'==> OUTGOING REQUEST (Try number=${this.tryCount}).`\n    );\n\n    try {\n      const response = await this._nextPolicy.sendRequest(request);\n\n      const requestEndTime = new Date();\n      const requestCompletionTime = requestEndTime.getTime() - this.requestStartTime.getTime();\n      const operationDuration = requestEndTime.getTime() - this.operationStartTime.getTime();\n\n      let currentLevel: HttpPipelineLogLevel = HttpPipelineLogLevel.INFO;\n      let logMessage: string = \"\";\n      if (this.shouldLog(HttpPipelineLogLevel.INFO)) {\n        // Assume success and default to informational logging.\n        logMessage = \"Successfully Received Response. \";\n      }\n\n      // If the response took too long, we'll upgrade to warning.\n      if (requestCompletionTime >= this.loggingOptions.logWarningIfTryOverThreshold) {\n        // Log a warning if the try duration exceeded the specified threshold.\n        if (this.shouldLog(HttpPipelineLogLevel.WARNING)) {\n          currentLevel = HttpPipelineLogLevel.WARNING;\n          logMessage = `SLOW OPERATION. Duration > ${\n            this.loggingOptions.logWarningIfTryOverThreshold\n          } ms. `;\n        }\n      }\n\n      if (\n        (response.status >= 400 &&\n          response.status <= 499 &&\n          (response.status !== HTTPURLConnection.HTTP_NOT_FOUND &&\n            response.status !== HTTPURLConnection.HTTP_CONFLICT &&\n            response.status !== HTTPURLConnection.HTTP_PRECON_FAILED &&\n            response.status !== HTTPURLConnection.HTTP_RANGE_NOT_SATISFIABLE)) ||\n        (response.status >= 500 && response.status <= 509)\n      ) {\n        const errorString = `REQUEST ERROR: HTTP request failed with status code: ${\n          response.status\n        }. `;\n        logMessage = errorString;\n\n        currentLevel = HttpPipelineLogLevel.ERROR;\n      }\n\n      const messageInfo = `Request try:${this.tryCount}, status:${\n        response.status\n      } request duration:${requestCompletionTime} ms, operation duration:${operationDuration} ms\\n`;\n      this.log(currentLevel, logMessage + messageInfo);\n\n      return response;\n    } catch (err) {\n      this.log(\n        HttpPipelineLogLevel.ERROR,\n        `Unexpected failure attempting to make request. Error message: ${err.message}`\n      );\n      throw err;\n    }\n  }\n}\n","import { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/ms-rest-js\";\n\nimport { LoggingPolicy } from \"./policies/LoggingPolicy\";\n\n/**\n * RequestLogOptions configures the retry policy's behavior.\n *\n * @export\n * @interface IRequestLogOptions\n */\nexport interface IRequestLogOptions {\n  /**\n   * LogWarningIfTryOverThreshold logs a warning if a tried operation takes longer than the specified\n   * duration in ms. Default is 3000ms.\n   * @type {number}\n   * @memberof IRequestLogOptions\n   */\n  logWarningIfTryOverThreshold: number;\n}\n\n/**\n * LoggingPolicyFactory is a factory class helping generating LoggingPolicy objects.\n *\n * @export\n * @class LoggingPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class LoggingPolicyFactory implements RequestPolicyFactory {\n  private readonly loggingOptions?: IRequestLogOptions;\n\n  constructor(loggingOptions?: IRequestLogOptions) {\n    this.loggingOptions = loggingOptions;\n  }\n\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): LoggingPolicy {\n    return new LoggingPolicy(nextPolicy, options, this.loggingOptions);\n  }\n}\n","import {\n  BaseRequestPolicy,\n  HttpClient as IHttpClient,\n  HttpHeaders,\n  HttpOperationResponse,\n  HttpPipelineLogger as IHttpPipelineLogger,\n  HttpPipelineLogLevel,\n  HttpRequestBody,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  ServiceClientOptions,\n  WebResource\n} from \"@azure/ms-rest-js\";\n\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\nexport {\n  IHttpClient,\n  IHttpPipelineLogger,\n  HttpHeaders,\n  HttpPipelineLogLevel,\n  HttpRequestBody,\n  HttpOperationResponse,\n  WebResource,\n  BaseRequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions\n};\n\n/**\n * Option interface for Pipeline constructor.\n *\n * @export\n * @interface IPipelineOptions\n */\nexport interface IPipelineOptions {\n  logger?: IHttpPipelineLogger;\n  HTTPClient?: IHttpClient;\n}\n\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling StorageURL.newPipeline().\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n * Refer to StorageURL.newPipeline() and provided policies as reference before\n * implementing your customized Pipeline.\n *\n * @export\n * @class Pipeline\n */\nexport class Pipeline {\n  public readonly factories: RequestPolicyFactory[];\n  public readonly options: IPipelineOptions;\n\n  /**\n   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n   *\n   * @param {RequestPolicyFactory[]} factories\n   * @param {IPipelineOptions} [options={}]\n   * @memberof Pipeline\n   */\n  constructor(factories: RequestPolicyFactory[], options: IPipelineOptions = {}) {\n    this.factories = factories;\n    this.options = options;\n  }\n\n  /**\n   * Transfer Pipeline object to ServiceClientOptions object which required by\n   * ServiceClient constructor.\n   *\n   * @returns {ServiceClientOptions}\n   * @memberof Pipeline\n   */\n  public toServiceClientOptions(): ServiceClientOptions {\n    return {\n      httpClient: this.options.HTTPClient,\n      httpPipelineLogger: this.options.logger,\n      requestPolicyFactories: this.factories\n    };\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","import { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/ms-rest-js\";\n\nimport { RetryPolicy, RetryPolicyType } from \"./policies/RetryPolicy\";\n\nexport { RetryPolicyType } from \"./policies/RetryPolicy\";\n\n/**\n * Retry options interface.\n *\n * @export\n * @interface IRetryOptions\n */\nexport interface IRetryOptions {\n  /**\n   * Optional. RetryPolicyType, default is exponential retry policy.\n   *\n   * @type {RetryPolicyType}\n   * @memberof RetryOptions\n   */\n  readonly retryPolicyType?: RetryPolicyType;\n\n  /**\n   * Optional. Max try number of attempts, default is 4.\n   * A value of 1 means 1 try and no retries.\n   * A value smaller than 1 means default retry number of attempts.\n   *\n   * @type {number}\n   * @memberof IRetryOptions\n   */\n  readonly maxTries?: number;\n\n  /**\n   * Optional. Indicates the maximum time in ms allowed for any single try of an HTTP request.\n   * A value of zero or undefined means no default timeout on SDK client, Azure\n   * Storage server's default timeout policy will be used.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\n   *\n   * @type {number}\n   * @memberof IRetryOptions\n   */\n  readonly tryTimeoutInMs?: number;\n\n  /**\n   * Optional. Specifies the amount of delay to use before retrying an operation (default is 4s or 4 * 1000ms).\n   * The delay increases (exponentially or linearly) with each retry up to a maximum specified by\n   * maxRetryDelayInMs. If you specify 0, then you must also specify 0 for maxRetryDelayInMs.\n   *\n   * @type {number}\n   * @memberof IRetryOptions\n   */\n  readonly retryDelayInMs?: number;\n\n  /**\n   * Optional. Specifies the maximum delay allowed before retrying an operation (default is 120s or 120 * 1000ms).\n   * If you specify 0, then you must also specify 0 for retryDelayInMs.\n   *\n   * @type {number}\n   * @memberof IRetryOptions\n   */\n  readonly maxRetryDelayInMs?: number;\n\n  /**\n   * If a secondaryHost is specified, retries will be tried against this host. If secondaryHost is undefined\n   * (the default) then operations are not retried against another host.\n   *\n   * NOTE: Before setting this field, make sure you understand the issues around\n   * reading stale and potentially-inconsistent data at\n   * {@link https://docs.microsoft.com/en-us/azure/storage/common/storage-designing-ha-apps-with-ragrs}\n   *\n   * @type {string}\n   * @memberof IRetryOptions\n   */\n  readonly secondaryHost?: string;\n}\n\n/**\n * RetryPolicyFactory is a factory class helping generating RetryPolicy objects.\n *\n * @export\n * @class RetryPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class RetryPolicyFactory implements RequestPolicyFactory {\n  private retryOptions?: IRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicyFactory.\n   * @param {IRetryOptions} [retryOptions]\n   * @memberof RetryPolicyFactory\n   */\n  constructor(retryOptions?: IRetryOptions) {\n    this.retryOptions = retryOptions;\n  }\n\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RetryPolicy {\n    return new RetryPolicy(nextPolicy, options, this.retryOptions);\n  }\n}\n","import {\n  BaseRequestPolicy,\n  HttpHeaders,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/ms-rest-js\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n *\n * @class TelemetryPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Telemetry string.\n   *\n   * @type {string}\n   * @memberof TelemetryPolicy\n   */\n  public readonly telemetry: string;\n\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {ITelemetryOptions} [telemetry]\n   * @memberof TelemetryPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, telemetry: string) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof TelemetryPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","import {\n  isNode,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"@azure/ms-rest-js\";\nimport * as os from \"os\";\n\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n\n/**\n * Interface of TelemetryPolicy options.\n *\n * @export\n * @interface ITelemetryOptions\n */\nexport interface ITelemetryOptions {\n  value: string;\n}\n\n/**\n * TelemetryPolicyFactory is a factory class helping generating TelemetryPolicy objects.\n *\n * @export\n * @class TelemetryPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class TelemetryPolicyFactory implements RequestPolicyFactory {\n  private telemetryString: string;\n\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param {ITelemetryOptions} [telemetry]\n   * @memberof TelemetryPolicyFactory\n   */\n  constructor(telemetry?: ITelemetryOptions) {\n    const userAgentInfo: string[] = [];\n\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = telemetry.value;\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n\n      // e.g. Azure-Storage/10.0.0\n      const libInfo = `Azure-Storage/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      const runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TelemetryPolicy {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}\n","import {\n  BaseRequestPolicy,\n  generateUuid,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/ms-rest-js\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * UniqueRequestIDPolicy generates an UUID as x-ms-request-id header value.\n *\n * @class UniqueRequestIDPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class UniqueRequestIDPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of UniqueRequestIDPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof UniqueRequestIDPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof UniqueRequestIDPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(HeaderConstants.X_MS_CLIENT_REQUEST_ID)) {\n      request.headers.set(HeaderConstants.X_MS_CLIENT_REQUEST_ID, generateUuid());\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","import { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/ms-rest-js\";\n\nimport { UniqueRequestIDPolicy } from \"./policies/UniqueRequestIDPolicy\";\n\n/**\n * UniqueRequestIDPolicyFactory is a factory class helping generating UniqueRequestIDPolicy objects.\n *\n * @export\n * @class UniqueRequestIDPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class UniqueRequestIDPolicyFactory implements RequestPolicyFactory {\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): UniqueRequestIDPolicy {\n    return new UniqueRequestIDPolicy(nextPolicy, options);\n  }\n}\n","import { deserializationPolicy, RequestPolicyFactory } from \"@azure/ms-rest-js\";\n\nimport { BrowserPolicyFactory } from \"./BrowserPolicyFactory\";\nimport { Credential } from \"./credentials/Credential\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { IKeepAliveOptions, KeepAlivePolicyFactory } from \"./KeepAlivePolicyFactory\";\nimport { LoggingPolicyFactory } from \"./LoggingPolicyFactory\";\nimport { IHttpClient, IHttpPipelineLogger, Pipeline } from \"./Pipeline\";\nimport { IRetryOptions, RetryPolicyFactory } from \"./RetryPolicyFactory\";\nimport { ITelemetryOptions, TelemetryPolicyFactory } from \"./TelemetryPolicyFactory\";\nimport { UniqueRequestIDPolicyFactory } from \"./UniqueRequestIDPolicyFactory\";\nimport { escapeURLPath } from \"./utils/utils.common\";\n\nexport { deserializationPolicy };\n\n/**\n * Option interface for Pipeline.newPipeline method.\n *\n * @export\n * @interface INewPipelineOptions\n */\nexport interface INewPipelineOptions {\n  /**\n   * Telemetry configures the built-in telemetry policy behavior.\n   *\n   * @type {ITelemetryOptions}\n   * @memberof INewPipelineOptions\n   */\n  telemetry?: ITelemetryOptions;\n\n  /**\n   * Retry options.\n   *\n   * @type {IRetryOptions}\n   * @memberof INewPipelineOptions\n   */\n  retryOptions?: IRetryOptions;\n\n  /**\n   * Keep alive configurations. Default keep-alive is enabled.\n   *\n   * @type {IKeepAliveOptions}\n   * @memberof INewPipelineOptions\n   */\n  keepAliveOptions?: IKeepAliveOptions;\n\n  logger?: IHttpPipelineLogger;\n  httpClient?: IHttpClient;\n}\n\n/**\n * A ServiceURL represents a based URL class for ServiceURL, ContainerURL and etc.\n *\n * @export\n * @class StorageURL\n */\nexport abstract class StorageURL {\n  /**\n   * A static method used to create a new Pipeline object with Credential provided.\n   *\n   * @static\n   * @param {Credential} credential Such as AnonymousCredential, SharedKeyCredential or TokenCredential.\n   * @param {INewPipelineOptions} [pipelineOptions] Optional. Options.\n   * @returns {Pipeline} A new Pipeline object.\n   * @memberof Pipeline\n   */\n  public static newPipeline(\n    credential: Credential,\n    pipelineOptions: INewPipelineOptions = {}\n  ): Pipeline {\n    // Order is important. Closer to the API at the top & closer to the network at the bottom.\n    // The credential's policy factory must appear close to the wire so it can sign any\n    // changes made by other factories (like UniqueRequestIDPolicyFactory)\n    const factories: RequestPolicyFactory[] = [\n      new KeepAlivePolicyFactory(pipelineOptions.keepAliveOptions),\n      new TelemetryPolicyFactory(pipelineOptions.telemetry),\n      new UniqueRequestIDPolicyFactory(),\n      new BrowserPolicyFactory(),\n      deserializationPolicy(), // Default deserializationPolicy is provided by protocol layer\n      new RetryPolicyFactory(pipelineOptions.retryOptions),\n      new LoggingPolicyFactory(),\n      credential\n    ];\n\n    return new Pipeline(factories, {\n      HTTPClient: pipelineOptions.httpClient,\n      logger: pipelineOptions.logger\n    });\n  }\n\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   * @type {Pipeline}\n   * @memberof StorageURL\n   */\n  public readonly pipeline: Pipeline;\n\n  /**\n   * Encoded URL string value.\n   *\n   * @type {string}\n   * @memberof StorageURL\n   */\n  public readonly url: string;\n\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   *\n   * @protected\n   * @type {StorageClient}\n   * @memberof StorageURL\n   */\n  protected readonly storageClientContext: StorageClientContext;\n\n  /**\n   * Creates an instance of StorageURL.\n   * @param {string} url\n   * @param {Pipeline} pipeline\n   * @memberof StorageURL\n   */\n  protected constructor(url: string, pipeline: Pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      this.url,\n      pipeline.toServiceClientOptions()\n    );\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n  }\n}\n","import { isNode, TransferProgressEvent } from \"@azure/ms-rest-js\";\n\nimport { Aborter } from \"./Aborter\";\nimport { BlobDownloadResponse } from \"./BlobDownloadResponse\";\nimport { ContainerURL } from \"./ContainerURL\";\nimport * as Models from \"./generated/src/models\";\nimport { Blob } from \"./generated/src/operations\";\nimport { rangeToString } from \"./IRange\";\nimport { IBlobAccessConditions, IMetadata } from \"./models\";\nimport { Pipeline } from \"./Pipeline\";\nimport { StorageURL } from \"./StorageURL\";\nimport { DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS, URLConstants } from \"./utils/constants\";\nimport { appendToURLPath, setURLParameter } from \"./utils/utils.common\";\n\nexport interface IBlobDownloadOptions {\n  snapshot?: string;\n  rangeGetContentMD5?: boolean;\n  blobAccessConditions?: IBlobAccessConditions;\n  progress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Optional. ONLY AVAILABLE IN NODE.JS.\n   *\n   * How many retries will perform when original body download stream unexpected ends.\n   * Above kind of ends will not trigger retry policy defined in a pipeline,\n   * because they doesn't emit network errors.\n   *\n   * With this option, every additional retry means an additional FileURL.download() request will be made\n   * from the broken point, until the requested range has been successfully downloaded or maxRetryRequests is reached.\n   *\n   * Default value is 5, please set a larger value when loading large files in poor network.\n   *\n   * @type {number}\n   * @memberof IBlobDownloadOptions\n   */\n  maxRetryRequests?: number;\n}\n\nexport interface IBlobGetPropertiesOptions {\n  blobAccessConditions?: IBlobAccessConditions;\n}\n\nexport interface IBlobDeleteOptions {\n  blobAccessConditions?: IBlobAccessConditions;\n  deleteSnapshots?: Models.DeleteSnapshotsOptionType;\n}\n\nexport interface IBlobSetHTTPHeadersOptions {\n  blobAccessConditions?: IBlobAccessConditions;\n}\n\nexport interface IBlobSetMetadataOptions {\n  blobAccessConditions?: IBlobAccessConditions;\n}\n\nexport interface IBlobAcquireLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IBlobReleaseLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IBlobRenewLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IBlobChangeLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IBlobBreakLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IBlobCreateSnapshotOptions {\n  metadata?: IMetadata;\n  blobAccessConditions?: IBlobAccessConditions;\n}\n\nexport interface IBlobStartCopyFromURLOptions {\n  metadata?: IMetadata;\n  blobAccessConditions?: IBlobAccessConditions;\n  sourceModifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IBlobAbortCopyFromURLOptions {\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\nexport interface IBlobSyncCopyFromURLOptions {\n  metadata?: IMetadata;\n  blobAccessConditions?: IBlobAccessConditions;\n  sourceModifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IBlobSetTierOptions {\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\n/**\n * A BlobURL represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n *\n * @export\n * @class BlobURL\n * @extends {StorageURL}\n */\nexport class BlobURL extends StorageURL {\n  /**\n   * Creates a BlobURL object from an ContainerURL object.\n   *\n   * @static\n   * @param {ContainerURL} containerURL A ContainerURL object\n   * @param {string} blobName A blob name\n   * @returns\n   * @memberof BlobURL\n   */\n  public static fromContainerURL(containerURL: ContainerURL, blobName: string) {\n    return new BlobURL(\n      appendToURLPath(containerURL.url, encodeURIComponent(blobName)),\n      containerURL.pipeline\n    );\n  }\n\n  /**\n   * blobContext provided by protocol layer.\n   *\n   * @private\n   * @type {Blobs}\n   * @memberof BlobURL\n   */\n  private blobContext: Blob;\n\n  /**\n   * Creates an instance of BlobURL.\n   * This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blob\".\n   *                     You can append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof BlobURL\n   */\n  constructor(url: string, pipeline: Pipeline) {\n    super(url, pipeline);\n    this.blobContext = new Blob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new BlobURL object identical to the source but with the\n   * specified request policy pipeline.\n   *\n   * @param {Pipeline} pipeline\n   * @returns {BlobURL}\n   * @memberof BlobURL\n   */\n  public withPipeline(pipeline: Pipeline): BlobURL {\n    return new BlobURL(this.url, pipeline);\n  }\n\n  /**\n   * Creates a new BlobURL object identical to the source but with the specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param {string} snapshot\n   * @returns {BlobURL} A new BlobURL object identical to the source but with the specified snapshot timestamp\n   * @memberof BlobURL\n   */\n  public withSnapshot(snapshot: string): BlobURL {\n    return new BlobURL(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Reads or downloads a blob from the system, including its metadata and properties.\n   * You can also call Get Blob to read a snapshot.\n   *\n   * * In Node.js, data returns in a Readable stream readableStreamBody\n   * * In browsers, data returns in a promise blobBody\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} offset From which position of the blob to download, >= 0\n   * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined\n   * @param {IBlobDownloadOptions} [options]\n   * @returns {Promise<Models.BlobDownloadResponse>}\n   * @memberof BlobURL\n   */\n  public async download(\n    aborter: Aborter,\n    offset: number,\n    count?: number,\n    options: IBlobDownloadOptions = {}\n  ): Promise<Models.BlobDownloadResponse> {\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    options.blobAccessConditions.modifiedAccessConditions =\n      options.blobAccessConditions.modifiedAccessConditions || {};\n\n    const res = await this.blobContext.download({\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions,\n      onDownloadProgress: isNode ? undefined : options.progress,\n      range: offset === 0 && !count ? undefined : rangeToString({ offset, count }),\n      rangeGetContentMD5: options.rangeGetContentMD5,\n      snapshot: options.snapshot\n    });\n\n    // Return browser response immediately\n    if (!isNode) {\n      return res;\n    }\n\n    // We support retrying when download stream unexpected ends in Node.js runtime\n    // Following code shouldn't be bundled into browser build, however some\n    // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n    // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n    // The config is in package.json \"browser\" field\n    if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n      // TODO: Default value or make it a required parameter?\n      options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n    }\n\n    if (res.contentLength === undefined) {\n      throw new RangeError(`File download response doesn't contain valid content length header`);\n    }\n\n    if (!res.eTag) {\n      throw new RangeError(`File download response doesn't contain valid etag header`);\n    }\n\n    return new BlobDownloadResponse(\n      aborter,\n      res,\n      async (start: number): Promise<NodeJS.ReadableStream> => {\n        const updatedOptions: Models.BlobDownloadOptionalParams = {\n          leaseAccessConditions: options.blobAccessConditions!.leaseAccessConditions,\n          modifiedAccessConditions: {\n            ifMatch: options.blobAccessConditions!.modifiedAccessConditions!.ifMatch || res.eTag,\n            ifModifiedSince: options.blobAccessConditions!.modifiedAccessConditions!\n              .ifModifiedSince,\n            ifNoneMatch: options.blobAccessConditions!.modifiedAccessConditions!.ifNoneMatch,\n            ifUnmodifiedSince: options.blobAccessConditions!.modifiedAccessConditions!\n              .ifUnmodifiedSince\n          },\n          range: rangeToString({\n            count: offset + res.contentLength! - start,\n            offset: start\n          }),\n          snapshot: options.snapshot\n        };\n\n        // Debug purpose only\n        // console.log(\n        //   `Read from internal stream, range: ${\n        //     updatedOptions.range\n        //   }, options: ${JSON.stringify(updatedOptions)}`\n        // );\n\n        return (await this.blobContext.download({\n          abortSignal: aborter,\n          ...updatedOptions\n        })).readableStreamBody!;\n      },\n      offset,\n      res.contentLength!,\n      {\n        maxRetryRequests: options.maxRetryRequests,\n        progress: options.progress\n      }\n    );\n  }\n\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties\n   * for the blob. It does not return the content of the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IBlobGetPropertiesOptions} [options]\n   * @returns {Promise<Models.BlobGetPropertiesResponse>}\n   * @memberof BlobURL\n   */\n  public async getProperties(\n    aborter: Aborter,\n    options: IBlobGetPropertiesOptions = {}\n  ): Promise<Models.BlobGetPropertiesResponse> {\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.getProperties({\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Marks the specified blob or snapshot for deletion. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IBlobDeleteOptions} [options]\n   * @returns {Promise<Models.BlobDeleteResponse>}\n   * @memberof BlobURL\n   */\n  public async delete(\n    aborter: Aborter,\n    options: IBlobDeleteOptions = {}\n  ): Promise<Models.BlobDeleteResponse> {\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.deleteMethod({\n      abortSignal: aborter,\n      deleteSnapshots: options.deleteSnapshots,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Restores the contents and metadata of soft deleted blob and any associated\n   * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n   * or later.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @returns {Promise<Models.BlobUndeleteResponse>}\n   * @memberof BlobURL\n   */\n  public async undelete(aborter: Aborter): Promise<Models.BlobUndeleteResponse> {\n    return this.blobContext.undelete({\n      abortSignal: aborter\n    });\n  }\n\n  /**\n   * Sets system properties on the blob.\n   *\n   * If no value provided, or no value provided for the specificed blob HTTP headers,\n   * these blob HTTP headers without a value will be cleared.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {Models.BlobHTTPHeaders} [blobHTTPHeaders] If no value provided, or no value provided for\n   *                                                   the specificed blob HTTP headers, these blob HTTP\n   *                                                   headers without a value will be cleared.\n   * @param {IBlobSetHTTPHeadersOptions} [options]\n   * @returns {Promise<Models.BlobSetHTTPHeadersResponse>}\n   * @memberof BlobURL\n   */\n  public async setHTTPHeaders(\n    aborter: Aborter,\n    blobHTTPHeaders?: Models.BlobHTTPHeaders,\n    options: IBlobSetHTTPHeadersOptions = {}\n  ): Promise<Models.BlobSetHTTPHeadersResponse> {\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.setHTTPHeaders({\n      abortSignal: aborter,\n      blobHTTPHeaders,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n   *\n   * If no option provided, or no metadata defined in the parameter, the blob\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IMetadata} [metadata] Replace existing metadata with this value.\n   *                               If no value provided the existing metadata will be removed.\n   * @param {IBlobSetMetadataOptions} [options]\n   * @returns {Promise<Models.BlobSetMetadataResponse>}\n   * @memberof BlobURL\n   */\n  public async setMetadata(\n    aborter: Aborter,\n    metadata?: IMetadata,\n    options: IBlobSetMetadataOptions = {}\n  ): Promise<Models.BlobSetMetadataResponse> {\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.setMetadata({\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      metadata,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Establishes and manages a lock on a blob for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * In versions prior to 2012-02-12, the lock duration is 60 seconds.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} proposedLeaseId Can be specified in any valid GUID string format\n   * @param {number} duration The lock duration can be 15 to 60 seconds, or can be infinite\n   * @param {IBlobAcquireLeaseOptions} [options]\n   * @returns {Promise<Models.BlobAcquireLeaseResponse>}\n   * @memberof BlobURL\n   */\n  public async acquireLease(\n    aborter: Aborter,\n    proposedLeaseId: string,\n    duration: number,\n    options: IBlobAcquireLeaseOptions = {}\n  ): Promise<Models.BlobAcquireLeaseResponse> {\n    return this.blobContext.acquireLease({\n      abortSignal: aborter,\n      duration,\n      modifiedAccessConditions: options.modifiedAccessConditions,\n      proposedLeaseId\n    });\n  }\n\n  /**\n   * To free the lease if it is no longer needed so that another client may immediately\n   * acquire a lease against the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} leaseId\n   * @param {IBlobReleaseLeaseOptions} [options]\n   * @returns {Promise<Models.BlobReleaseLeaseResponse>}\n   * @memberof BlobURL\n   */\n  public async releaseLease(\n    aborter: Aborter,\n    leaseId: string,\n    options: IBlobReleaseLeaseOptions = {}\n  ): Promise<Models.BlobReleaseLeaseResponse> {\n    return this.blobContext.releaseLease(leaseId, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * To renew an existing lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} leaseId\n   * @param {IBlobRenewLeaseOptions} [options]\n   * @returns {Promise<Models.BlobRenewLeaseResponse>}\n   * @memberof BlobURL\n   */\n  public async renewLease(\n    aborter: Aborter,\n    leaseId: string,\n    options: IBlobRenewLeaseOptions = {}\n  ): Promise<Models.BlobRenewLeaseResponse> {\n    return this.blobContext.renewLease(leaseId, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * To change the ID of an existing lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} leaseId\n   * @param {string} proposedLeaseId\n   * @param {IBlobChangeLeaseOptions} [options]\n   * @returns {Promise<Models.BlobChangeLeaseResponse>}\n   * @memberof BlobURL\n   */\n  public async changeLease(\n    aborter: Aborter,\n    leaseId: string,\n    proposedLeaseId: string,\n    options: IBlobChangeLeaseOptions = {}\n  ): Promise<Models.BlobChangeLeaseResponse> {\n    return this.blobContext.changeLease(leaseId, proposedLeaseId, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} [breakPeriod]\n   * @param {IBlobBreakLeaseOptions} [options]\n   * @returns {Promise<Models.BlobBreakLeaseResponse>}\n   * @memberof BlobURL\n   */\n  public async breakLease(\n    aborter: Aborter,\n    breakPeriod?: number,\n    options: IBlobBreakLeaseOptions = {}\n  ): Promise<Models.BlobBreakLeaseResponse> {\n    return this.blobContext.breakLease({\n      abortSignal: aborter,\n      breakPeriod,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Creates a read-only snapshot of a blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IBlobCreateSnapshotOptions} [options]\n   * @returns {Promise<Models.BlobCreateSnapshotResponse>}\n   * @memberof BlobURL\n   */\n  public async createSnapshot(\n    aborter: Aborter,\n    options: IBlobCreateSnapshotOptions = {}\n  ): Promise<Models.BlobCreateSnapshotResponse> {\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.createSnapshot({\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Asynchronously copies a blob to a destination within the storage account.\n   * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n   * a committed blob in any Azure storage account.\n   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n   * an Azure file in any Azure storage account.\n   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n   * operation to copy from another storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} copySource\n   * @param {IBlobStartCopyFromURLOptions} [options]\n   * @returns {Promise<Models.BlobStartCopyFromURLResponse>}\n   * @memberof BlobURL\n   */\n  public async startCopyFromURL(\n    aborter: Aborter,\n    copySource: string,\n    options: IBlobStartCopyFromURLOptions = {}\n  ): Promise<Models.BlobStartCopyFromURLResponse> {\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    options.sourceModifiedAccessConditions = options.sourceModifiedAccessConditions || {};\n\n    return this.blobContext.startCopyFromURL(copySource, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions,\n      sourceModifiedAccessConditions: {\n        sourceIfMatch: options.sourceModifiedAccessConditions.ifMatch,\n        sourceIfModifiedSince: options.sourceModifiedAccessConditions.ifModifiedSince,\n        sourceIfNoneMatch: options.sourceModifiedAccessConditions.ifNoneMatch,\n        sourceIfUnmodifiedSince: options.sourceModifiedAccessConditions.ifUnmodifiedSince\n      }\n    });\n  }\n\n  /**\n   * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero\n   * length and full metadata. Version 2012-02-12 and newer.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} copyId\n   * @param {IBlobAbortCopyFromURLOptions} [options]\n   * @returns {Promise<Models.BlobAbortCopyFromURLResponse>}\n   * @memberof BlobURL\n   */\n  public async abortCopyFromURL(\n    aborter: Aborter,\n    copyId: string,\n    options: IBlobAbortCopyFromURLOptions = {}\n  ): Promise<Models.BlobAbortCopyFromURLResponse> {\n    return this.blobContext.abortCopyFromURL(copyId, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions\n    });\n  }\n\n  /**\n   * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n   * return a response until the copy is complete.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} copySource The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication\n   * @param {IBlobSyncCopyFromURLOptions} [options={}]\n   * @returns {Promise<Models.BlobCopyFromURLResponse>}\n   * @memberof BlobURL\n   */\n  public async syncCopyFromURL(\n    aborter: Aborter,\n    copySource: string,\n    options: IBlobSyncCopyFromURLOptions = {}\n  ): Promise<Models.BlobCopyFromURLResponse> {\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    options.sourceModifiedAccessConditions = options.sourceModifiedAccessConditions || {};\n\n    return this.blobContext.copyFromURL(copySource, {\n      abortSignal: aborter,\n      metadata: options.metadata,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions,\n      sourceModifiedAccessConditions: {\n        sourceIfMatch: options.sourceModifiedAccessConditions.ifMatch,\n        sourceIfModifiedSince: options.sourceModifiedAccessConditions.ifModifiedSince,\n        sourceIfNoneMatch: options.sourceModifiedAccessConditions.ifNoneMatch,\n        sourceIfUnmodifiedSince: options.sourceModifiedAccessConditions.ifUnmodifiedSince\n      }\n    });\n  }\n\n  /**\n   * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {Models.AccessTier} tier\n   * @param {IBlobSetTierOptions} [options]\n   * @returns {Promise<Models.BlobsSetTierResponse>}\n   * @memberof BlobURL\n   */\n  public async setTier(\n    aborter: Aborter,\n    tier: Models.AccessTier,\n    options: IBlobSetTierOptions = {}\n  ): Promise<Models.BlobSetTierResponse> {\n    return await this.blobContext.setTier(tier, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions\n    });\n  }\n}\n","// This file is used as a shim of \"BlobDownloadResponse\" for some browser bundlers\n// when trying to bundle \"BlobDownloadResponse\"\n// \"BlobDownloadResponse\" class is only available in Node.js runtime\nexport const BlobDownloadResponse = 1;\n","import { HttpRequestBody, TransferProgressEvent } from \"@azure/ms-rest-js\";\n\nimport { Aborter } from \"./Aborter\";\nimport { BlobURL } from \"./BlobURL\";\nimport { ContainerURL } from \"./ContainerURL\";\nimport * as Models from \"./generated/src/models\";\nimport { AppendBlob } from \"./generated/src/operations\";\nimport { rangeToString } from \"./IRange\";\nimport { IAppendBlobAccessConditions, IBlobAccessConditions, IMetadata } from \"./models\";\nimport { Pipeline } from \"./Pipeline\";\nimport { URLConstants } from \"./utils/constants\";\nimport { appendToURLPath, setURLParameter } from \"./utils/utils.common\";\n\nexport interface IAppendBlobCreateOptions {\n  accessConditions?: IBlobAccessConditions;\n  blobHTTPHeaders?: Models.BlobHTTPHeaders;\n  metadata?: IMetadata;\n}\n\nexport interface IAppendBlobAppendBlockOptions {\n  accessConditions?: IAppendBlobAccessConditions;\n  progress?: (progress: TransferProgressEvent) => void;\n  transactionalContentMD5?: Uint8Array;\n}\n\nexport interface IAppendBlobAppendBlockFromURLOptions {\n  accessConditions?: IAppendBlobAccessConditions;\n  sourceModifiedAccessConditions?: Models.ModifiedAccessConditions;\n  sourceContentMD5?: Uint8Array;\n}\n\n/**\n * AppendBlobURL defines a set of operations applicable to append blobs.\n *\n * @export\n * @class AppendBlobURL\n * @extends {StorageURL}\n */\nexport class AppendBlobURL extends BlobURL {\n  /**\n   * Creates a AppendBlobURL object from ContainerURL instance.\n   *\n   * @static\n   * @param {ContainerURL} containerURL A ContainerURL object\n   * @param {string} blobName An append blob name\n   * @returns {AppendBlobURL}\n   * @memberof AppendBlobURL\n   */\n  public static fromContainerURL(containerURL: ContainerURL, blobName: string): AppendBlobURL {\n    return new AppendBlobURL(\n      appendToURLPath(containerURL.url, encodeURIComponent(blobName)),\n      containerURL.pipeline\n    );\n  }\n\n  /**\n   * Creates a AppendBlobURL object from BlobURL instance.\n   *\n   * @static\n   * @param {BlobURL} blobURL\n   * @returns {AppendBlobURL}\n   * @memberof AppendBlobURL\n   */\n  public static fromBlobURL(blobURL: BlobURL): AppendBlobURL {\n    return new AppendBlobURL(blobURL.url, blobURL.pipeline);\n  }\n\n  /**\n   * appendBlobsContext provided by protocol layer.\n   *\n   * @private\n   * @type {AppendBlobs}\n   * @memberof AppendBlobURL\n   */\n  private appendBlobContext: AppendBlob;\n\n  /**\n   * Creates an instance of AppendBlobURL.\n   * This method accepts an encoded URL or non-encoded URL pointing to an append blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage append blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof AppendBlobURL\n   */\n  constructor(url: string, pipeline: Pipeline) {\n    super(url, pipeline);\n    this.appendBlobContext = new AppendBlob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new AppendBlobURL object identical to the source but with the\n   * specified request policy pipeline.\n   *\n   * @param {Pipeline} pipeline\n   * @returns {AppendBlobURL}\n   * @memberof AppendBlobURL\n   */\n  public withPipeline(pipeline: Pipeline): AppendBlobURL {\n    return new AppendBlobURL(this.url, pipeline);\n  }\n\n  /**\n   * Creates a new AppendBlobURL object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param {string} snapshot\n   * @returns {AppendBlobURL}\n   * @memberof AppendBlobURL\n   */\n  public withSnapshot(snapshot: string): AppendBlobURL {\n    return new AppendBlobURL(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IAppendBlobCreateOptions} [options]\n   * @returns {Promise<Models.AppendBlobsCreateResponse>}\n   * @memberof AppendBlobURL\n   */\n  public async create(\n    aborter: Aborter,\n    options: IAppendBlobCreateOptions = {}\n  ): Promise<Models.AppendBlobCreateResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.appendBlobContext.create(0, {\n      abortSignal: aborter,\n      blobHTTPHeaders: options.blobHTTPHeaders,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Commits a new block of data to the end of the existing append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {HttpRequestBody} body\n   * @param {number} contentLength Length of the body in bytes\n   * @param {IAppendBlobAppendBlockOptions} [options]\n   * @returns {Promise<Models.AppendBlobsAppendBlockResponse>}\n   * @memberof AppendBlobURL\n   */\n  public async appendBlock(\n    aborter: Aborter,\n    body: HttpRequestBody,\n    contentLength: number,\n    options: IAppendBlobAppendBlockOptions = {}\n  ): Promise<Models.AppendBlobAppendBlockResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.appendBlobContext.appendBlock(body, contentLength, {\n      abortSignal: aborter,\n      appendPositionAccessConditions: options.accessConditions.appendPositionAccessConditions,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      onUploadProgress: options.progress,\n      transactionalContentMD5: options.transactionalContentMD5\n    });\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob\n   * where the contents are read from a source url.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} sourceURL \n   *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can\n   *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n   *                 must either be public or must be authenticated via a shared access signature. If the source blob is\n   *                 public, no authentication is required to perform the operation.\n   * @param {number} sourceOffset Offset in source to be appended\n   * @param {number} count Number of bytes to be appended as a block\n   * @param {IAppendBlobAppendBlockFromURLOptions} [options={}]\n   * @returns {Promise<Models.AppendBlobAppendBlockFromUrlResponse>}\n   * @memberof AppendBlobURL\n   */\n  public async appendBlockFromURL(\n    aborter: Aborter,\n    sourceURL: string,\n    sourceOffset: number,\n    count: number,\n    options: IAppendBlobAppendBlockFromURLOptions = {}\n  ): Promise<Models.AppendBlobAppendBlockFromUrlResponse> {\n    options.accessConditions = options.accessConditions || {};\n    options.sourceModifiedAccessConditions = options.sourceModifiedAccessConditions || {};\n    \n    return this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {\n      abortSignal: aborter,\n      sourceRange: rangeToString({offset: sourceOffset, count}),\n      sourceContentMD5: options.sourceContentMD5,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      appendPositionAccessConditions: options.accessConditions.appendPositionAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      sourceModifiedAccessConditions: {\n        sourceIfMatch: options.sourceModifiedAccessConditions.ifMatch,\n        sourceIfModifiedSince: options.sourceModifiedAccessConditions.ifModifiedSince,\n        sourceIfNoneMatch: options.sourceModifiedAccessConditions.ifNoneMatch,\n        sourceIfUnmodifiedSince: options.sourceModifiedAccessConditions.ifUnmodifiedSince\n      }\n    })\n  }\n}\n","import { HttpRequestBody, TransferProgressEvent } from \"@azure/ms-rest-js\";\n\nimport { Aborter } from \"./Aborter\";\nimport { BlobURL } from \"./BlobURL\";\nimport { ContainerURL } from \"./ContainerURL\";\nimport * as Models from \"./generated/src/models\";\nimport { BlockBlob } from \"./generated/src/operations\";\nimport { IRange, rangeToString } from \"./IRange\";\nimport { IBlobAccessConditions, IMetadata } from \"./models\";\nimport { Pipeline } from \"./Pipeline\";\nimport { URLConstants } from \"./utils/constants\";\nimport { appendToURLPath, setURLParameter } from \"./utils/utils.common\";\n\nexport interface IBlockBlobUploadOptions {\n  accessConditions?: IBlobAccessConditions;\n  blobHTTPHeaders?: Models.BlobHTTPHeaders;\n  metadata?: IMetadata;\n  progress?: (progress: TransferProgressEvent) => void;\n}\n\nexport interface IBlockBlobStageBlockOptions {\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n  progress?: (progress: TransferProgressEvent) => void;\n  transactionalContentMD5?: Uint8Array;\n}\n\nexport interface IBlockBlobStageBlockFromURLOptions {\n  range?: IRange;\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n  sourceContentMD5?: Uint8Array;\n}\n\nexport interface IBlockBlobCommitBlockListOptions {\n  accessConditions?: IBlobAccessConditions;\n  blobHTTPHeaders?: Models.BlobHTTPHeaders;\n  metadata?: IMetadata;\n}\n\nexport interface IBlockBlobGetBlockListOptions {\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\n/**\n * BlockBlobURL defines a set of operations applicable to block blobs.\n *\n * @export\n * @class BlockBlobURL\n * @extends {StorageURL}\n */\nexport class BlockBlobURL extends BlobURL {\n  /**\n   * Creates a BlockBlobURL object from ContainerURL instance.\n   *\n   * @static\n   * @param {ContainerURL} containerURL A ContainerURL object\n   * @param {string} blobName A block blob name\n   * @returns {BlockBlobURL}\n   * @memberof BlockBlobURL\n   */\n  public static fromContainerURL(containerURL: ContainerURL, blobName: string): BlockBlobURL {\n    return new BlockBlobURL(\n      appendToURLPath(containerURL.url, encodeURIComponent(blobName)),\n      containerURL.pipeline\n    );\n  }\n\n  /**\n   * Creates a BlockBlobURL object from BlobURL instance.\n   *\n   * @static\n   * @param {BlobURL} blobURL\n   * @returns {BlockBlobURL}\n   * @memberof BlockBlobURL\n   */\n  public static fromBlobURL(blobURL: BlobURL): BlockBlobURL {\n    return new BlockBlobURL(blobURL.url, blobURL.pipeline);\n  }\n\n  /**\n   * blockBlobContext provided by protocol layer.\n   *\n   * @private\n   * @type {BlockBlobs}\n   * @memberof BlockBlobURL\n   */\n  private blockBlobContext: BlockBlob;\n\n  /**\n   * Creates an instance of BlockBlobURL.\n   * This method accepts an encoded URL or non-encoded URL pointing to a block blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage block blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof BlockBlobURL\n   */\n  constructor(url: string, pipeline: Pipeline) {\n    super(url, pipeline);\n    this.blockBlobContext = new BlockBlob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new BlockBlobURL object identical to the source but with the\n   * specified request policy pipeline.\n   *\n   * @param {Pipeline} pipeline\n   * @returns {BlockBlobURL}\n   * @memberof BlockBlobURL\n   */\n  public withPipeline(pipeline: Pipeline): BlockBlobURL {\n    return new BlockBlobURL(this.url, pipeline);\n  }\n\n  /**\n   * Creates a new BlockBlobURL object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param {string} snapshot\n   * @returns {BlockBlobURL}\n   * @memberof BlockBlobURL\n   */\n  public withSnapshot(snapshot: string): BlockBlobURL {\n    return new BlockBlobURL(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a new block blob, or updates the content of an existing block blob.\n   * Updating an existing block blob overwrites any existing metadata on the blob.\n   * Partial updates are not supported; the content of the existing blob is\n   * overwritten with the new content. To perform a partial update of a block blob's,\n   * use stageBlock and commitBlockList.\n   *\n   * This is a non-parallel uploading method, please use uploadFileToBlockBlob(),\n   * uploadStreamToBlockBlob() or uploadBrowserDataToBlockBlob() for better performance\n   * with concurrency uploading.\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param {IBlockBlobUploadOptions} [options]\n   * @returns {Promise<Models.BlockBlobUploadResponse>}\n   * @memberof BlockBlobURL\n   */\n  public async upload(\n    aborter: Aborter,\n    body: HttpRequestBody,\n    contentLength: number,\n    options: IBlockBlobUploadOptions = {}\n  ): Promise<Models.BlockBlobUploadResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.blockBlobContext.upload(body, contentLength, {\n      abortSignal: aborter,\n      blobHTTPHeaders: options.blobHTTPHeaders,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      onUploadProgress: options.progress\n    });\n  }\n\n  /**\n   * Uploads the specified block to the block blob's \"staging area\" to be later\n   * committed by a call to commitBlockList.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} blockId A 64-byte value that is base64-encoded\n   * @param {HttpRequestBody} body\n   * @param {number} contentLength\n   * @param {IBlockBlobStageBlockOptions} [options]\n   * @returns {Promise<Models.BlockBlobStageBlockResponse>}\n   * @memberof BlockBlobURL\n   */\n  public async stageBlock(\n    aborter: Aborter,\n    blockId: string,\n    body: HttpRequestBody,\n    contentLength: number,\n    options: IBlockBlobStageBlockOptions = {}\n  ): Promise<Models.BlockBlobStageBlockResponse> {\n    return this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions,\n      onUploadProgress: options.progress,\n      transactionalContentMD5: options.transactionalContentMD5\n    });\n  }\n\n  /**\n   * The Stage Block From URL operation creates a new block to be committed as part\n   * of a blob where the contents are read from a URL.\n   * This API is available starting in version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} blockId A 64-byte value that is base64-encoded\n   * @param {string} sourceURL Specifies the URL of the blob. The value\n   *                           may be a URL of up to 2 KB in length that specifies a blob.\n   *                           The value should be URL-encoded as it would appear\n   *                           in a request URI. The source blob must either be public\n   *                           or must be authenticated via a shared access signature.\n   *                           If the source blob is public, no authentication is required\n   *                           to perform the operation. Here are some examples of source object URLs:\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param {number} offset From which position of the blob to download, >= 0\n   * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined\n   * @param {IBlockBlobStageBlockFromURLOptions} [options={}]\n   * @returns {Promise<Models.BlockBlobStageBlockFromURLResponse>}\n   * @memberof BlockBlobURL\n   */\n  public async stageBlockFromURL(\n    aborter: Aborter,\n    blockId: string,\n    sourceURL: string,\n    offset: number,\n    count?: number,\n    options: IBlockBlobStageBlockFromURLOptions = {}\n  ): Promise<Models.BlockBlobStageBlockFromURLResponse> {\n    return this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions,\n      sourceContentMD5: options.sourceContentMD5,\n      sourceRange: offset === 0 && !count ? undefined : rangeToString({ offset, count })\n    });\n  }\n\n  /**\n   * Writes a blob by specifying the list of block IDs that make up the blob.\n   * In order to be written as part of a blob, a block must have been successfully written\n   * to the server in a prior stageBlock operation. You can call commitBlockList to update a blob\n   * by uploading only those blocks that have changed, then committing the new and existing\n   * blocks together. Any blocks not specified in the block list and permanently deleted.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string[]} blocks  Array of 64-byte value that is base64-encoded\n   * @param {IBlockBlobCommitBlockListOptions} [options]\n   * @returns {Promise<Models.BlockBlobCommitBlockListResponse>}\n   * @memberof BlockBlobURL\n   */\n  public async commitBlockList(\n    aborter: Aborter,\n    blocks: string[],\n    options: IBlockBlobCommitBlockListOptions = {}\n  ): Promise<Models.BlockBlobCommitBlockListResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.blockBlobContext.commitBlockList(\n      { latest: blocks },\n      {\n        abortSignal: aborter,\n        blobHTTPHeaders: options.blobHTTPHeaders,\n        leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n        metadata: options.metadata,\n        modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n      }\n    );\n  }\n\n  /**\n   * Returns the list of blocks that have been uploaded as part of a block blob\n   * using the specified block list filter.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {Models.BlockListType} listType\n   * @param {IBlockBlobGetBlockListOptions} [options]\n   * @returns {Promise<Models.BlockBlobGetBlockListResponse>}\n   * @memberof BlockBlobURL\n   */\n  public async getBlockList(\n    aborter: Aborter,\n    listType: Models.BlockListType,\n    options: IBlockBlobGetBlockListOptions = {}\n  ): Promise<Models.BlockBlobGetBlockListResponse> {\n    const res = await this.blockBlobContext.getBlockList(listType, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions\n    });\n\n    if (!res.committedBlocks) {\n      res.committedBlocks = [];\n    }\n\n    if (!res.uncommittedBlocks) {\n      res.uncommittedBlocks = [];\n    }\n\n    return res;\n  }\n}\n","import { HttpResponse } from \"@azure/ms-rest-js\";\n\nimport { Aborter } from \"./Aborter\";\nimport * as Models from \"./generated/src/models\";\nimport { Container } from \"./generated/src/operations\";\nimport { IContainerAccessConditions, IMetadata } from \"./models\";\nimport { Pipeline } from \"./Pipeline\";\nimport { ServiceURL } from \"./ServiceURL\";\nimport { StorageURL } from \"./StorageURL\";\nimport { ETagNone } from \"./utils/constants\";\nimport { appendToURLPath, truncatedISO8061Date } from \"./utils/utils.common\";\n\nexport interface IContainerCreateOptions {\n  metadata?: IMetadata;\n  access?: Models.PublicAccessType;\n}\n\nexport interface IContainerGetPropertiesOptions {\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\nexport interface IContainerDeleteMethodOptions {\n  containerAccessConditions?: IContainerAccessConditions;\n}\n\nexport interface IContainerSetMetadataOptions {\n  containerAccessConditions?: IContainerAccessConditions;\n}\n\nexport interface IContainerGetAccessPolicyOptions {\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\nexport interface ISignedIdentifier {\n  /**\n   * @member {string} id a unique id\n   */\n  id: string;\n  /**\n   * @member {AccessPolicy} accessPolicy\n   */\n  accessPolicy: {\n    /**\n     * @member {Date} start Optional. The date-time the policy is active\n     */\n    start?: Date;\n    /**\n     * @member {string} expiry Optional. The date-time the policy expires\n     */\n    expiry?: Date;\n    /**\n     * @member {string} permission The permissions for the acl policy\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n     */\n    permission: string;\n  };\n}\n\nexport declare type ContainerGetAccessPolicyResponse = {\n  signedIdentifiers: ISignedIdentifier[];\n} & Models.ContainerGetAccessPolicyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: Models.ContainerGetAccessPolicyHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Models.SignedIdentifier[];\n    };\n  };\n\nexport interface IContainerSetAccessPolicyOptions {\n  containerAccessConditions?: IContainerAccessConditions;\n}\n\nexport interface IContainerAcquireLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IContainerReleaseLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IContainerRenewLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IContainerBreakLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IContainerChangeLeaseOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\nexport interface IContainerListBlobsSegmentOptions {\n  /**\n   * @member {string} [prefix] Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * @member {number} [maxresults] Specifies the maximum number of containers\n   * to return. If the request does not specify maxresults, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxresults, or than the default of 5000.\n   */\n  maxresults?: number;\n  /**\n   * @member {ListBlobsIncludeItem[]} [include] Include this parameter to\n   * specify one or more datasets to include in the response.\n   */\n  include?: Models.ListBlobsIncludeItem[];\n}\n\n/**\n * A ContainerURL represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n *\n * @export\n * @class ContainerURL\n * @extends {StorageURL}\n */\nexport class ContainerURL extends StorageURL {\n  /**\n   * Creates a ContainerURL object from ServiceURL\n   *\n   * @param serviceURL A ServiceURL object\n   * @param containerName A container name\n   */\n  public static fromServiceURL(serviceURL: ServiceURL, containerName: string): ContainerURL {\n    return new ContainerURL(\n      appendToURLPath(serviceURL.url, encodeURIComponent(containerName)),\n      serviceURL.pipeline\n    );\n  }\n\n  /**\n   * containerContext provided by protocol layer.\n   *\n   * @private\n   * @type {Containers}\n   * @memberof ContainerURL\n   */\n  private containerContext: Container;\n\n  /**\n   * Creates an instance of ContainerURL.\n   * @param {string} url A URL string pointing to Azure Storage blob container, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer?sasString\".\n   * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof ContainerURL\n   */\n  constructor(url: string, pipeline: Pipeline) {\n    super(url, pipeline);\n    this.containerContext = new Container(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new ContainerURL object identical to the source but with the\n   * specified request policy pipeline.\n   *\n   * @param {Pipeline} pipeline\n   * @returns {ContainerURL}\n   * @memberof ContainerURL\n   */\n  public withPipeline(pipeline: Pipeline): ContainerURL {\n    return new ContainerURL(this.url, pipeline);\n  }\n\n  /**\n   * Creates a new container under the specified account. If the container with\n   * the same name already exists, the operation fails.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IContainerCreateOptions} [options]\n   * @returns {Promise<Models.ContainerCreateResponse>}\n   * @memberof ContainerURL\n   */\n  public async create(\n    aborter: Aborter,\n    options: IContainerCreateOptions = {}\n  ): Promise<Models.ContainerCreateResponse> {\n    // Spread operator in destructuring assignments,\n    // this will filter out unwanted properties from the response object into result object\n    return this.containerContext.create({\n      ...options,\n      abortSignal: aborter\n    });\n  }\n\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * container. The data returned does not include the container's list of blobs.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IContainersGetPropertiesOptions} [options]\n   * @returns {Promise<Models.ContainerGetPropertiesResponse>}\n   * @memberof ContainerURL\n   */\n  public async getProperties(\n    aborter: Aborter,\n    options: IContainerGetPropertiesOptions = {}\n  ): Promise<Models.ContainerGetPropertiesResponse> {\n    if (!options.leaseAccessConditions) {\n      options.leaseAccessConditions = {};\n    }\n\n    return this.containerContext.getProperties({\n      abortSignal: aborter,\n      ...options.leaseAccessConditions\n    });\n  }\n\n  /**\n   * Marks the specified container for deletion. The container and any blobs\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {Models.ContainersDeleteMethodOptionalParams} [options]\n   * @returns {Promise<Models.ContainerDeleteResponse>}\n   * @memberof ContainerURL\n   */\n  public async delete(\n    aborter: Aborter,\n    options: IContainerDeleteMethodOptions = {}\n  ): Promise<Models.ContainerDeleteResponse> {\n    if (!options.containerAccessConditions) {\n      options.containerAccessConditions = {};\n    }\n\n    if (!options.containerAccessConditions.modifiedAccessConditions) {\n      options.containerAccessConditions.modifiedAccessConditions = {};\n    }\n\n    if (!options.containerAccessConditions.leaseAccessConditions) {\n      options.containerAccessConditions.leaseAccessConditions = {};\n    }\n\n    if (\n      (options.containerAccessConditions.modifiedAccessConditions.ifMatch &&\n        options.containerAccessConditions.modifiedAccessConditions.ifMatch !== ETagNone) ||\n      (options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch &&\n        options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch !== ETagNone)\n    ) {\n      throw new RangeError(\n        \"the IfMatch and IfNoneMatch access conditions must have their default\\\n        values because they are ignored by the service\"\n      );\n    }\n\n    return this.containerContext.deleteMethod({\n      abortSignal: aborter,\n      leaseAccessConditions: options.containerAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.containerAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified container.\n   *\n   * If no option provided, or no metadata defined in the parameter, the container\n   * metadata will be removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IMetadata} [metadata] Replace existing metadata with this value.\n   *                               If no value provided the existing metadata will be removed.\n   * @param {IContainerSetMetadataOptions} [options]\n   * @returns {Promise<Models.ContainerSetMetadataResponse>}\n   * @memberof ContainerURL\n   */\n  public async setMetadata(\n    aborter: Aborter,\n    metadata?: IMetadata,\n    options: IContainerSetMetadataOptions = {}\n  ): Promise<Models.ContainerSetMetadataResponse> {\n    if (!options.containerAccessConditions) {\n      options.containerAccessConditions = {};\n    }\n\n    if (!options.containerAccessConditions.modifiedAccessConditions) {\n      options.containerAccessConditions.modifiedAccessConditions = {};\n    }\n\n    if (!options.containerAccessConditions.leaseAccessConditions) {\n      options.containerAccessConditions.leaseAccessConditions = {};\n    }\n\n    if (\n      options.containerAccessConditions.modifiedAccessConditions.ifUnmodifiedSince ||\n      (options.containerAccessConditions.modifiedAccessConditions.ifMatch &&\n        options.containerAccessConditions.modifiedAccessConditions.ifMatch !== ETagNone) ||\n      (options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch &&\n        options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch !== ETagNone)\n    ) {\n      throw new RangeError(\n        \"the IfUnmodifiedSince, IfMatch, and IfNoneMatch must have their default values\\\n        because they are ignored by the blob service\"\n      );\n    }\n\n    return this.containerContext.setMetadata({\n      abortSignal: aborter,\n      leaseAccessConditions: options.containerAccessConditions.leaseAccessConditions,\n      metadata,\n      modifiedAccessConditions: options.containerAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Gets the permissions for the specified container. The permissions indicate\n   * whether container data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potential lost precision when parsing start and expiry string.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IContainerGetAccessPolicyOptions} [options]\n   * @returns {Promise<ContainerGetAccessPolicyResponse>}\n   * @memberof ContainerURL\n   */\n  public async getAccessPolicy(\n    aborter: Aborter,\n    options: IContainerGetAccessPolicyOptions = {}\n  ): Promise<ContainerGetAccessPolicyResponse> {\n    if (!options.leaseAccessConditions) {\n      options.leaseAccessConditions = {};\n    }\n\n    const response = await this.containerContext.getAccessPolicy({\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions\n    });\n\n    const res: ContainerGetAccessPolicyResponse = {\n      _response: response._response,\n      blobPublicAccess: response.blobPublicAccess,\n      date: response.date,\n      eTag: response.eTag,\n      errorCode: response.errorCode,\n      lastModified: response.lastModified,\n      requestId: response.requestId,\n      signedIdentifiers: [],\n      version: response.version\n    };\n\n    for (const identifier of response) {\n      const accessPolicy: any = {\n        permission: identifier.accessPolicy.permission,\n      };\n\n      if (identifier.accessPolicy.expiry) {\n        accessPolicy.expiry = new Date(identifier.accessPolicy.expiry);\n      }\n\n      if (identifier.accessPolicy.start) {\n        accessPolicy.start = new Date(identifier.accessPolicy.start);\n      }\n\n      res.signedIdentifiers.push({\n        accessPolicy,\n        id: identifier.id\n      });\n    }\n\n    return res;\n  }\n\n  /**\n   * Sets the permissions for the specified container. The permissions indicate\n   * whether blobs in a container may be accessed publicly.\n   *\n   * When you set permissions for a container, the existing permissions are replaced.\n   * If no access or containerAcl provided, the existing container ACL will be\n   * removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {PublicAccessType} [access]\n   * @param {ISignedIdentifier[]} [containerAcl]\n   * @param {IContainerSetAccessPolicyOptions} [options]\n   * @returns {Promise<Models.ContainerSetAccessPolicyResponse>}\n   * @memberof ContainerURL\n   */\n  public async setAccessPolicy(\n    aborter: Aborter,\n    access?: Models.PublicAccessType,\n    containerAcl?: ISignedIdentifier[],\n    options: IContainerSetAccessPolicyOptions = {}\n  ): Promise<Models.ContainerSetAccessPolicyResponse> {\n    options.containerAccessConditions = options.containerAccessConditions || {};\n    const acl: Models.SignedIdentifier[] = [];\n    for (const identifier of containerAcl || []) {\n      acl.push({\n        accessPolicy: {\n          expiry: identifier.accessPolicy.expiry ? truncatedISO8061Date(identifier.accessPolicy.expiry) : \"\",\n          permission: identifier.accessPolicy.permission,\n          start: identifier.accessPolicy.start? truncatedISO8061Date(identifier.accessPolicy.start) : \"\"\n        },\n        id: identifier.id\n      });\n    }\n\n    return this.containerContext.setAccessPolicy({\n      abortSignal: aborter,\n      access,\n      containerAcl: acl,\n      leaseAccessConditions: options.containerAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.containerAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Establishes and manages a lock on a container for delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} proposedLeaseId Can be specified in any valid GUID string format\n   * @param {number} duration Must be between 15 to 60 seconds, or infinite (-1)\n   * @param {IContainerAcquireLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerAcquireLeaseResponse>}\n   * @memberof ContainerURL\n   */\n  public async acquireLease(\n    aborter: Aborter,\n    proposedLeaseId: string,\n    duration: number,\n    options: IContainerAcquireLeaseOptions = {}\n  ): Promise<Models.ContainerAcquireLeaseResponse> {\n    return this.containerContext.acquireLease({\n      abortSignal: aborter,\n      duration,\n      modifiedAccessConditions: options.modifiedAccessConditions,\n      proposedLeaseId\n    });\n  }\n\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} leaseId\n   * @param {IContainerReleaseLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerReleaseLeaseResponse>}\n   * @memberof ContainerURL\n   */\n  public async releaseLease(\n    aborter: Aborter,\n    leaseId: string,\n    options: IContainerReleaseLeaseOptions = {}\n  ): Promise<Models.ContainerReleaseLeaseResponse> {\n    return this.containerContext.releaseLease(leaseId, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * To renew an existing lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} leaseId\n   * @param {IContainerRenewLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerRenewLeaseResponse>}\n   * @memberof ContainerURL\n   */\n  public async renewLease(\n    aborter: Aborter,\n    leaseId: string,\n    options: IContainerRenewLeaseOptions = {}\n  ): Promise<Models.ContainerRenewLeaseResponse> {\n    return this.containerContext.renewLease(leaseId, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} period break period\n   * @param {IContainerBreakLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerBreakLeaseResponse>}\n   * @memberof ContainerURL\n   */\n  public async breakLease(\n    aborter: Aborter,\n    period: number,\n    options: IContainerBreakLeaseOptions = {}\n  ): Promise<Models.ContainerBreakLeaseResponse> {\n    return this.containerContext.breakLease({\n      abortSignal: aborter,\n      breakPeriod: period,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * To change the ID of an existing lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} leaseId\n   * @param {string} proposedLeaseId\n   * @param {IContainerChangeLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerChangeLeaseResponse>}\n   * @memberof ContainerURL\n   */\n  public async changeLease(\n    aborter: Aborter,\n    leaseId: string,\n    proposedLeaseId: string,\n    options: IContainerChangeLeaseOptions = {}\n  ): Promise<Models.ContainerChangeLeaseResponse> {\n    return this.containerContext.changeLease(leaseId, proposedLeaseId, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * listBlobFlatSegment returns a single segment of blobs starting from the\n   * specified Marker. Use an empty Marker to start enumeration from the beginning.\n   * After getting a segment, process it, and then call ListBlobsFlatSegment again\n   * (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} [marker]\n   * @param {IContainerListBlobsSegmentOptions} [options]\n   * @returns {Promise<Models.ContainerListBlobFlatSegmentResponse>}\n   * @memberof ContainerURL\n   */\n  public async listBlobFlatSegment(\n    aborter: Aborter,\n    marker?: string,\n    options: IContainerListBlobsSegmentOptions = {}\n  ): Promise<Models.ContainerListBlobFlatSegmentResponse> {\n    return this.containerContext.listBlobFlatSegment({\n      abortSignal: aborter,\n      marker,\n      ...options\n    });\n  }\n\n  /**\n   * listBlobHierarchySegment returns a single segment of blobs starting from\n   * the specified Marker. Use an empty Marker to start enumeration from the\n   * beginning. After getting a segment, process it, and then call ListBlobsHierarchicalSegment\n   * again (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} delimiter\n   * @param {IContainerListBlobsSegmentOptions} [options]\n   * @returns {Promise<Models.ContainerListBlobHierarchySegmentResponse>}\n   * @memberof ContainerURL\n   */\n  public async listBlobHierarchySegment(\n    aborter: Aborter,\n    delimiter: string,\n    marker?: string,\n    options: IContainerListBlobsSegmentOptions = {}\n  ): Promise<Models.ContainerListBlobHierarchySegmentResponse> {\n    return this.containerContext.listBlobHierarchySegment(delimiter, {\n      abortSignal: aborter,\n      marker,\n      ...options\n    });\n  }\n}\n","import { BaseRequestPolicy, HttpOperationResponse, WebResource } from \"@azure/ms-rest-js\";\n\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n *\n * @export\n * @abstract\n * @class CredentialPolicy\n * @extends {BaseRequestPolicy}\n */\nexport abstract class CredentialPolicy extends BaseRequestPolicy {\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof CredentialPolicy\n   */\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(this.signRequest(request));\n  }\n\n  /**\n   * Child classes must implement this method with request signing. This method\n   * will be executed in sendRequest().\n   *\n   * @protected\n   * @abstract\n   * @param {WebResource} request\n   * @returns {WebResource}\n   * @memberof CredentialPolicy\n   */\n  protected signRequest(request: WebResource): WebResource {\n    // Child classes must override this method with request signing. This method\n    // will be executed in sendRequest().\n    return request;\n  }\n}\n","import { RequestPolicy, RequestPolicyOptions } from \"@azure/ms-rest-js\";\n\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n *\n * @export\n * @class AnonymousCredentialPolicy\n * @extends {CredentialPolicy}\n */\nexport class AnonymousCredentialPolicy extends CredentialPolicy {\n  /**\n   * Creates an instance of AnonymousCredentialPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof AnonymousCredentialPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n}\n","import { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/ms-rest-js\";\n\nimport { CredentialPolicy } from \"../policies/CredentialPolicy\";\n\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n *\n * @export\n * @abstract\n * @class Credential\n */\nexport abstract class Credential implements RequestPolicyFactory {\n  /**\n   * Creates a RequestPolicy object.\n   *\n   * @param {RequestPolicy} _nextPolicy\n   * @param {RequestPolicyOptions} _options\n   * @returns {RequestPolicy}\n   * @memberof Credential\n   */\n  public create(\n    // tslint:disable-next-line:variable-name\n    _nextPolicy: RequestPolicy,\n    // tslint:disable-next-line:variable-name\n    _options: RequestPolicyOptions\n  ): RequestPolicy {\n    throw new Error(\"Method should be implemented in children classes.\");\n  }\n}\n\n/**\n * A factory function that creates a new CredentialPolicy that uses the provided nextPolicy.\n */\nexport type CredentialPolicyCreator = (\n  nextPolicy: RequestPolicy,\n  options: RequestPolicyOptions\n) => CredentialPolicy;\n","import { RequestPolicy, RequestPolicyOptions } from \"@azure/ms-rest-js\";\n\nimport { AnonymousCredentialPolicy } from \"../policies/AnonymousCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n *\n * @export\n * @class AnonymousCredential\n * @extends {Credential}\n */\nexport class AnonymousCredential extends Credential {\n  /**\n   * Creates an AnonymousCredentialPolicy object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {AnonymousCredentialPolicy}\n   * @memberof AnonymousCredential\n   */\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): AnonymousCredentialPolicy {\n    return new AnonymousCredentialPolicy(nextPolicy, options);\n  }\n}\n","import { HttpHeaders, RequestPolicy, RequestPolicyOptions, WebResource } from \"@azure/ms-rest-js\";\n\nimport { TokenCredential } from \"../credentials/TokenCredential\";\nimport { HeaderConstants } from \"../utils/constants\";\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n\n/**\n * TokenCredentialPolicy is a policy used to sign HTTP request with a token.\n * Such as an OAuth bearer token.\n *\n * @export\n * @class TokenCredentialPolicy\n * @extends {CredentialPolicy}\n */\nexport class TokenCredentialPolicy extends CredentialPolicy {\n  /**\n   * The value of token.\n   *\n   * @type {TokenCredential}\n   * @memberof TokenCredentialPolicy\n   */\n  public readonly tokenCredential: TokenCredential;\n\n  /**\n   * Token authorization scheme, default header is \"Bearer\".\n   *\n   * @type {string}\n   * @memberof TokenCredentialPolicy\n   */\n  public readonly authorizationScheme: string;\n\n  /**\n   * Creates an instance of TokenCredentialPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {TokenCredential} tokenCredential\n   * @memberof TokenCredentialPolicy\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    tokenCredential: TokenCredential\n  ) {\n    super(nextPolicy, options);\n    this.tokenCredential = tokenCredential;\n    this.authorizationScheme = HeaderConstants.AUTHORIZATION_SCHEME;\n  }\n\n  /**\n   * Sign request with token.\n   *\n   * @protected\n   * @param {WebResource} request\n   * @returns {WebResource}\n   * @memberof TokenCredentialPolicy\n   */\n  protected signRequest(request: WebResource): WebResource {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n    request.headers.set(\n      HeaderConstants.AUTHORIZATION,\n      `${this.authorizationScheme} ${this.tokenCredential.token}`\n    );\n    return request;\n  }\n}\n","import { RequestPolicy, RequestPolicyOptions } from \"@azure/ms-rest-js\";\n\nimport { Credential } from \"../credentials/Credential\";\nimport { TokenCredentialPolicy } from \"../policies/TokenCredentialPolicy\";\n\n/**\n * TokenCredential is a Credential used to generate a TokenCredentialPolicy.\n * Renew token by setting a new token string value to token property.\n *\n * @example\n *  const tokenCredential = new TokenCredential(\"token\");\n *  const pipeline = StorageURL.newPipeline(tokenCredential);\n *\n *  // List containers\n *  const serviceURL = new ServiceURL(\"https://mystorageaccount.blob.core.windows.net\", pipeline);\n *\n *  // Set up a timer to refresh the token\n *  const timerID = setInterval(() => {\n *    // Update token by accessing to public tokenCredential.token\n *    tokenCredential.token = \"updatedToken\";\n *    // WARNING: Timer must be manually stopped! It will forbid GC of tokenCredential\n *    if (shouldStop()) {\n *      clearInterval(timerID);\n *    }\n *  }, 60 * 60 * 1000); // Set an interval time before your token expired\n * @export\n * @class TokenCredential\n * @extends {Credential}\n *\n */\nexport class TokenCredential extends Credential {\n  /**\n   * Mutable token value. You can set a renewed token value to this property,\n   * for example, when an OAuth token is expired.\n   *\n   * @type {string}\n   * @memberof TokenCredential\n   */\n  public token: string;\n\n  /**\n   * Creates an instance of TokenCredential.\n   * @param {string} token\n   * @memberof TokenCredential\n   */\n  constructor(token: string) {\n    super();\n    this.token = token;\n  }\n\n  /**\n   * Creates a TokenCredentialPolicy object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {TokenCredentialPolicy}\n   * @memberof TokenCredential\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TokenCredentialPolicy {\n    return new TokenCredentialPolicy(nextPolicy, options, this);\n  }\n}\n","// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\nimport { EventEmitter } from \"events\";\n\n/**\n * Operation is an async function to be executed and managed by Batch.\n */\nexport declare type Operation = () => Promise<any>;\n\n/**\n * States for Batch.\n *\n * @enum {number}\n */\nenum BatchStates {\n  Good,\n  Error\n}\n\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n *\n * @export\n * @class Batch\n */\nexport class Batch {\n  /**\n   * Concurrency. Must be lager than 0.\n   *\n   * @type {number}\n   * @memberof Batch\n   */\n  private concurrency: number;\n\n  /**\n   * Number of active operations under execution.\n   *\n   * @private\n   * @type {number}\n   * @memberof Batch\n   */\n  private actives: number = 0;\n\n  /**\n   * Number of completed operations under execution.\n   *\n   * @private\n   * @type {number}\n   * @memberof Batch\n   */\n  private completed: number = 0;\n\n  /**\n   * Offset of next operation to be executed.\n   *\n   * @private\n   * @type {number}\n   * @memberof Batch\n   */\n  private offset: number = 0;\n\n  /**\n   * Operation array to be executed.\n   *\n   * @private\n   * @type {Operation[]}\n   * @memberof Batch\n   */\n  private operations: Operation[] = [];\n\n  /**\n   * States of Batch. When an error happens, state will turn into error.\n   * Batch will stop execute left operations.\n   *\n   * @private\n   * @type {BatchStates}\n   * @memberof Batch\n   */\n  private state: BatchStates = BatchStates.Good;\n\n  /**\n   * A private emitter used to pass events inside this class.\n   *\n   * @private\n   * @type {EventEmitter}\n   * @memberof Batch\n   */\n  private emitter: EventEmitter;\n\n  /**\n   * Creates an instance of Batch.\n   * @param {number} [concurrency=5]\n   * @memberof Batch\n   */\n  public constructor(concurrency: number = 5) {\n    if (concurrency < 1) {\n      throw new RangeError(\"concurrency must be larger than 0\");\n    }\n    this.concurrency = concurrency;\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * Add a operation into queue.\n   *\n   * @param {Operation} operation\n   * @memberof Batch\n   */\n  public addOperation(operation: Operation): void {\n    this.operations.push(async () => {\n      try {\n        this.actives++;\n        await operation();\n        this.actives--;\n        this.completed++;\n        this.parallelExecute();\n      } catch (error) {\n        this.emitter.emit(\"error\", error);\n      }\n    });\n  }\n\n  /**\n   * Start execute operations in the queue.\n   *\n   * @returns {Promise<void>}\n   * @memberof Batch\n   */\n  public async do(): Promise<void> {\n    this.parallelExecute();\n\n    return new Promise<void>((resolve, reject) => {\n      this.emitter.on(\"finish\", resolve);\n\n      this.emitter.on(\"error\", (error) => {\n        this.state = BatchStates.Error;\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Get next operation to be executed. Return null when reaching ends.\n   *\n   * @private\n   * @returns {(Operation | null)}\n   * @memberof Batch\n   */\n  private nextOperation(): Operation | null {\n    if (this.offset < this.operations.length) {\n      return this.operations[this.offset++];\n    }\n    return null;\n  }\n\n  /**\n   * Start execute operations. One one the most important difference between\n   * this method with do() is that do() wraps as an sync method.\n   *\n   * @private\n   * @returns {void}\n   * @memberof Batch\n   */\n  private parallelExecute(): void {\n    if (this.state === BatchStates.Error) {\n      return;\n    }\n\n    if (this.completed >= this.operations.length) {\n      this.emitter.emit(\"finish\");\n      return;\n    }\n\n    while (this.actives < this.concurrency) {\n      const operation = this.nextOperation();\n      if (operation) {\n        operation();\n      } else {\n        return;\n      }\n    }\n  }\n}\n","import { generateUuid } from \"@azure/ms-rest-js\";\n\nimport { Aborter } from \"./Aborter\";\nimport { BlockBlobURL } from \"./BlockBlobURL\";\nimport { BlobUploadCommonResponse, IUploadToBlockBlobOptions } from \"./highlevel.common\";\nimport { Batch } from \"./utils/Batch\";\nimport {\n  BLOCK_BLOB_MAX_BLOCKS,\n  BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES,\n  BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES,\n  DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES\n} from \"./utils/constants\";\nimport { generateBlockID } from \"./utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN BROWSERS.\n *\n * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n *\n * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.\n * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n * to commit the block list.\n *\n * @export\n * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n *                          goto documents of Aborter for more examples about request cancellation\n * @param {Blob | ArrayBuffer | ArrayBufferView} browserData Blob, File, ArrayBuffer or ArrayBufferView\n * @param {BlockBlobURL} blockBlobURL\n * @param {IUploadToBlockBlobOptions} [options]\n * @returns {Promise<BlobUploadCommonResponse>}\n */\nexport async function uploadBrowserDataToBlockBlob(\n  aborter: Aborter,\n  browserData: Blob | ArrayBuffer | ArrayBufferView,\n  blockBlobURL: BlockBlobURL,\n  options?: IUploadToBlockBlobOptions\n): Promise<BlobUploadCommonResponse> {\n  const browserBlob = new Blob([browserData]);\n  return UploadSeekableBlobToBlockBlob(\n    aborter,\n    (offset: number, size: number): Blob => {\n      return browserBlob.slice(offset, offset + size);\n    },\n    browserBlob.size,\n    blockBlobURL,\n    options\n  );\n}\n\n/**\n * ONLY AVAILABLE IN BROWSERS.\n *\n * Uploads a browser Blob object to block blob. Requires a blobFactory as the data source,\n * which need to return a Blob object with the offset and size provided.\n *\n * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.\n * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n * to commit the block list.\n *\n * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n *                          goto documents of Aborter for more examples about request cancellation\n * @param {(offset: number, size: number) => Blob} blobFactory\n * @param {number} size\n * @param {BlockBlobURL} blockBlobURL\n * @param {IUploadToBlockBlobOptions} [options]\n * @returns {Promise<BlobUploadCommonResponse>}\n */\nasync function UploadSeekableBlobToBlockBlob(\n  aborter: Aborter,\n  blobFactory: (offset: number, size: number) => Blob,\n  size: number,\n  blockBlobURL: BlockBlobURL,\n  options: IUploadToBlockBlobOptions = {}\n): Promise<BlobUploadCommonResponse> {\n  if (!options.blockSize) {\n    options.blockSize = 0;\n  }\n  if (options.blockSize < 0 || options.blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n    throw new RangeError(\n      `blockSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`\n    );\n  }\n\n  if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {\n    options.maxSingleShotSize = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n  }\n  if (\n    options.maxSingleShotSize < 0 ||\n    options.maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES\n  ) {\n    throw new RangeError(\n      `maxSingleShotSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`\n    );\n  }\n\n  if (options.blockSize === 0) {\n    if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {\n      throw new RangeError(`${size} is too larger to upload to a block blob.`);\n    }\n    if (size > options.maxSingleShotSize) {\n      options.blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n      if (options.blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n        options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n      }\n    }\n  }\n  if (!options.blobHTTPHeaders) {\n    options.blobHTTPHeaders = {};\n  }\n  if (!options.blobAccessConditions) {\n    options.blobAccessConditions = {};\n  }\n\n  if (size <= options.maxSingleShotSize) {\n    return blockBlobURL.upload(aborter, blobFactory(0, size), size, options);\n  }\n\n  const numBlocks: number = Math.floor((size - 1) / options.blockSize) + 1;\n  if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {\n    throw new RangeError(\n      `The buffer's size is too big or the BlockSize is too small;` +\n        `the number of blocks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`\n    );\n  }\n\n  const blockList: string[] = [];\n  const blockIDPrefix = generateUuid();\n  let transferProgress: number = 0;\n\n  const batch = new Batch(options.parallelism);\n  for (let i = 0; i < numBlocks; i++) {\n    batch.addOperation(\n      async (): Promise<any> => {\n        const blockID = generateBlockID(blockIDPrefix, i);\n        const start = options.blockSize! * i;\n        const end = i === numBlocks - 1 ? size : start + options.blockSize!;\n        const contentLength = end - start;\n        blockList.push(blockID);\n        await blockBlobURL.stageBlock(\n          aborter,\n          blockID,\n          blobFactory(start, contentLength),\n          contentLength,\n          {\n            leaseAccessConditions: options.blobAccessConditions!.leaseAccessConditions\n          }\n        );\n        // Update progress after block is successfully uploaded to server, in case of block trying\n        // TODO: Hook with convenience layer progress event in finer level\n        transferProgress += contentLength;\n        if (options.progress) {\n          options.progress!({\n            loadedBytes: transferProgress\n          });\n        }\n      }\n    );\n  }\n  await batch.do();\n\n  return blockBlobURL.commitBlockList(aborter, blockList, options);\n}\n","import { HttpRequestBody, TransferProgressEvent } from \"@azure/ms-rest-js\";\n\nimport { Aborter } from \"./Aborter\";\nimport { BlobURL } from \"./BlobURL\";\nimport { ContainerURL } from \"./ContainerURL\";\nimport * as Models from \"./generated/src/models\";\nimport { PageBlob } from \"./generated/src/operations\";\nimport { rangeToString } from \"./IRange\";\nimport { IBlobAccessConditions, IMetadata, IPageBlobAccessConditions } from \"./models\";\nimport { Pipeline } from \"./Pipeline\";\nimport { URLConstants } from \"./utils/constants\";\nimport { appendToURLPath, setURLParameter } from \"./utils/utils.common\";\n\nexport interface IPageBlobCreateOptions {\n  accessConditions?: IBlobAccessConditions;\n  blobSequenceNumber?: number;\n  blobHTTPHeaders?: Models.BlobHTTPHeaders;\n  metadata?: IMetadata;\n}\n\nexport interface IPageBlobUploadPagesOptions {\n  accessConditions?: IPageBlobAccessConditions;\n  progress?: (progress: TransferProgressEvent) => void;\n  transactionalContentMD5?: Uint8Array;\n}\n\nexport interface IPageBlobUploadPagesFromURLOptions {\n  accessConditions?: IPageBlobAccessConditions;\n  sourceModifiedAccessConditions?: Models.ModifiedAccessConditions;\n  sourceContentMD5?: Uint8Array;\n}\n\nexport interface IPageBlobClearPagesOptions {\n  accessConditions?: IPageBlobAccessConditions;\n}\n\nexport interface IPageBlobGetPageRangesOptions {\n  accessConditions?: IBlobAccessConditions;\n}\n\nexport interface IPageBlobGetPageRangesDiffOptions {\n  accessConditions?: IBlobAccessConditions;\n  range?: string;\n}\n\nexport interface IPageBlobResizeOptions {\n  accessConditions?: IBlobAccessConditions;\n}\n\nexport interface IPageBlobUpdateSequenceNumberOptions {\n  accessConditions?: IBlobAccessConditions;\n}\n\nexport interface IPageBlobStartCopyIncrementalOptions {\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * PageBlobURL defines a set of operations applicable to page blobs.\n *\n * @export\n * @class PageBlobURL\n * @extends {StorageURL}\n */\nexport class PageBlobURL extends BlobURL {\n  /**\n   * Creates a PageBlobURL object from ContainerURL instance.\n   *\n   * @static\n   * @param {ContainerURL} containerURL A ContainerURL object\n   * @param {string} blobName A page blob name\n   * @returns {PageBlobURL}\n   * @memberof PageBlobURL\n   */\n  public static fromContainerURL(containerURL: ContainerURL, blobName: string): PageBlobURL {\n    return new PageBlobURL(\n      appendToURLPath(containerURL.url, encodeURIComponent(blobName)),\n      containerURL.pipeline\n    );\n  }\n\n  /**\n   * Creates a PageBlobURL object from BlobURL instance.\n   *\n   * @static\n   * @param {BlobURL} blobURL\n   * @returns {PageBlobURL}\n   * @memberof PageBlobURL\n   */\n  public static fromBlobURL(blobURL: BlobURL): PageBlobURL {\n    return new PageBlobURL(blobURL.url, blobURL.pipeline);\n  }\n\n  /**\n   * pageBlobsContext provided by protocol layer.\n   *\n   * @private\n   * @type {PageBlobs}\n   * @memberof PageBlobURL\n   */\n  private pageBlobContext: PageBlob;\n\n  /**\n   * Creates an instance of PageBlobURL.\n   * This method accepts an encoded URL or non-encoded URL pointing to a page blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage page blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof PageBlobURL\n   */\n  constructor(url: string, pipeline: Pipeline) {\n    super(url, pipeline);\n    this.pageBlobContext = new PageBlob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new PageBlobURL object identical to the source but with the\n   * specified request policy pipeline.\n   *\n   * @param {Pipeline} pipeline\n   * @returns {PageBlobURL}\n   * @memberof PageBlobURL\n   */\n  public withPipeline(pipeline: Pipeline): PageBlobURL {\n    return new PageBlobURL(this.url, pipeline);\n  }\n\n  /**\n   * Creates a new PageBlobURL object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param {string} snapshot\n   * @returns {PageBlobURL}\n   * @memberof PageBlobURL\n   */\n  public withSnapshot(snapshot: string): PageBlobURL {\n    return new PageBlobURL(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a page blob of the specified length. Call uploadPages to upload data\n   * data to a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} size\n   * @param {IPageBlobCreateOptions} [options]\n   * @returns {Promise<Models.PageBlobCreateResponse>}\n   * @memberof PageBlobURL\n   */\n  public async create(\n    aborter: Aborter,\n    size: number,\n    options: IPageBlobCreateOptions = {}\n  ): Promise<Models.PageBlobCreateResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.create(0, size, {\n      abortSignal: aborter,\n      blobHTTPHeaders: options.blobHTTPHeaders,\n      blobSequenceNumber: options.blobSequenceNumber,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {HttpRequestBody} body\n   * @param {number} offset Offset of destination page blob\n   * @param {number} count Content length of the body, also number of bytes to be uploaded\n   * @param {IPageBlobUploadPagesOptions} [options]\n   * @returns {Promise<Models.PageBlobsUploadPagesResponse>}\n   * @memberof PageBlobURL\n   */\n  public async uploadPages(\n    aborter: Aborter,\n    body: HttpRequestBody,\n    offset: number,\n    count: number,\n    options: IPageBlobUploadPagesOptions = {}\n  ): Promise<Models.PageBlobUploadPagesResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.uploadPages(body, count, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      onUploadProgress: options.progress,\n      range: rangeToString({ offset, count }),\n      sequenceNumberAccessConditions: options.accessConditions.sequenceNumberAccessConditions,\n      transactionalContentMD5: options.transactionalContentMD5\n    });\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the\n   * contents are read from a URL.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} sourceURL Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication\n   * @param {number} sourceOffset The source offset to copy from. Pass 0 to copy from the beginning of source page blob\n   * @param {number} destOffset Offset of destination page blob\n   * @param {number} count Number of bytes to be uploaded from source page blob\n   * @param {IPageBlobUploadPagesFromURLOptions} [options={}]\n   * @returns {Promise<Models.PageBlobUploadPagesFromURLResponse>}\n   * @memberof PageBlobURL\n   */\n  public async uploadPagesFromURL(\n    aborter: Aborter,\n    sourceURL: string,\n    sourceOffset: number,\n    destOffset: number,\n    count: number,\n    options: IPageBlobUploadPagesFromURLOptions = {}\n  ): Promise<Models.PageBlobUploadPagesFromURLResponse> {\n    options.accessConditions = options.accessConditions || {};\n    options.sourceModifiedAccessConditions = options.sourceModifiedAccessConditions || {};\n\n    return this.pageBlobContext.uploadPagesFromURL(\n      sourceURL,\n      rangeToString({ offset: sourceOffset, count }),\n      0,\n      rangeToString({ offset: destOffset, count }),\n      {\n        abortSignal: aborter,\n        sourceContentMD5: options.sourceContentMD5,\n        leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n        sequenceNumberAccessConditions: options.accessConditions.sequenceNumberAccessConditions,\n        modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n        sourceModifiedAccessConditions: {\n          sourceIfMatch: options.sourceModifiedAccessConditions.ifMatch,\n          sourceIfModifiedSince: options.sourceModifiedAccessConditions.ifModifiedSince,\n          sourceIfNoneMatch: options.sourceModifiedAccessConditions.ifNoneMatch,\n          sourceIfUnmodifiedSince: options.sourceModifiedAccessConditions.ifUnmodifiedSince\n        }\n      }\n    );\n  }\n\n  /**\n   * Frees the specified pages from the page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} offset\n   * @param {number} count\n   * @param {IPageBlobClearPagesOptions} [options]\n   * @returns {Promise<Models.PageBlobClearPagesResponse>}\n   * @memberof PageBlobURL\n   */\n  public async clearPages(\n    aborter: Aborter,\n    offset: number,\n    count: number,\n    options: IPageBlobClearPagesOptions = {}\n  ): Promise<Models.PageBlobClearPagesResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.clearPages(0, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      range: rangeToString({ offset, count }),\n      sequenceNumberAccessConditions: options.accessConditions.sequenceNumberAccessConditions\n    });\n  }\n\n  /**\n   * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} offset\n   * @param {number} count\n   * @param {IPageBlobGetPageRangesOptions} [options]\n   * @returns {Promise<Models.PageBlobGetPageRangesResponse>}\n   * @memberof PageBlobURL\n   */\n  public async getPageRanges(\n    aborter: Aborter,\n    offset: number,\n    count: number,\n    options: IPageBlobGetPageRangesOptions = {}\n  ): Promise<Models.PageBlobGetPageRangesResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.getPageRanges({\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      range: rangeToString({ offset, count })\n    });\n  }\n\n  /**\n   * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} offset\n   * @param {number} count\n   * @param {string} prevSnapshot\n   * @param {IPageBlobGetPageRangesDiffOptions} [options]\n   * @returns {Promise<Models.PageBlobGetPageRangesDiffResponse>}\n   * @memberof PageBlobURL\n   */\n  public async getPageRangesDiff(\n    aborter: Aborter,\n    offset: number,\n    count: number,\n    prevSnapshot: string,\n    options: IPageBlobGetPageRangesDiffOptions = {}\n  ): Promise<Models.PageBlobGetPageRangesDiffResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.getPageRangesDiff({\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      prevsnapshot: prevSnapshot,\n      range: rangeToString({ offset, count })\n    });\n  }\n\n  /**\n   * Resizes the page blob to the specified size (which must be a multiple of 512).\n   * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} size\n   * @param {IPageBlobResizeOptions} [options]\n   * @returns {Promise<Models.PageBlobResizeResponse>}\n   * @memberof PageBlobURL\n   */\n  public async resize(\n    aborter: Aborter,\n    size: number,\n    options: IPageBlobResizeOptions = {}\n  ): Promise<Models.PageBlobResizeResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.resize(size, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Sets a page blob's sequence number.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {Models.SequenceNumberActionType} sequenceNumberAction\n   * @param {number} [sequenceNumber] Required if sequenceNumberAction is max or update\n   * @param {IPageBlobUpdateSequenceNumberOptions} [options]\n   * @returns {Promise<Models.PageBlobUpdateSequenceNumberResponse>}\n   * @memberof PageBlobURL\n   */\n  public async updateSequenceNumber(\n    aborter: Aborter,\n    sequenceNumberAction: Models.SequenceNumberActionType,\n    sequenceNumber?: number,\n    options: IPageBlobUpdateSequenceNumberOptions = {}\n  ): Promise<Models.PageBlobUpdateSequenceNumberResponse> {\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n      abortSignal: aborter,\n      blobSequenceNumber: sequenceNumber,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n   * The snapshot is copied such that only the differential changes between the previously\n   * copied snapshot are transferred to the destination.\n   * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n   * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n   * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} copySource Specifies the name of the source page blob snapshot. For example,\n   *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param {IPageBlobStartCopyIncrementalOptions} [options]\n   * @returns {Promise<Models.PageBlobCopyIncrementalResponse>}\n   * @memberof PageBlobURL\n   */\n  public async startCopyIncremental(\n    aborter: Aborter,\n    copySource: string,\n    options: IPageBlobStartCopyIncrementalOptions = {}\n  ): Promise<Models.PageBlobCopyIncrementalResponse> {\n    return this.pageBlobContext.copyIncremental(copySource, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n}\n","import { HttpResponse } from \"@azure/ms-rest-js\";\n\nimport * as Models from \"./generated/src/models\";\nimport { Aborter } from \"./Aborter\";\nimport { ListContainersIncludeType } from \"./generated/src/models\";\nimport { Service } from \"./generated/src/operations\";\nimport { Pipeline } from \"./Pipeline\";\nimport { StorageURL } from \"./StorageURL\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\n\nexport interface IServiceListContainersSegmentOptions {\n  /**\n   * @member {string} [prefix] Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * @member {number} [maxresults] Specifies the maximum number of containers\n   * to return. If the request does not specify maxresults, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxresults, or than the default of 5000.\n   */\n  maxresults?: number;\n  /**\n   * @member {ListContainersIncludeType} [include] Include this parameter to\n   * specify that the container's metadata be returned as part of the response\n   * body. Possible values include: 'metadata'\n   */\n  include?: ListContainersIncludeType;\n}\n\nexport interface UserDelegationKey {\n  /**\n   * The Azure Active Directory object ID in GUID format.\n   *\n   * @type {string}\n   * @memberof UserDelegationKey\n   */\n  signedOid: string;\n  /**\n   * The Azure Active Directory tenant ID in GUID format.\n   *\n   * @type {string}\n   * @memberof UserDelegationKey\n   */\n  signedTid: string;\n  /**\n   * The date-time the key is active.\n   *\n   * @type {Date}\n   * @memberof UserDelegationKey\n   */\n  signedStart: Date;\n  /**\n   * The date-time the key expires.\n   *\n   * @type {Date}\n   * @memberof UserDelegationKey\n   */\n  signedExpiry: Date;\n  /**\n   * Abbreviation of the Azure Storage service that accepts the key.\n   *\n   * @type {string}\n   * @memberof UserDelegationKey\n   */\n  signedService: string;\n  /**\n   * The service version that created the key.\n   *\n   * @type {string}\n   * @memberof UserDelegationKey\n   */\n  signedVersion: string;\n  /**\n   * The key as a base64 string.\n   *\n   * @type {string}\n   * @memberof UserDelegationKey\n   */\n  value: string;\n}\n\nexport declare type ServiceGetUserDelegationKeyResponse = UserDelegationKey &\n  Models.ServiceGetUserDelegationKeyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: Models.ServiceGetUserDelegationKeyHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Models.UserDelegationKey;\n    };\n  };\n\n/**\n * A ServiceURL represents a URL to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n *\n * @export\n * @class ServiceURL\n * @extends {StorageURL}\n */\nexport class ServiceURL extends StorageURL {\n  /**\n   * serviceContext provided by protocol layer.\n   *\n   * @private\n   * @type {Service}\n   * @memberof ServiceURL\n   */\n  private serviceContext: Service;\n\n  /**\n   * Creates an instance of ServiceURL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof ServiceURL\n   */\n  constructor(url: string, pipeline: Pipeline) {\n    super(url, pipeline);\n    this.serviceContext = new Service(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new ServiceURL object identical to the source but with the\n   * specified request policy pipeline.\n   *\n   * @param {Pipeline} pipeline\n   * @returns {ServiceURL}\n   * @memberof ServiceURL\n   */\n  public withPipeline(pipeline: Pipeline): ServiceURL {\n    return new ServiceURL(this.url, pipeline);\n  }\n\n  /**\n   * Gets the properties of a storage account’s Blob service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties}\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @returns {Promise<Models.ServiceGetPropertiesResponse>}\n   * @memberof ServiceURL\n   */\n  public async getProperties(aborter: Aborter): Promise<Models.ServiceGetPropertiesResponse> {\n    return this.serviceContext.getProperties({\n      abortSignal: aborter\n    });\n  }\n\n  /**\n   * Sets properties for a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties}\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {Models.StorageServiceProperties} properties\n   * @returns {Promise<Models.ServiceSetPropertiesResponse>}\n   * @memberof ServiceURL\n   */\n  public async setProperties(\n    aborter: Aborter,\n    properties: Models.StorageServiceProperties\n  ): Promise<Models.ServiceSetPropertiesResponse> {\n    return this.serviceContext.setProperties(properties, {\n      abortSignal: aborter\n    });\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only\n   * available on the secondary location endpoint when read-access geo-redundant\n   * replication is enabled for the storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats}\n   *\n   *  @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @returns {Promise<Models.ServiceGetStatisticsResponse>}\n   * @memberof ServiceURL\n   */\n  public async getStatistics(aborter: Aborter): Promise<Models.ServiceGetStatisticsResponse> {\n    return this.serviceContext.getStatistics({\n      abortSignal: aborter\n    });\n  }\n\n  /**\n   * The Get Account Information operation returns the sku name and account kind\n   * for the specified account.\n   * The Get Account Information operation is available on service versions beginning\n   * with version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @returns {Promise<Models.ServiceGetAccountInfoResponse>}\n   * @memberof ServiceURL\n   */\n  public async getAccountInfo(aborter: Aborter): Promise<Models.ServiceGetAccountInfoResponse> {\n    return this.serviceContext.getAccountInfo({\n      abortSignal: aborter\n    });\n  }\n\n  /**\n   * Returns a list of the containers under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of containers to be returned with the next listing operation. The\n   *                          operation returns the NextMarker value within the response body if the\n   *                          listing operation did not return all containers remaining to be listed\n   *                          with the current page. The NextMarker value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {IServiceListContainersSegmentOptions} [options]\n   * @returns {Promise<Models.ServiceListContainersSegmentResponse>}\n   * @memberof ServiceURL\n   */\n  public async listContainersSegment(\n    aborter: Aborter,\n    marker?: string,\n    options: IServiceListContainersSegmentOptions = {}\n  ): Promise<Models.ServiceListContainersSegmentResponse> {\n    return this.serviceContext.listContainersSegment({\n      abortSignal: aborter,\n      marker,\n      ...options\n    });\n  }\n\n  /**\n   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n   *\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {Date} start      The start time for the user delegation SAS. Must be within 7 days of the current time\n   * @param {Date} expiry     The end time for the user delegation SAS. Must be within 7 days of the current time\n   * @returns {Promise<ServiceGetUserDelegationKeyResponse>}\n   * @memberof ServiceURL\n   */\n  public async getUserDelegationKey(\n    aborter: Aborter,\n    start: Date,\n    expiry: Date\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    const response = await this.serviceContext.getUserDelegationKey(\n      {\n        start: truncatedISO8061Date(start, false),\n        expiry: truncatedISO8061Date(expiry, false)\n      },\n      {\n        abortSignal: aborter\n      }\n    );\n\n    const userDelegationKey = {\n      signedOid: response.signedOid,\n      signedTid: response.signedTid,\n      signedStart: new Date(response.signedStart),\n      signedExpiry: new Date(response.signedExpiry),\n      signedService: response.signedService,\n      signedVersion: response.signedVersion,\n      value: response.value\n    };\n\n    const res: ServiceGetUserDelegationKeyResponse = {\n      _response: response._response,\n      requestId: response.requestId,\n      version: response.version,\n      date: response.date,\n      errorCode: response.errorCode,\n      ...userDelegationKey,\n    };\n\n    return res;\n  }\n}\n"],"names":["getHeaderKey","headerName","toLowerCase","rawHeaders","this","_headersMap","set","HttpHeaders","headerValue","name","value","toString","header","undefined","result","contains","headerKey","headers","push","headerNames","headersArray","i","length","headerValues","JSON","stringify","toJson","encodeByteArray","str","String","fromCharCode","btoa","decodeString","byteString","atob","arr","Uint8Array","charCodeAt","getRandomValues","crypto","bind","window","msCrypto","rnds8","module","rnds","Array","r","Math","random","byteToHex","substr","buf","offset","bth","join","options","rng","ii","bytesToUuid","Constants","msRestVersion","HTTP","HTTPS","HTTP_PROXY","HTTPS_PROXY","HttpConstants","HttpVerbs","PUT","GET","DELETE","POST","MERGE","HEAD","PATCH","StatusCodes","TooManyRequests","HeaderConstants","AUTHORIZATION","AUTHORIZATION_SCHEME","RETRY_AFTER","USER_AGENT","isNode","process","version","versions","node","stripResponse","response","strippedResponse","body","bodyAsText","status","stripRequest","request","strippedRequest","clone","remove","generateUuid","uuidv4","delay","t","Promise","resolve","setTimeout","validateISODuration","replaceAll","searchValue","replaceValue","split","modelMappers","isXML","Serializer","mapper","objectName","failValidation","constraintName","constraintValue","Error","constraints","_a","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","pattern","RegExp","match","some","item","ar","indexOf","object","payload","mapperType","type","serializedName","isConstant","defaultValue","required","nullable","validateConstraints","typeName","valueOf","uuid","test","objectType","ArrayBuffer","isView","Blob","serializeBasicTypes","allowedValues","serializeEnumType","Date","isNaN","parse","toISOString","substring","toUTCString","d","floor","getTime","dateToUnixTime","utils.isDuration","serializeDateTypes","base64.encodeByteArray","serializeByteArrayType","buffer","ch","len","trimEnd","replace","bufferToBase64Url","serializeBase64UrlType","serializer","isArray","elementType","element","tempArray","serialize","serializeSequenceType","valueType","tempDictionary","Object","keys","_i","key","serializeDictionaryType","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","modelProps","resolveModelProperties","_b","propertyMapper","readOnly","propName","parentObject","xmlIsWrapped","xmlName","xmlElementName","paths","splitSerializeName","pop","paths_1","_c","pathName","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","serializedValue","xmlIsAttribute","$","additionalPropertiesMapper","additionalProperties","propNames","clientPropName","every","pn","serializeCompositeType","responseBody","instance","handledPropertyNames","headerCollectionPrefix","dictionary","startsWith","deserialize","unwrappedProperty","propertyInstance","res","paths_2","_d","isAdditionalProperty","responsePropName","_f","_e","includes","isSpecialXmlProperty","deserializeCompositeType","parseFloat","n","unixTimeToDate","base64.decodeString","base64UrlToByteArray","deserializeSequenceType","deserializeDictionaryType","prop","classes","partialclass","subwords_1","charAt","modelProperties","className","modelMapper","propertyName","polymorphicPropertyName","discriminatorName","discriminatorValue","uberParent","indexDiscriminator","polymorphicMapper","discriminators","getPolymorphicDiscriminatorSafely","MapperType","o","o_1","strEnum","url","method","query","streamResponseBody","withCredentials","abortSignal","timeout","onUploadProgress","onDownloadProgress","proxySettings","keepAlive","formData","WebResource","pathTemplate","validMethods","toUpperCase","pathTemplate_1","pathParameters_1","baseUrl","url_1","endsWith","slice","segments","forEach","pathParamName","pathParam","encodeURIComponent","skipUrlEncoding","queryParameters","queryParams","queryParamName","queryParam","get","disableClientRequestId","bodyIsStream","serializationMapper","mappers","disableJsonStringifyOnBody","operationSpec","shouldDeserialize","operationResponseGetter","extendStatics","b","setPrototypeOf","__proto__","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","s","arguments","call","apply","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","e","rejected","done","then","__generator","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","HttpPipelineLogLevel","message","code","statusCode","_super","_this","RestError","tslib_1.__extends","XhrHttpClient","xhr","XMLHttpRequest","listener_1","abort","addEventListener","readyState","DONE","removeEventListener","addProgressListener","upload","requestForm_1","FormData","appendFormValue","append","formKey","formValue","j","contentType","open","setRequestHeader","responseType","send","HEADERS_RECEIVED","blobBody","rejectOnTerminalEvent","parseHeaders","responseText","listener","rawEvent","loadedBytes","loaded","responseHeaders","headerLines_1","getAllResponseHeaders","trim","line","index","REQUEST_SEND_ERROR","REQUEST_ABORTED_ERROR","getPathStringFromParameter","parameter","getPathStringFromParameterPath","parameterPath","isStreamOperation","responses","operationResponse","bodyMapper","Stream","parser","DOMParser","parseXML","dom","parseFromString","errorNS","parserErrors","getElementsByTagNameNS","innerHTML","throwIfError","obj","domToObject","childNodeCount","childNodes","firstChildNode","onlyChildTextValue","nodeType","Node","TEXT_NODE","nodeValue","elementWithAttributes","attributes","isElement","hasAttributes","asElementWithAttributes","attr","nodeName","child","childObject","err","getElementsByTagName","namespaceURI","ignored","doc","document","implementation","createDocument","XMLSerializer","stringifyXML","opts","buildNode","elementName","elem","createElement","textContent","obj_1","arrayElem","buildAttributes","setNamedItem","_h","_g","appendChild","rootName","serializeToString","attrs","createAttribute","_nextPolicy","_options","BaseRequestPolicy","logLevel","shouldLog","log","_logger","RequestPolicyOptions","OFF","minimumLogLevel","deserializationPolicy","deserializationContentTypes","nextPolicy","DeserializationPolicy","defaultJsonContentTypes","defaultXmlContentTypes","jsonContentTypes","json","xmlContentTypes","xml","sendRequest","errorHandler","msg","errCode","PARSE_ERROR","text_1","contentComponents","map","component","parsedBody","catch","parsedResponse","shouldDeserializeResponse","expectedStatusCodes","hasNoExpectedStatusCodes","responseSpec","getOperationResponse","valueToDeserialize","Sequence","error","restError","utils.stripRequest","utils.stripResponse","httpMethod","headersMapper","parsedHeaders","defaultResponseSpec","default","initialErrorMessage","parsedErrorResponse","defaultResponseBodyMapper","internalError","defaultError","deserializeResponseBody","DEFAULT_CLIENT_RETRY_INTERVAL","DEFAULT_CLIENT_RETRY_COUNT","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","retryCount","retryInterval","minRetryInterval","maxRetryInterval","isNumber","ExponentialRetryPolicy","retry","policy","retryData","requestError","innerError","incrementDelta","pow","min","updateRetryData","isAborted","aborted","shouldRetry","utils.delay","_requestIdHeaderName","GenerateClientRequestIdPolicy","utils.generateUuid","getDefaultUserAgentKey","getDefaultUserAgentHeaderName","getDefaultUserAgentValue","navigator","telemetryInfo","keySeparator","valueSeparator","runtimeInfo","platformSpecificData","oscpu","platform","concat","info","UserAgentPolicy","addUserAgentHeader","URLQuery","_rawQuery","parameterName","parameterValue","newValue","parameterStrings","parameterValue_1","parameterValueElement","text","currentState","currentCharacter","URLBuilder","scheme","_scheme","host","_host","port","_port","path","_path","currentPath","getPath","_query","queryParameterName","queryParameterValue","startState","tokenizer","URLTokenizer","token","current","tokenPath","any","setScheme","getScheme","setHost","getHost","setPort","getPort","setPath","setQuery","getQuery","URLToken","_text","state","_textLength","_currentState","_currentIndex","_currentToken","hasCurrentCharacter","readWhile","character","characterCode","isAlphaNumericCharacter","readWhileLetterOrDigit","schemeOrHost","readUntilCharacter","getCurrentCharacter","peekCharacters","nextSchemeOrHost","nextCharacter","nextHost","nextPort","nextPath","readRemaining","nextQuery","charactersToPeek","endIndex","condition","terminatingCharacters","maxRetries","RedirectPolicy","handleRedirect","currentRetries","locationHeader","builder","_retryTimeout","RPRegistrationPolicy","rpName","matchRes","checkRPNotRegisteredError","urlPrefix","extractSubscriptionUrl","provider","originalRequest","postUrl","getUrl","reqOptions","getRequestEssentials","getRegistrationStatus","registrationState","registerRP","registrationStatus","registerIfNeeded","reuseUrlToo","authenticationProvider","SigningPolicy","signRequest","nextRequest","QueryCollectionFormat","SystemErrorRetryPolicy","boundedRandDelta","currentCount","getDefaultProxySettings","proxyUrl","env","loadEnvironmentProxyValue","parsedUrl","Number","parseInt","ProxyPolicy","_handleResponse","_defaultResponseHandler","ThrottlingRetryPolicy","httpRequest","httpResponse","retryAfterHeader","delayInMs","parseRetryAfterHeader","retryAfterInSeconds","parseDateRetryAfterHeader","now","diff","credentials","requestPolicyFactories","_withCredentials","_httpClient","httpClient","DefaultHttpClient","_requestPolicyOptions","httpPipelineLogger","factories","generateClientRequestIdHeader","requestIdHeaderName","clientRequestIdHeaderName","userAgentHeaderName","getValueOrFunctionResult","userAgentHeaderValue","userAgent","userAgentData","maximumRetries","redirectPolicy","retryTimeout","rpRegistrationPolicy","rpRegistrationRetryTimeout","noRetryPolicy","systemErrorRetryPolicy","proxyPolicy","createDefaultRequestPolicyFactories","newRequestPolicyFactories","_requestPolicyFactories","ServiceClient","validateRequestProperties","prepare","httpPipeline","operationArguments","callback","baseUri","requestUrl","appendPath","urlParameters","urlParameter","urlParameterValue","getOperationArgumentValueFromParameter","skipEncoding","queryParameter","collectionFormat","Multi","setQueryParameter","requestContentType","headerParameters","headerParameter","customHeaders","customHeaderName","serviceClient","requestBody","requestBodyParameterPathString","isStream","utils.prepareXMLRootList","formDataParameters","formDataParameter","formDataParameterValue","formDataParameterPropertyName","serializeRequestBody","_response","addOperationResponse","defineProperty","readableStreamBody","modelProperties_1","isPageableResponse","k","arrayResponse","flattenResponse","cb","defaultValueCreator","getOperationArgumentValueFromParameterPath","parameterMapper","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","propertyValue","parameterPathString","propertyPath","propertyPathString","parent","parameterPathPart","timer","unref","Aborter","_aborted","childCancelContext","children","parent_1","cancelTimer","onabort","abortEventListeners","cancelByParent","_type","splice","clearTimeout","KeyInfo","start","expiry","UserDelegationKey","signedOid","signedTid","signedStart","signedExpiry","signedService","signedVersion","StorageError","ListBlobsFlatSegmentResponse","serviceEndpoint","containerName","prefix","marker","maxResults","delimiter","segment","nextMarker","ListBlobsHierarchySegmentResponse","BlockList","committedBlocks","uncommittedBlocks","BlockLookupList","committed","uncommitted","latest","ListContainersSegmentResponse","containerItems","PageList","pageRange","clearRange","StorageServiceProperties","logging","hourMetrics","minuteMetrics","cors","defaultServiceVersion","deleteRetentionPolicy","staticWebsite","StorageServiceStats","geoReplication","ServiceSetPropertiesHeaders","requestId","errorCode","ServiceGetPropertiesHeaders","ServiceGetStatisticsHeaders","date","ServiceListContainersSegmentHeaders","ServiceGetUserDelegationKeyHeaders","ServiceGetAccountInfoHeaders","skuName","accountKind","ContainerCreateHeaders","eTag","lastModified","ContainerGetPropertiesHeaders","metadata","leaseDuration","leaseState","leaseStatus","blobPublicAccess","hasImmutabilityPolicy","hasLegalHold","ContainerDeleteHeaders","ContainerSetMetadataHeaders","ContainerGetAccessPolicyHeaders","ContainerSetAccessPolicyHeaders","ContainerAcquireLeaseHeaders","leaseId","ContainerReleaseLeaseHeaders","ContainerRenewLeaseHeaders","ContainerBreakLeaseHeaders","leaseTime","ContainerChangeLeaseHeaders","ContainerListBlobFlatSegmentHeaders","ContainerListBlobHierarchySegmentHeaders","ContainerGetAccountInfoHeaders","BlobDownloadHeaders","contentLength","contentRange","contentMD5","contentEncoding","cacheControl","contentDisposition","contentLanguage","blobSequenceNumber","blobType","copyCompletionTime","copyStatusDescription","copyId","copyProgress","copySource","copyStatus","acceptRanges","blobCommittedBlockCount","isServerEncrypted","blobContentMD5","BlobGetPropertiesHeaders","creationTime","isIncrementalCopy","destinationSnapshot","accessTier","accessTierInferred","archiveStatus","accessTierChangeTime","BlobDeleteHeaders","PageBlobCreateHeaders","AppendBlobCreateHeaders","BlockBlobUploadHeaders","BlobUndeleteHeaders","BlobSetHTTPHeadersHeaders","BlobSetMetadataHeaders","BlobAcquireLeaseHeaders","BlobReleaseLeaseHeaders","BlobRenewLeaseHeaders","BlobChangeLeaseHeaders","BlobBreakLeaseHeaders","BlobCreateSnapshotHeaders","snapshot","BlobStartCopyFromURLHeaders","BlobCopyFromURLHeaders","BlobAbortCopyFromURLHeaders","BlobSetTierHeaders","BlobGetAccountInfoHeaders","BlockBlobStageBlockHeaders","BlockBlobStageBlockFromURLHeaders","BlockBlobCommitBlockListHeaders","BlockBlobGetBlockListHeaders","blobContentLength","PageBlobUploadPagesHeaders","PageBlobClearPagesHeaders","PageBlobUploadPagesFromURLHeaders","PageBlobGetPageRangesHeaders","PageBlobGetPageRangesDiffHeaders","PageBlobResizeHeaders","PageBlobUpdateSequenceNumberHeaders","PageBlobCopyIncrementalHeaders","AppendBlobAppendBlockHeaders","blobAppendOffset","AppendBlobAppendBlockFromUrlHeaders","properties","etag","publicAccess","allowedOrigins","allowedMethods","allowedHeaders","exposedHeaders","maxAgeInSeconds","lastSyncTime","deleteProperty","read","write","retentionPolicy","enabled","includeAPIs","days","indexDocument","errorDocument404Path","access","action0","action1","action2","action3","action4","appendPosition","blobCacheControl","blobContentDisposition","blobContentEncoding","blobContentLanguage","blobContentType","blockId","breakPeriod","comp0","comp11","comp12","comp14","comp15","comp16","comp2","comp4","comp5","comp6","duration","ifMatch","ifModifiedSince","ifNoneMatch","ifSequenceNumberEqualTo","ifSequenceNumberLessThan","ifSequenceNumberLessThanOrEqualTo","ifUnmodifiedSince","include1","msRest.QueryCollectionFormat","Csv","leaseId0","leaseId1","maxresults","maxSize","pageWrite0","proposedLeaseId0","proposedLeaseId1","range0","restype0","restype1","restype2","sourceContentMD5","sourceIfMatch","sourceIfModifiedSince","sourceIfNoneMatch","sourceIfUnmodifiedSince","sourceRange1","sourceUrl","transactionalContentMD5","client","Service","storageServiceProperties","sendOperationRequest","setPropertiesOperationSpec","getPropertiesOperationSpec","getStatisticsOperationSpec","listContainersSegmentOperationSpec","keyInfo","getUserDelegationKeyOperationSpec","getAccountInfoOperationSpec","msRest.Serializer","Mappers","Parameters.url","Parameters.timeout","Parameters.restype0","Parameters.comp0","Parameters.version","Parameters.requestId","Mappers.StorageServiceProperties","202","Mappers.ServiceSetPropertiesHeaders","Mappers.StorageError","200","Mappers.ServiceGetPropertiesHeaders","Mappers.StorageServiceStats","Mappers.ServiceGetStatisticsHeaders","Parameters.prefix","Parameters.marker","Parameters.maxresults","Parameters.comp2","Mappers.ListContainersSegmentResponse","Mappers.ServiceListContainersSegmentHeaders","Mappers.KeyInfo","Mappers.UserDelegationKey","Mappers.ServiceGetUserDelegationKeyHeaders","Parameters.restype1","Mappers.ServiceGetAccountInfoHeaders","permission","blobItems","blobPrefixes","deleted","serverEncrypted","incrementalCopy","deletedTime","remainingRetentionDays","id","accessPolicy","Container","createOperationSpec","deleteMethodOperationSpec","setMetadataOperationSpec","getAccessPolicyOperationSpec","setAccessPolicyOperationSpec","acquireLeaseOperationSpec","releaseLeaseOperationSpec","renewLeaseOperationSpec","breakLeaseOperationSpec","proposedLeaseId","changeLeaseOperationSpec","listBlobFlatSegmentOperationSpec","listBlobHierarchySegmentOperationSpec","Parameters.restype2","Parameters.metadata","Parameters.access","201","Mappers.ContainerCreateHeaders","Parameters.leaseId0","Mappers.ContainerGetPropertiesHeaders","Parameters.ifModifiedSince","Parameters.ifUnmodifiedSince","Mappers.ContainerDeleteHeaders","Parameters.comp4","Mappers.ContainerSetMetadataHeaders","Parameters.comp5","Mappers.ContainerGetAccessPolicyHeaders","Mappers.ContainerSetAccessPolicyHeaders","Parameters.comp6","Parameters.duration","Parameters.proposedLeaseId0","Parameters.action0","Mappers.ContainerAcquireLeaseHeaders","Parameters.leaseId1","Parameters.action1","Mappers.ContainerReleaseLeaseHeaders","Parameters.action2","Mappers.ContainerRenewLeaseHeaders","Parameters.breakPeriod","Parameters.action3","Mappers.ContainerBreakLeaseHeaders","Parameters.proposedLeaseId1","Parameters.action4","Mappers.ContainerChangeLeaseHeaders","Parameters.include1","Mappers.ListBlobsFlatSegmentResponse","Mappers.ContainerListBlobFlatSegmentHeaders","Mappers.ListBlobsHierarchySegmentResponse","Mappers.ContainerListBlobHierarchySegmentHeaders","Mappers.ContainerGetAccountInfoHeaders","downloadOperationSpec","undeleteOperationSpec","setHTTPHeadersOperationSpec","createSnapshotOperationSpec","startCopyFromURLOperationSpec","copyFromURLOperationSpec","abortCopyFromURLOperationSpec","tier","setTierOperationSpec","Parameters.snapshot","Parameters.range0","Parameters.ifMatch","Parameters.ifNoneMatch","Mappers.BlobDownloadHeaders","206","Mappers.BlobGetPropertiesHeaders","Mappers.BlobDeleteHeaders","Mappers.BlobUndeleteHeaders","Parameters.blobCacheControl","Parameters.blobContentType","Parameters.blobContentMD5","Parameters.blobContentEncoding","Parameters.blobContentLanguage","Parameters.blobContentDisposition","Mappers.BlobSetHTTPHeadersHeaders","Mappers.BlobSetMetadataHeaders","Mappers.BlobAcquireLeaseHeaders","Mappers.BlobReleaseLeaseHeaders","Mappers.BlobRenewLeaseHeaders","Mappers.BlobChangeLeaseHeaders","Mappers.BlobBreakLeaseHeaders","Mappers.BlobCreateSnapshotHeaders","Parameters.copySource","Parameters.sourceIfModifiedSince","Parameters.sourceIfUnmodifiedSince","Parameters.sourceIfMatch","Parameters.sourceIfNoneMatch","Mappers.BlobStartCopyFromURLHeaders","Mappers.BlobCopyFromURLHeaders","204","Mappers.BlobAbortCopyFromURLHeaders","Mappers.BlobSetTierHeaders","Mappers.BlobGetAccountInfoHeaders","end","PageBlob","uploadPagesOperationSpec","clearPagesOperationSpec","sourceRange","range","uploadPagesFromURLOperationSpec","getPageRangesOperationSpec","getPageRangesDiffOperationSpec","resizeOperationSpec","sequenceNumberAction","updateSequenceNumberOperationSpec","copyIncrementalOperationSpec","Parameters.contentLength","Parameters.blobContentLength","Parameters.blobSequenceNumber","Mappers.PageBlobCreateHeaders","Parameters.comp11","Parameters.transactionalContentMD5","Parameters.pageWrite0","Parameters.ifSequenceNumberLessThanOrEqualTo","Parameters.ifSequenceNumberLessThan","Parameters.ifSequenceNumberEqualTo","Mappers.PageBlobUploadPagesHeaders","Mappers.PageBlobClearPagesHeaders","Parameters.sourceUrl","Parameters.sourceContentMD5","Mappers.PageBlobUploadPagesFromURLHeaders","Parameters.comp12","Mappers.PageList","Mappers.PageBlobGetPageRangesHeaders","Mappers.PageBlobGetPageRangesDiffHeaders","Mappers.PageBlobResizeHeaders","Mappers.PageBlobUpdateSequenceNumberHeaders","Mappers.PageBlobCopyIncrementalHeaders","AppendBlob","appendBlockOperationSpec","appendBlockFromUrlOperationSpec","Mappers.AppendBlobCreateHeaders","Parameters.comp14","Parameters.maxSize","Parameters.appendPosition","Mappers.AppendBlobAppendBlockHeaders","Parameters.sourceRange1","Mappers.AppendBlobAppendBlockFromUrlHeaders","size","BlockBlob","uploadOperationSpec","stageBlockOperationSpec","stageBlockFromURLOperationSpec","blocks","commitBlockListOperationSpec","listType","getBlockListOperationSpec","Mappers.BlockBlobUploadHeaders","Parameters.blockId","Parameters.comp15","Mappers.BlockBlobStageBlockHeaders","Mappers.BlockBlobStageBlockFromURLHeaders","Parameters.comp16","Mappers.BlockLookupList","Mappers.BlockBlobCommitBlockListHeaders","Mappers.BlockList","Mappers.BlockBlobGetBlockListHeaders","rangeToString","iRange","RangeError","count","BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES","BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES","BLOCK_BLOB_MAX_BLOCKS","DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES","URLConstants","FORCE_BROWSER_NO_CACHE","SIGNATURE","SNAPSHOT","TIMEOUT","HTTPURLConnection","CONTENT_ENCODING","CONTENT_LANGUAGE","CONTENT_LENGTH","CONTENT_MD5","CONTENT_TYPE","COOKIE","DATE","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_UNMODIFIED_SINCE","PREFIX_FOR_STORAGE","RANGE","X_MS_CLIENT_REQUEST_ID","X_MS_DATE","escapeURLPath","urlParsed","appendToURLPath","setURLParameter","truncatedISO8061Date","withMilliseconds","dateString","generateBlockID","blockIDPrefix","blockIndex","maxSourceStringLength","content","currentString","targetLength","padString","padStart","repeat","Buffer","from","timeInMs","aborter","abortError","abortHandler","RetryPolicyType","BrowserPolicy","BrowserPolicyFactory","packageName","packageVersion","defaultUserAgent","msRest.getDefaultUserAgentValue","msRest.ServiceClient","keepAliveOptions","KeepAlivePolicy","enable","KeepAlivePolicyFactory","DEFAULT_REQUEST_LOG_OPTIONS","logWarningIfTryOverThreshold","loggingOptions","LoggingPolicy","tryCount","requestStartTime","operationStartTime","getQueryParameterValue","getURLParameter","safeURL","INFO","requestEndTime","requestCompletionTime","operationDuration","currentLevel","logMessage","WARNING","errorString","ERROR","messageInfo","err_1","LoggingPolicyFactory","Pipeline","HTTPClient","logger","ReflectOwnKeys","DEFAULT_RETRY_OPTIONS","maxRetryDelayInMs","maxTries","retryDelayInMs","retryPolicyType","EXPONENTIAL","secondaryHost","tryTimeoutInMs","RETRY_ABORT_ERROR","retryOptions","RetryPolicy","attemptSendRequest","secondaryHas404","attempt","newRequest","isPrimaryRetry","setURLHost","logf","retriableErrors_1","retriableError","_level","_message","delayTimeInMs","FIXED","RetryPolicyFactory","telemetry","TelemetryPolicy","telemetryString","TelemetryPolicyFactory","UniqueRequestIDPolicy","UniqueRequestIDPolicyFactory","pipeline","storageClientContext","StorageClientContext","toServiceClientOptions","StorageURL","credential","pipelineOptions","blobContext","BlobURL","containerURL","blobName","blobAccessConditions","modifiedAccessConditions","download","leaseAccessConditions","progress","rangeGetContentMD5","maxRetryRequests","updatedOptions","getProperties","deleteMethod","deleteSnapshots","undelete","blobHTTPHeaders","setHTTPHeaders","setMetadata","acquireLease","releaseLease","renewLease","changeLease","breakLease","createSnapshot","sourceModifiedAccessConditions","startCopyFromURL","abortCopyFromURL","copyFromURL","setTier","appendBlobContext","AppendBlobURL","blobURL","accessConditions","appendBlock","appendPositionAccessConditions","sourceURL","sourceOffset","appendBlockFromUrl","blockBlobContext","BlockBlobURL","stageBlock","stageBlockFromURL","commitBlockList","getBlockList","containerContext","ContainerURL","serviceURL","containerAccessConditions","getAccessPolicy","signedIdentifiers","response_1","identifier","containerAcl","acl","setAccessPolicy","period","listBlobFlatSegment","listBlobHierarchySegment","CredentialPolicy","Credential","AnonymousCredential","AnonymousCredentialPolicy","tokenCredential","authorizationScheme","TokenCredentialPolicy","TokenCredential","R","Reflect","ReflectApply","target","receiver","args","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","EventEmitter","init","_events","_eventsCount","_maxListeners","defaultMaxListeners","$getMaxListeners","that","_addListener","prepend","m","events","existing","warning","newListener","emit","unshift","warned","w","emitter","console","warn","_onceWrap","fired","wrapFn","wrapped","removeListener","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","enumerable","arg","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","handler","listeners","addListener","on","prependListener","once","prependOnceListener","list","position","originalListener","shift","spliceOne","off","removeAllListeners","rawListeners","eventNames","BatchStates","concurrency","Good","Batch","operation","operations","actives","completed","parallelExecute","error_1","nextOperation","UploadSeekableBlobToBlockBlob","blobFactory","blockBlobURL","blockSize","maxSingleShotSize","ceil","numBlocks","blockList","transferProgress","batch","parallelism","addOperation","blockID","do","pageBlobContext","PageBlobURL","uploadPages","sequenceNumberAccessConditions","destOffset","uploadPagesFromURL","clearPages","getPageRanges","prevSnapshot","getPageRangesDiff","prevsnapshot","resize","sequenceNumber","updateSequenceNumber","copyIncremental","serviceContext","ServiceURL","setProperties","getStatistics","getAccountInfo","listContainersSegment","getUserDelegationKey","userDelegationKey","browserData","browserBlob"],"mappings":"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"}