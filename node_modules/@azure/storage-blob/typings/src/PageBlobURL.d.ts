import { HttpRequestBody, TransferProgressEvent } from "@azure/ms-rest-js";
import { Aborter } from "./Aborter";
import { BlobURL } from "./BlobURL";
import { ContainerURL } from "./ContainerURL";
import * as Models from "./generated/src/models";
import { IBlobAccessConditions, IMetadata, IPageBlobAccessConditions } from "./models";
import { Pipeline } from "./Pipeline";
export interface IPageBlobCreateOptions {
    accessConditions?: IBlobAccessConditions;
    blobSequenceNumber?: number;
    blobHTTPHeaders?: Models.BlobHTTPHeaders;
    metadata?: IMetadata;
}
export interface IPageBlobUploadPagesOptions {
    accessConditions?: IPageBlobAccessConditions;
    progress?: (progress: TransferProgressEvent) => void;
    transactionalContentMD5?: Uint8Array;
}
export interface IPageBlobUploadPagesFromURLOptions {
    accessConditions?: IPageBlobAccessConditions;
    sourceModifiedAccessConditions?: Models.ModifiedAccessConditions;
    sourceContentMD5?: Uint8Array;
}
export interface IPageBlobClearPagesOptions {
    accessConditions?: IPageBlobAccessConditions;
}
export interface IPageBlobGetPageRangesOptions {
    accessConditions?: IBlobAccessConditions;
}
export interface IPageBlobGetPageRangesDiffOptions {
    accessConditions?: IBlobAccessConditions;
    range?: string;
}
export interface IPageBlobResizeOptions {
    accessConditions?: IBlobAccessConditions;
}
export interface IPageBlobUpdateSequenceNumberOptions {
    accessConditions?: IBlobAccessConditions;
}
export interface IPageBlobStartCopyIncrementalOptions {
    modifiedAccessConditions?: Models.ModifiedAccessConditions;
}
/**
 * PageBlobURL defines a set of operations applicable to page blobs.
 *
 * @export
 * @class PageBlobURL
 * @extends {StorageURL}
 */
export declare class PageBlobURL extends BlobURL {
    /**
     * Creates a PageBlobURL object from ContainerURL instance.
     *
     * @static
     * @param {ContainerURL} containerURL A ContainerURL object
     * @param {string} blobName A page blob name
     * @returns {PageBlobURL}
     * @memberof PageBlobURL
     */
    static fromContainerURL(containerURL: ContainerURL, blobName: string): PageBlobURL;
    /**
     * Creates a PageBlobURL object from BlobURL instance.
     *
     * @static
     * @param {BlobURL} blobURL
     * @returns {PageBlobURL}
     * @memberof PageBlobURL
     */
    static fromBlobURL(blobURL: BlobURL): PageBlobURL;
    /**
     * pageBlobsContext provided by protocol layer.
     *
     * @private
     * @type {PageBlobs}
     * @memberof PageBlobURL
     */
    private pageBlobContext;
    /**
     * Creates an instance of PageBlobURL.
     * This method accepts an encoded URL or non-encoded URL pointing to a page blob.
     * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
     * If a blob name includes ? or %, blob name must be encoded in the URL.
     *
     * @param {string} url A URL string pointing to Azure Storage page blob, such as
     *                     "https://myaccount.blob.core.windows.net/mycontainer/pageblob". You can
     *                     append a SAS if using AnonymousCredential, such as
     *                     "https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString".
     *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.
     *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
     *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.
     *                     Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
     * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default
     *                            pipeline, or provide a customized pipeline.
     * @memberof PageBlobURL
     */
    constructor(url: string, pipeline: Pipeline);
    /**
     * Creates a new PageBlobURL object identical to the source but with the
     * specified request policy pipeline.
     *
     * @param {Pipeline} pipeline
     * @returns {PageBlobURL}
     * @memberof PageBlobURL
     */
    withPipeline(pipeline: Pipeline): PageBlobURL;
    /**
     * Creates a new PageBlobURL object identical to the source but with the
     * specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a URL to the base blob.
     *
     * @param {string} snapshot
     * @returns {PageBlobURL}
     * @memberof PageBlobURL
     */
    withSnapshot(snapshot: string): PageBlobURL;
    /**
     * Creates a page blob of the specified length. Call uploadPages to upload data
     * data to a page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),
     *                          goto documents of Aborter for more examples about request cancellation
     * @param {number} size
     * @param {IPageBlobCreateOptions} [options]
     * @returns {Promise<Models.PageBlobCreateResponse>}
     * @memberof PageBlobURL
     */
    create(aborter: Aborter, size: number, options?: IPageBlobCreateOptions): Promise<Models.PageBlobCreateResponse>;
    /**
     * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-page
     *
     * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),
     *                          goto documents of Aborter for more examples about request cancellation
     * @param {HttpRequestBody} body
     * @param {number} offset Offset of destination page blob
     * @param {number} count Content length of the body, also number of bytes to be uploaded
     * @param {IPageBlobUploadPagesOptions} [options]
     * @returns {Promise<Models.PageBlobsUploadPagesResponse>}
     * @memberof PageBlobURL
     */
    uploadPages(aborter: Aborter, body: HttpRequestBody, offset: number, count: number, options?: IPageBlobUploadPagesOptions): Promise<Models.PageBlobUploadPagesResponse>;
    /**
     * The Upload Pages operation writes a range of pages to a page blob where the
     * contents are read from a URL.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
     *
     * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),
     *                          goto documents of Aborter for more examples about request cancellation
     * @param {string} sourceURL Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication
     * @param {number} sourceOffset The source offset to copy from. Pass 0 to copy from the beginning of source page blob
     * @param {number} destOffset Offset of destination page blob
     * @param {number} count Number of bytes to be uploaded from source page blob
     * @param {IPageBlobUploadPagesFromURLOptions} [options={}]
     * @returns {Promise<Models.PageBlobUploadPagesFromURLResponse>}
     * @memberof PageBlobURL
     */
    uploadPagesFromURL(aborter: Aborter, sourceURL: string, sourceOffset: number, destOffset: number, count: number, options?: IPageBlobUploadPagesFromURLOptions): Promise<Models.PageBlobUploadPagesFromURLResponse>;
    /**
     * Frees the specified pages from the page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-page
     *
     * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),
     *                          goto documents of Aborter for more examples about request cancellation
     * @param {number} offset
     * @param {number} count
     * @param {IPageBlobClearPagesOptions} [options]
     * @returns {Promise<Models.PageBlobClearPagesResponse>}
     * @memberof PageBlobURL
     */
    clearPages(aborter: Aborter, offset: number, count: number, options?: IPageBlobClearPagesOptions): Promise<Models.PageBlobClearPagesResponse>;
    /**
     * Returns the list of valid page ranges for a page blob or snapshot of a page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),
     *                          goto documents of Aborter for more examples about request cancellation
     * @param {number} offset
     * @param {number} count
     * @param {IPageBlobGetPageRangesOptions} [options]
     * @returns {Promise<Models.PageBlobGetPageRangesResponse>}
     * @memberof PageBlobURL
     */
    getPageRanges(aborter: Aborter, offset: number, count: number, options?: IPageBlobGetPageRangesOptions): Promise<Models.PageBlobGetPageRangesResponse>;
    /**
     * Gets the collection of page ranges that differ between a specified snapshot and this page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),
     *                          goto documents of Aborter for more examples about request cancellation
     * @param {number} offset
     * @param {number} count
     * @param {string} prevSnapshot
     * @param {IPageBlobGetPageRangesDiffOptions} [options]
     * @returns {Promise<Models.PageBlobGetPageRangesDiffResponse>}
     * @memberof PageBlobURL
     */
    getPageRangesDiff(aborter: Aborter, offset: number, count: number, prevSnapshot: string, options?: IPageBlobGetPageRangesDiffOptions): Promise<Models.PageBlobGetPageRangesDiffResponse>;
    /**
     * Resizes the page blob to the specified size (which must be a multiple of 512).
     * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
     *
     * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),
     *                          goto documents of Aborter for more examples about request cancellation
     * @param {number} size
     * @param {IPageBlobResizeOptions} [options]
     * @returns {Promise<Models.PageBlobResizeResponse>}
     * @memberof PageBlobURL
     */
    resize(aborter: Aborter, size: number, options?: IPageBlobResizeOptions): Promise<Models.PageBlobResizeResponse>;
    /**
     * Sets a page blob's sequence number.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
     *
     * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),
     *                          goto documents of Aborter for more examples about request cancellation
     * @param {Models.SequenceNumberActionType} sequenceNumberAction
     * @param {number} [sequenceNumber] Required if sequenceNumberAction is max or update
     * @param {IPageBlobUpdateSequenceNumberOptions} [options]
     * @returns {Promise<Models.PageBlobUpdateSequenceNumberResponse>}
     * @memberof PageBlobURL
     */
    updateSequenceNumber(aborter: Aborter, sequenceNumberAction: Models.SequenceNumberActionType, sequenceNumber?: number, options?: IPageBlobUpdateSequenceNumberOptions): Promise<Models.PageBlobUpdateSequenceNumberResponse>;
    /**
     * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.
     * The snapshot is copied such that only the differential changes between the previously
     * copied snapshot are transferred to the destination.
     * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.
     * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob
     * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
     *
     * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),
     *                          goto documents of Aborter for more examples about request cancellation
     * @param {string} copySource Specifies the name of the source page blob snapshot. For example,
     *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
     * @param {IPageBlobStartCopyIncrementalOptions} [options]
     * @returns {Promise<Models.PageBlobCopyIncrementalResponse>}
     * @memberof PageBlobURL
     */
    startCopyIncremental(aborter: Aborter, copySource: string, options?: IPageBlobStartCopyIncrementalOptions): Promise<Models.PageBlobCopyIncrementalResponse>;
}
//# sourceMappingURL=PageBlobURL.d.ts.map