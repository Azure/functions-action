import { IAuthorizationHandler } from "./IAuthorizationHandler";
import webClient = require("../webClient");
export declare class ApiResult {
    error: any;
    result: any;
    request: any;
    response: any;
    constructor(error: any, result?: any, request?: any, response?: any);
}
export declare class AzureError {
    code: any;
    message: string | undefined;
    statusCode: number | undefined;
    details: any;
}
export interface ApiCallback {
    (error: any, result?: any, request?: any, response?: any): void;
}
export declare function ToError(response: webClient.WebResponse): AzureError;
export declare class ServiceClient {
    private endpoint;
    protected baseUrl: string;
    protected longRunningOperationRetryTimeout: number;
    subscriptionId: string;
    constructor(endpoint: IAuthorizationHandler, timeout?: number);
    getRequestUri(uriFormat: string, parameters: {}, queryParameters?: string[], apiVersion?: string): string;
    getRequestUriForbaseUrl(baseUrl: string, uriFormat: string, parameters: {}, queryParameters?: string[], apiVersion?: string): string;
    beginRequest(request: webClient.WebRequest): Promise<webClient.WebResponse>;
    accumulateResultFromPagedResult(nextLinkUrl: string): Promise<ApiResult>;
}
